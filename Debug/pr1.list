
pr1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094c0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08009760  08009760  0000a760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080098c4  080098c4  0000a8c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080098cc  080098cc  0000a8cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080098d0  080098d0  0000a8d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  080098d4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000474  2400006c  08009940  0000b06c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240004e0  08009940  0000b4e0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011576  00000000  00000000  0000b09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002363  00000000  00000000  0001c610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000c08  00000000  00000000  0001e978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000093d  00000000  00000000  0001f580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000373df  00000000  00000000  0001febd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00011990  00000000  00000000  0005729c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015b86a  00000000  00000000  00068c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c4496  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000038e8  00000000  00000000  001c44dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000061  00000000  00000000  001c7dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400006c 	.word	0x2400006c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009748 	.word	0x08009748

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000070 	.word	0x24000070
 80002dc:	08009748 	.word	0x08009748

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295
 80003b4:	f000 b988 	b.w	80006c8 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	468e      	mov	lr, r1
 80003d8:	4604      	mov	r4, r0
 80003da:	4688      	mov	r8, r1
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d14a      	bne.n	8000476 <__udivmoddi4+0xa6>
 80003e0:	428a      	cmp	r2, r1
 80003e2:	4617      	mov	r7, r2
 80003e4:	d962      	bls.n	80004ac <__udivmoddi4+0xdc>
 80003e6:	fab2 f682 	clz	r6, r2
 80003ea:	b14e      	cbz	r6, 8000400 <__udivmoddi4+0x30>
 80003ec:	f1c6 0320 	rsb	r3, r6, #32
 80003f0:	fa01 f806 	lsl.w	r8, r1, r6
 80003f4:	fa20 f303 	lsr.w	r3, r0, r3
 80003f8:	40b7      	lsls	r7, r6
 80003fa:	ea43 0808 	orr.w	r8, r3, r8
 80003fe:	40b4      	lsls	r4, r6
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	fa1f fc87 	uxth.w	ip, r7
 8000408:	fbb8 f1fe 	udiv	r1, r8, lr
 800040c:	0c23      	lsrs	r3, r4, #16
 800040e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fb01 f20c 	mul.w	r2, r1, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d909      	bls.n	8000432 <__udivmoddi4+0x62>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f101 30ff 	add.w	r0, r1, #4294967295
 8000424:	f080 80ea 	bcs.w	80005fc <__udivmoddi4+0x22c>
 8000428:	429a      	cmp	r2, r3
 800042a:	f240 80e7 	bls.w	80005fc <__udivmoddi4+0x22c>
 800042e:	3902      	subs	r1, #2
 8000430:	443b      	add	r3, r7
 8000432:	1a9a      	subs	r2, r3, r2
 8000434:	b2a3      	uxth	r3, r4
 8000436:	fbb2 f0fe 	udiv	r0, r2, lr
 800043a:	fb0e 2210 	mls	r2, lr, r0, r2
 800043e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000442:	fb00 fc0c 	mul.w	ip, r0, ip
 8000446:	459c      	cmp	ip, r3
 8000448:	d909      	bls.n	800045e <__udivmoddi4+0x8e>
 800044a:	18fb      	adds	r3, r7, r3
 800044c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000450:	f080 80d6 	bcs.w	8000600 <__udivmoddi4+0x230>
 8000454:	459c      	cmp	ip, r3
 8000456:	f240 80d3 	bls.w	8000600 <__udivmoddi4+0x230>
 800045a:	443b      	add	r3, r7
 800045c:	3802      	subs	r0, #2
 800045e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000462:	eba3 030c 	sub.w	r3, r3, ip
 8000466:	2100      	movs	r1, #0
 8000468:	b11d      	cbz	r5, 8000472 <__udivmoddi4+0xa2>
 800046a:	40f3      	lsrs	r3, r6
 800046c:	2200      	movs	r2, #0
 800046e:	e9c5 3200 	strd	r3, r2, [r5]
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	428b      	cmp	r3, r1
 8000478:	d905      	bls.n	8000486 <__udivmoddi4+0xb6>
 800047a:	b10d      	cbz	r5, 8000480 <__udivmoddi4+0xb0>
 800047c:	e9c5 0100 	strd	r0, r1, [r5]
 8000480:	2100      	movs	r1, #0
 8000482:	4608      	mov	r0, r1
 8000484:	e7f5      	b.n	8000472 <__udivmoddi4+0xa2>
 8000486:	fab3 f183 	clz	r1, r3
 800048a:	2900      	cmp	r1, #0
 800048c:	d146      	bne.n	800051c <__udivmoddi4+0x14c>
 800048e:	4573      	cmp	r3, lr
 8000490:	d302      	bcc.n	8000498 <__udivmoddi4+0xc8>
 8000492:	4282      	cmp	r2, r0
 8000494:	f200 8105 	bhi.w	80006a2 <__udivmoddi4+0x2d2>
 8000498:	1a84      	subs	r4, r0, r2
 800049a:	eb6e 0203 	sbc.w	r2, lr, r3
 800049e:	2001      	movs	r0, #1
 80004a0:	4690      	mov	r8, r2
 80004a2:	2d00      	cmp	r5, #0
 80004a4:	d0e5      	beq.n	8000472 <__udivmoddi4+0xa2>
 80004a6:	e9c5 4800 	strd	r4, r8, [r5]
 80004aa:	e7e2      	b.n	8000472 <__udivmoddi4+0xa2>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f000 8090 	beq.w	80005d2 <__udivmoddi4+0x202>
 80004b2:	fab2 f682 	clz	r6, r2
 80004b6:	2e00      	cmp	r6, #0
 80004b8:	f040 80a4 	bne.w	8000604 <__udivmoddi4+0x234>
 80004bc:	1a8a      	subs	r2, r1, r2
 80004be:	0c03      	lsrs	r3, r0, #16
 80004c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004c4:	b280      	uxth	r0, r0
 80004c6:	b2bc      	uxth	r4, r7
 80004c8:	2101      	movs	r1, #1
 80004ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80004d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004d6:	fb04 f20c 	mul.w	r2, r4, ip
 80004da:	429a      	cmp	r2, r3
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x11e>
 80004de:	18fb      	adds	r3, r7, r3
 80004e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004e4:	d202      	bcs.n	80004ec <__udivmoddi4+0x11c>
 80004e6:	429a      	cmp	r2, r3
 80004e8:	f200 80e0 	bhi.w	80006ac <__udivmoddi4+0x2dc>
 80004ec:	46c4      	mov	ip, r8
 80004ee:	1a9b      	subs	r3, r3, r2
 80004f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004fc:	fb02 f404 	mul.w	r4, r2, r4
 8000500:	429c      	cmp	r4, r3
 8000502:	d907      	bls.n	8000514 <__udivmoddi4+0x144>
 8000504:	18fb      	adds	r3, r7, r3
 8000506:	f102 30ff 	add.w	r0, r2, #4294967295
 800050a:	d202      	bcs.n	8000512 <__udivmoddi4+0x142>
 800050c:	429c      	cmp	r4, r3
 800050e:	f200 80ca 	bhi.w	80006a6 <__udivmoddi4+0x2d6>
 8000512:	4602      	mov	r2, r0
 8000514:	1b1b      	subs	r3, r3, r4
 8000516:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800051a:	e7a5      	b.n	8000468 <__udivmoddi4+0x98>
 800051c:	f1c1 0620 	rsb	r6, r1, #32
 8000520:	408b      	lsls	r3, r1
 8000522:	fa22 f706 	lsr.w	r7, r2, r6
 8000526:	431f      	orrs	r7, r3
 8000528:	fa0e f401 	lsl.w	r4, lr, r1
 800052c:	fa20 f306 	lsr.w	r3, r0, r6
 8000530:	fa2e fe06 	lsr.w	lr, lr, r6
 8000534:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000538:	4323      	orrs	r3, r4
 800053a:	fa00 f801 	lsl.w	r8, r0, r1
 800053e:	fa1f fc87 	uxth.w	ip, r7
 8000542:	fbbe f0f9 	udiv	r0, lr, r9
 8000546:	0c1c      	lsrs	r4, r3, #16
 8000548:	fb09 ee10 	mls	lr, r9, r0, lr
 800054c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000550:	fb00 fe0c 	mul.w	lr, r0, ip
 8000554:	45a6      	cmp	lr, r4
 8000556:	fa02 f201 	lsl.w	r2, r2, r1
 800055a:	d909      	bls.n	8000570 <__udivmoddi4+0x1a0>
 800055c:	193c      	adds	r4, r7, r4
 800055e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000562:	f080 809c 	bcs.w	800069e <__udivmoddi4+0x2ce>
 8000566:	45a6      	cmp	lr, r4
 8000568:	f240 8099 	bls.w	800069e <__udivmoddi4+0x2ce>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	eba4 040e 	sub.w	r4, r4, lr
 8000574:	fa1f fe83 	uxth.w	lr, r3
 8000578:	fbb4 f3f9 	udiv	r3, r4, r9
 800057c:	fb09 4413 	mls	r4, r9, r3, r4
 8000580:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000584:	fb03 fc0c 	mul.w	ip, r3, ip
 8000588:	45a4      	cmp	ip, r4
 800058a:	d908      	bls.n	800059e <__udivmoddi4+0x1ce>
 800058c:	193c      	adds	r4, r7, r4
 800058e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000592:	f080 8082 	bcs.w	800069a <__udivmoddi4+0x2ca>
 8000596:	45a4      	cmp	ip, r4
 8000598:	d97f      	bls.n	800069a <__udivmoddi4+0x2ca>
 800059a:	3b02      	subs	r3, #2
 800059c:	443c      	add	r4, r7
 800059e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005a2:	eba4 040c 	sub.w	r4, r4, ip
 80005a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005aa:	4564      	cmp	r4, ip
 80005ac:	4673      	mov	r3, lr
 80005ae:	46e1      	mov	r9, ip
 80005b0:	d362      	bcc.n	8000678 <__udivmoddi4+0x2a8>
 80005b2:	d05f      	beq.n	8000674 <__udivmoddi4+0x2a4>
 80005b4:	b15d      	cbz	r5, 80005ce <__udivmoddi4+0x1fe>
 80005b6:	ebb8 0203 	subs.w	r2, r8, r3
 80005ba:	eb64 0409 	sbc.w	r4, r4, r9
 80005be:	fa04 f606 	lsl.w	r6, r4, r6
 80005c2:	fa22 f301 	lsr.w	r3, r2, r1
 80005c6:	431e      	orrs	r6, r3
 80005c8:	40cc      	lsrs	r4, r1
 80005ca:	e9c5 6400 	strd	r6, r4, [r5]
 80005ce:	2100      	movs	r1, #0
 80005d0:	e74f      	b.n	8000472 <__udivmoddi4+0xa2>
 80005d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005d6:	0c01      	lsrs	r1, r0, #16
 80005d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005dc:	b280      	uxth	r0, r0
 80005de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005e2:	463b      	mov	r3, r7
 80005e4:	4638      	mov	r0, r7
 80005e6:	463c      	mov	r4, r7
 80005e8:	46b8      	mov	r8, r7
 80005ea:	46be      	mov	lr, r7
 80005ec:	2620      	movs	r6, #32
 80005ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80005f2:	eba2 0208 	sub.w	r2, r2, r8
 80005f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005fa:	e766      	b.n	80004ca <__udivmoddi4+0xfa>
 80005fc:	4601      	mov	r1, r0
 80005fe:	e718      	b.n	8000432 <__udivmoddi4+0x62>
 8000600:	4610      	mov	r0, r2
 8000602:	e72c      	b.n	800045e <__udivmoddi4+0x8e>
 8000604:	f1c6 0220 	rsb	r2, r6, #32
 8000608:	fa2e f302 	lsr.w	r3, lr, r2
 800060c:	40b7      	lsls	r7, r6
 800060e:	40b1      	lsls	r1, r6
 8000610:	fa20 f202 	lsr.w	r2, r0, r2
 8000614:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000618:	430a      	orrs	r2, r1
 800061a:	fbb3 f8fe 	udiv	r8, r3, lr
 800061e:	b2bc      	uxth	r4, r7
 8000620:	fb0e 3318 	mls	r3, lr, r8, r3
 8000624:	0c11      	lsrs	r1, r2, #16
 8000626:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800062a:	fb08 f904 	mul.w	r9, r8, r4
 800062e:	40b0      	lsls	r0, r6
 8000630:	4589      	cmp	r9, r1
 8000632:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000636:	b280      	uxth	r0, r0
 8000638:	d93e      	bls.n	80006b8 <__udivmoddi4+0x2e8>
 800063a:	1879      	adds	r1, r7, r1
 800063c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000640:	d201      	bcs.n	8000646 <__udivmoddi4+0x276>
 8000642:	4589      	cmp	r9, r1
 8000644:	d81f      	bhi.n	8000686 <__udivmoddi4+0x2b6>
 8000646:	eba1 0109 	sub.w	r1, r1, r9
 800064a:	fbb1 f9fe 	udiv	r9, r1, lr
 800064e:	fb09 f804 	mul.w	r8, r9, r4
 8000652:	fb0e 1119 	mls	r1, lr, r9, r1
 8000656:	b292      	uxth	r2, r2
 8000658:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800065c:	4542      	cmp	r2, r8
 800065e:	d229      	bcs.n	80006b4 <__udivmoddi4+0x2e4>
 8000660:	18ba      	adds	r2, r7, r2
 8000662:	f109 31ff 	add.w	r1, r9, #4294967295
 8000666:	d2c4      	bcs.n	80005f2 <__udivmoddi4+0x222>
 8000668:	4542      	cmp	r2, r8
 800066a:	d2c2      	bcs.n	80005f2 <__udivmoddi4+0x222>
 800066c:	f1a9 0102 	sub.w	r1, r9, #2
 8000670:	443a      	add	r2, r7
 8000672:	e7be      	b.n	80005f2 <__udivmoddi4+0x222>
 8000674:	45f0      	cmp	r8, lr
 8000676:	d29d      	bcs.n	80005b4 <__udivmoddi4+0x1e4>
 8000678:	ebbe 0302 	subs.w	r3, lr, r2
 800067c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000680:	3801      	subs	r0, #1
 8000682:	46e1      	mov	r9, ip
 8000684:	e796      	b.n	80005b4 <__udivmoddi4+0x1e4>
 8000686:	eba7 0909 	sub.w	r9, r7, r9
 800068a:	4449      	add	r1, r9
 800068c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000690:	fbb1 f9fe 	udiv	r9, r1, lr
 8000694:	fb09 f804 	mul.w	r8, r9, r4
 8000698:	e7db      	b.n	8000652 <__udivmoddi4+0x282>
 800069a:	4673      	mov	r3, lr
 800069c:	e77f      	b.n	800059e <__udivmoddi4+0x1ce>
 800069e:	4650      	mov	r0, sl
 80006a0:	e766      	b.n	8000570 <__udivmoddi4+0x1a0>
 80006a2:	4608      	mov	r0, r1
 80006a4:	e6fd      	b.n	80004a2 <__udivmoddi4+0xd2>
 80006a6:	443b      	add	r3, r7
 80006a8:	3a02      	subs	r2, #2
 80006aa:	e733      	b.n	8000514 <__udivmoddi4+0x144>
 80006ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80006b0:	443b      	add	r3, r7
 80006b2:	e71c      	b.n	80004ee <__udivmoddi4+0x11e>
 80006b4:	4649      	mov	r1, r9
 80006b6:	e79c      	b.n	80005f2 <__udivmoddi4+0x222>
 80006b8:	eba1 0109 	sub.w	r1, r1, r9
 80006bc:	46c4      	mov	ip, r8
 80006be:	fbb1 f9fe 	udiv	r9, r1, lr
 80006c2:	fb09 f804 	mul.w	r8, r9, r4
 80006c6:	e7c4      	b.n	8000652 <__udivmoddi4+0x282>

080006c8 <__aeabi_idiv0>:
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop

080006cc <DWT_Init>:
static State_e  state         = MONITOR;
static uint32_t secLeft, lastSec, lastBlink, disarmUntil;
static bool     blink;

/* ===================== DWT mikrosekunde ============================== */
static inline void DWT_Init(void){
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80006d0:	4b08      	ldr	r3, [pc, #32]	@ (80006f4 <DWT_Init+0x28>)
 80006d2:	68db      	ldr	r3, [r3, #12]
 80006d4:	4a07      	ldr	r2, [pc, #28]	@ (80006f4 <DWT_Init+0x28>)
 80006d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80006da:	60d3      	str	r3, [r2, #12]
    DWT->CTRL  |= DWT_CTRL_CYCCNTENA_Msk;
 80006dc:	4b06      	ldr	r3, [pc, #24]	@ (80006f8 <DWT_Init+0x2c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a05      	ldr	r2, [pc, #20]	@ (80006f8 <DWT_Init+0x2c>)
 80006e2:	f043 0301 	orr.w	r3, r3, #1
 80006e6:	6013      	str	r3, [r2, #0]
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	e000edf0 	.word	0xe000edf0
 80006f8:	e0001000 	.word	0xe0001000

080006fc <micros>:
static inline uint32_t micros(void){
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
    return DWT->CYCCNT / (SystemCoreClock/1000000);
 8000700:	4b07      	ldr	r3, [pc, #28]	@ (8000720 <micros+0x24>)
 8000702:	685a      	ldr	r2, [r3, #4]
 8000704:	4b07      	ldr	r3, [pc, #28]	@ (8000724 <micros+0x28>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4907      	ldr	r1, [pc, #28]	@ (8000728 <micros+0x2c>)
 800070a:	fba1 1303 	umull	r1, r3, r1, r3
 800070e:	0c9b      	lsrs	r3, r3, #18
 8000710:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000714:	4618      	mov	r0, r3
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	e0001000 	.word	0xe0001000
 8000724:	24000000 	.word	0x24000000
 8000728:	431bde83 	.word	0x431bde83

0800072c <_write>:

/* ===================== printf (blokirajoče TX) ======================= */
int _write(int fd,char *ptr,int len){
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart3,(uint8_t*)ptr,len,HAL_MAX_DELAY);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	b29a      	uxth	r2, r3
 800073c:	f04f 33ff 	mov.w	r3, #4294967295
 8000740:	68b9      	ldr	r1, [r7, #8]
 8000742:	4804      	ldr	r0, [pc, #16]	@ (8000754 <_write+0x28>)
 8000744:	f006 fd0e 	bl	8007164 <HAL_UART_Transmit>
    return len;
 8000748:	687b      	ldr	r3, [r7, #4]
}
 800074a:	4618      	mov	r0, r3
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	24000088 	.word	0x24000088

08000758 <set_led>:

/* ===================== LED helper ==================================== */
static void set_led(uint8_t id,bool on){
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	460a      	mov	r2, r1
 8000762:	71fb      	strb	r3, [r7, #7]
 8000764:	4613      	mov	r3, r2
 8000766:	71bb      	strb	r3, [r7, #6]
    if(id<1||id>4||ledState[id-1]==on) return;
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d040      	beq.n	80007f0 <set_led+0x98>
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	2b04      	cmp	r3, #4
 8000772:	d83d      	bhi.n	80007f0 <set_led+0x98>
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	3b01      	subs	r3, #1
 8000778:	4a1f      	ldr	r2, [pc, #124]	@ (80007f8 <set_led+0xa0>)
 800077a:	5cd3      	ldrb	r3, [r2, r3]
 800077c:	79ba      	ldrb	r2, [r7, #6]
 800077e:	429a      	cmp	r2, r3
 8000780:	d036      	beq.n	80007f0 <set_led+0x98>
    GPIO_TypeDef *p; uint16_t pin;
    switch(id){
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	2b03      	cmp	r3, #3
 8000786:	d011      	beq.n	80007ac <set_led+0x54>
 8000788:	2b03      	cmp	r3, #3
 800078a:	dc14      	bgt.n	80007b6 <set_led+0x5e>
 800078c:	2b01      	cmp	r3, #1
 800078e:	d002      	beq.n	8000796 <set_led+0x3e>
 8000790:	2b02      	cmp	r3, #2
 8000792:	d005      	beq.n	80007a0 <set_led+0x48>
 8000794:	e00f      	b.n	80007b6 <set_led+0x5e>
      case 1:p=LED1_PORT;pin=LED1_PIN;break;
 8000796:	4b19      	ldr	r3, [pc, #100]	@ (80007fc <set_led+0xa4>)
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	2308      	movs	r3, #8
 800079c:	817b      	strh	r3, [r7, #10]
 800079e:	e00f      	b.n	80007c0 <set_led+0x68>
      case 2:p=LED2_PORT;pin=LED2_PIN;break;
 80007a0:	4b17      	ldr	r3, [pc, #92]	@ (8000800 <set_led+0xa8>)
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007a8:	817b      	strh	r3, [r7, #10]
 80007aa:	e009      	b.n	80007c0 <set_led+0x68>
      case 3:p=LED3_PORT;pin=LED3_PIN;break;
 80007ac:	4b15      	ldr	r3, [pc, #84]	@ (8000804 <set_led+0xac>)
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	2310      	movs	r3, #16
 80007b2:	817b      	strh	r3, [r7, #10]
 80007b4:	e004      	b.n	80007c0 <set_led+0x68>
      default:p=LED4_PORT;pin=LED4_PIN;
 80007b6:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <set_led+0xac>)
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007be:	817b      	strh	r3, [r7, #10]
    }
    ledState[id-1]=on;
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	3b01      	subs	r3, #1
 80007c4:	490c      	ldr	r1, [pc, #48]	@ (80007f8 <set_led+0xa0>)
 80007c6:	79ba      	ldrb	r2, [r7, #6]
 80007c8:	54ca      	strb	r2, [r1, r3]
    HAL_GPIO_WritePin(p,pin,on?GPIO_PIN_SET:GPIO_PIN_RESET);
 80007ca:	79bb      	ldrb	r3, [r7, #6]
 80007cc:	461a      	mov	r2, r3
 80007ce:	897b      	ldrh	r3, [r7, #10]
 80007d0:	4619      	mov	r1, r3
 80007d2:	68f8      	ldr	r0, [r7, #12]
 80007d4:	f003 fddc 	bl	8004390 <HAL_GPIO_WritePin>
    printf("LED%u:%s\r\n",id,on?"ON":"OFF");
 80007d8:	79f9      	ldrb	r1, [r7, #7]
 80007da:	79bb      	ldrb	r3, [r7, #6]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <set_led+0x8c>
 80007e0:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <set_led+0xb0>)
 80007e2:	e000      	b.n	80007e6 <set_led+0x8e>
 80007e4:	4b09      	ldr	r3, [pc, #36]	@ (800080c <set_led+0xb4>)
 80007e6:	461a      	mov	r2, r3
 80007e8:	4809      	ldr	r0, [pc, #36]	@ (8000810 <set_led+0xb8>)
 80007ea:	f008 f8e3 	bl	80089b4 <iprintf>
 80007ee:	e000      	b.n	80007f2 <set_led+0x9a>
    if(id<1||id>4||ledState[id-1]==on) return;
 80007f0:	bf00      	nop
}
 80007f2:	3710      	adds	r7, #16
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	24000330 	.word	0x24000330
 80007fc:	58021000 	.word	0x58021000
 8000800:	58021c00 	.word	0x58021c00
 8000804:	58020400 	.word	0x58020400
 8000808:	08009760 	.word	0x08009760
 800080c:	08009764 	.word	0x08009764
 8000810:	08009768 	.word	0x08009768

08000814 <beep>:

/* ===================== Buzzer ======================================== */
static void beep(uint32_t ms){
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
    for(uint32_t i=0;i<ms;i++){
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	e009      	b.n	8000836 <beep+0x22>
        HAL_GPIO_TogglePin(GPIOG,GPIO_PIN_3);
 8000822:	2108      	movs	r1, #8
 8000824:	480a      	ldr	r0, [pc, #40]	@ (8000850 <beep+0x3c>)
 8000826:	f003 fdcc 	bl	80043c2 <HAL_GPIO_TogglePin>
        HAL_Delay(1);
 800082a:	2001      	movs	r0, #1
 800082c:	f001 f958 	bl	8001ae0 <HAL_Delay>
    for(uint32_t i=0;i<ms;i++){
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	3301      	adds	r3, #1
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	68fa      	ldr	r2, [r7, #12]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	429a      	cmp	r2, r3
 800083c:	d3f1      	bcc.n	8000822 <beep+0xe>
    }
    HAL_GPIO_WritePin(GPIOG,GPIO_PIN_3,GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	2108      	movs	r1, #8
 8000842:	4803      	ldr	r0, [pc, #12]	@ (8000850 <beep+0x3c>)
 8000844:	f003 fda4 	bl	8004390 <HAL_GPIO_WritePin>
}
 8000848:	bf00      	nop
 800084a:	3710      	adds	r7, #16
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	58021800 	.word	0x58021800

08000854 <us_read_cm>:

/* ===================== Ultrazvok ===================================== */
static uint32_t us_read_cm(void){
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
    uint32_t t0,t1,t2;
    HAL_GPIO_WritePin(US_TRIG_PORT,US_TRIG_PIN,GPIO_PIN_SET);
 800085a:	2201      	movs	r2, #1
 800085c:	2101      	movs	r1, #1
 800085e:	4828      	ldr	r0, [pc, #160]	@ (8000900 <us_read_cm+0xac>)
 8000860:	f003 fd96 	bl	8004390 <HAL_GPIO_WritePin>
    t0=micros(); while(micros()-t0<10);
 8000864:	f7ff ff4a 	bl	80006fc <micros>
 8000868:	60f8      	str	r0, [r7, #12]
 800086a:	bf00      	nop
 800086c:	f7ff ff46 	bl	80006fc <micros>
 8000870:	4602      	mov	r2, r0
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	2b09      	cmp	r3, #9
 8000878:	d9f8      	bls.n	800086c <us_read_cm+0x18>
    HAL_GPIO_WritePin(US_TRIG_PORT,US_TRIG_PIN,GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2101      	movs	r1, #1
 800087e:	4820      	ldr	r0, [pc, #128]	@ (8000900 <us_read_cm+0xac>)
 8000880:	f003 fd86 	bl	8004390 <HAL_GPIO_WritePin>
    t0=micros();
 8000884:	f7ff ff3a 	bl	80006fc <micros>
 8000888:	60f8      	str	r0, [r7, #12]
    while(!HAL_GPIO_ReadPin(US_ECHO_PORT,US_ECHO_PIN))
 800088a:	e00b      	b.n	80008a4 <us_read_cm+0x50>
        if(micros()-t0>30000) return UINT32_MAX;
 800088c:	f7ff ff36 	bl	80006fc <micros>
 8000890:	4602      	mov	r2, r0
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	f247 5230 	movw	r2, #30000	@ 0x7530
 800089a:	4293      	cmp	r3, r2
 800089c:	d902      	bls.n	80008a4 <us_read_cm+0x50>
 800089e:	f04f 33ff 	mov.w	r3, #4294967295
 80008a2:	e028      	b.n	80008f6 <us_read_cm+0xa2>
    while(!HAL_GPIO_ReadPin(US_ECHO_PORT,US_ECHO_PIN))
 80008a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008a8:	4816      	ldr	r0, [pc, #88]	@ (8000904 <us_read_cm+0xb0>)
 80008aa:	f003 fd59 	bl	8004360 <HAL_GPIO_ReadPin>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d0eb      	beq.n	800088c <us_read_cm+0x38>
    t1=micros();
 80008b4:	f7ff ff22 	bl	80006fc <micros>
 80008b8:	60b8      	str	r0, [r7, #8]
    while(HAL_GPIO_ReadPin(US_ECHO_PORT,US_ECHO_PIN))
 80008ba:	e008      	b.n	80008ce <us_read_cm+0x7a>
        if(micros()-t1>30000) break;
 80008bc:	f7ff ff1e 	bl	80006fc <micros>
 80008c0:	4602      	mov	r2, r0
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	f247 5230 	movw	r2, #30000	@ 0x7530
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d808      	bhi.n	80008e0 <us_read_cm+0x8c>
    while(HAL_GPIO_ReadPin(US_ECHO_PORT,US_ECHO_PIN))
 80008ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008d2:	480c      	ldr	r0, [pc, #48]	@ (8000904 <us_read_cm+0xb0>)
 80008d4:	f003 fd44 	bl	8004360 <HAL_GPIO_ReadPin>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d1ee      	bne.n	80008bc <us_read_cm+0x68>
 80008de:	e000      	b.n	80008e2 <us_read_cm+0x8e>
        if(micros()-t1>30000) break;
 80008e0:	bf00      	nop
    t2=micros();
 80008e2:	f7ff ff0b 	bl	80006fc <micros>
 80008e6:	6078      	str	r0, [r7, #4]
    return (t2-t1)/58;
 80008e8:	687a      	ldr	r2, [r7, #4]
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	4a06      	ldr	r2, [pc, #24]	@ (8000908 <us_read_cm+0xb4>)
 80008f0:	fba2 2303 	umull	r2, r3, r2, r3
 80008f4:	095b      	lsrs	r3, r3, #5
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3710      	adds	r7, #16
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	58020800 	.word	0x58020800
 8000904:	58021400 	.word	0x58021400
 8000908:	8d3dcb09 	.word	0x8d3dcb09

0800090c <print_btn>:

/* ===================== Gumbi (EXTI) ================================== */
static void print_btn(void){
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af02      	add	r7, sp, #8
    printf("G1:%lu G2:%lu G3:%lu G4:%lu\r\n",
           (unsigned long)pressCnt[0],(unsigned long)pressCnt[1],
 8000912:	4b08      	ldr	r3, [pc, #32]	@ (8000934 <print_btn+0x28>)
 8000914:	6819      	ldr	r1, [r3, #0]
 8000916:	4b07      	ldr	r3, [pc, #28]	@ (8000934 <print_btn+0x28>)
 8000918:	685a      	ldr	r2, [r3, #4]
           (unsigned long)pressCnt[2],(unsigned long)pressCnt[3]);
 800091a:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <print_btn+0x28>)
 800091c:	6898      	ldr	r0, [r3, #8]
 800091e:	4b05      	ldr	r3, [pc, #20]	@ (8000934 <print_btn+0x28>)
 8000920:	68db      	ldr	r3, [r3, #12]
    printf("G1:%lu G2:%lu G3:%lu G4:%lu\r\n",
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	4603      	mov	r3, r0
 8000926:	4804      	ldr	r0, [pc, #16]	@ (8000938 <print_btn+0x2c>)
 8000928:	f008 f844 	bl	80089b4 <iprintf>
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	2400030c 	.word	0x2400030c
 8000938:	08009774 	.word	0x08009774

0800093c <register_press>:
static void register_press(uint8_t idx){
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
    uint32_t now = HAL_GetTick();
 8000946:	f001 f8bf 	bl	8001ac8 <HAL_GetTick>
 800094a:	60f8      	str	r0, [r7, #12]
    if (now - lastPressMs[idx] < DEBOUNCE_MS) return; /* odbij odboj */
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	4a10      	ldr	r2, [pc, #64]	@ (8000990 <register_press+0x54>)
 8000950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000954:	68fa      	ldr	r2, [r7, #12]
 8000956:	1ad3      	subs	r3, r2, r3
 8000958:	2bf9      	cmp	r3, #249	@ 0xf9
 800095a:	d915      	bls.n	8000988 <register_press+0x4c>
    lastPressMs[idx] = now;
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	490c      	ldr	r1, [pc, #48]	@ (8000990 <register_press+0x54>)
 8000960:	68fa      	ldr	r2, [r7, #12]
 8000962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    pressCnt[idx]++; attemptCnt++;
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	4a0a      	ldr	r2, [pc, #40]	@ (8000994 <register_press+0x58>)
 800096a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800096e:	3201      	adds	r2, #1
 8000970:	4908      	ldr	r1, [pc, #32]	@ (8000994 <register_press+0x58>)
 8000972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000976:	4b08      	ldr	r3, [pc, #32]	@ (8000998 <register_press+0x5c>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	3301      	adds	r3, #1
 800097c:	b2da      	uxtb	r2, r3
 800097e:	4b06      	ldr	r3, [pc, #24]	@ (8000998 <register_press+0x5c>)
 8000980:	701a      	strb	r2, [r3, #0]
    print_btn();
 8000982:	f7ff ffc3 	bl	800090c <print_btn>
 8000986:	e000      	b.n	800098a <register_press+0x4e>
    if (now - lastPressMs[idx] < DEBOUNCE_MS) return; /* odbij odboj */
 8000988:	bf00      	nop
}
 800098a:	3710      	adds	r7, #16
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	2400031c 	.word	0x2400031c
 8000994:	2400030c 	.word	0x2400030c
 8000998:	2400032c 	.word	0x2400032c

0800099c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t pin){
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	80fb      	strh	r3, [r7, #6]
    if      (pin == BTN1_PIN) register_press(0);
 80009a6:	88fb      	ldrh	r3, [r7, #6]
 80009a8:	2b04      	cmp	r3, #4
 80009aa:	d103      	bne.n	80009b4 <HAL_GPIO_EXTI_Callback+0x18>
 80009ac:	2000      	movs	r0, #0
 80009ae:	f7ff ffc5 	bl	800093c <register_press>
    else if (pin == BTN2_PIN) register_press(1);
    else if (pin == BTN3_PIN) register_press(2);
    else if (pin == BTN4_PIN) register_press(3);
}
 80009b2:	e014      	b.n	80009de <HAL_GPIO_EXTI_Callback+0x42>
    else if (pin == BTN2_PIN) register_press(1);
 80009b4:	88fb      	ldrh	r3, [r7, #6]
 80009b6:	2b40      	cmp	r3, #64	@ 0x40
 80009b8:	d103      	bne.n	80009c2 <HAL_GPIO_EXTI_Callback+0x26>
 80009ba:	2001      	movs	r0, #1
 80009bc:	f7ff ffbe 	bl	800093c <register_press>
}
 80009c0:	e00d      	b.n	80009de <HAL_GPIO_EXTI_Callback+0x42>
    else if (pin == BTN3_PIN) register_press(2);
 80009c2:	88fb      	ldrh	r3, [r7, #6]
 80009c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80009c8:	d103      	bne.n	80009d2 <HAL_GPIO_EXTI_Callback+0x36>
 80009ca:	2002      	movs	r0, #2
 80009cc:	f7ff ffb6 	bl	800093c <register_press>
}
 80009d0:	e005      	b.n	80009de <HAL_GPIO_EXTI_Callback+0x42>
    else if (pin == BTN4_PIN) register_press(3);
 80009d2:	88fb      	ldrh	r3, [r7, #6]
 80009d4:	2b02      	cmp	r3, #2
 80009d6:	d102      	bne.n	80009de <HAL_GPIO_EXTI_Callback+0x42>
 80009d8:	2003      	movs	r0, #3
 80009da:	f7ff ffaf 	bl	800093c <register_press>
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <reset_btn>:

/* ponastavi števce in debounce čase */
static void reset_btn(void){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
    memset(pressCnt,0,sizeof pressCnt);
 80009ec:	2210      	movs	r2, #16
 80009ee:	2100      	movs	r1, #0
 80009f0:	4806      	ldr	r0, [pc, #24]	@ (8000a0c <reset_btn+0x24>)
 80009f2:	f008 f927 	bl	8008c44 <memset>
    memset(lastPressMs,0,sizeof lastPressMs);
 80009f6:	2210      	movs	r2, #16
 80009f8:	2100      	movs	r1, #0
 80009fa:	4805      	ldr	r0, [pc, #20]	@ (8000a10 <reset_btn+0x28>)
 80009fc:	f008 f922 	bl	8008c44 <memset>
    attemptCnt = 0;
 8000a00:	4b04      	ldr	r3, [pc, #16]	@ (8000a14 <reset_btn+0x2c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	701a      	strb	r2, [r3, #0]
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	2400030c 	.word	0x2400030c
 8000a10:	2400031c 	.word	0x2400031c
 8000a14:	2400032c 	.word	0x2400032c

08000a18 <HAL_UARTEx_RxEventCallback>:

/* ===================== UART RX idle DMA ============================== */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *hu,uint16_t sz){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	460b      	mov	r3, r1
 8000a22:	807b      	strh	r3, [r7, #2]
    static char line[64]; static uint8_t pos=0;
    for(uint16_t i=0;i<sz;i++){
 8000a24:	2300      	movs	r3, #0
 8000a26:	81fb      	strh	r3, [r7, #14]
 8000a28:	e055      	b.n	8000ad6 <HAL_UARTEx_RxEventCallback+0xbe>
        char c=rxBuf[i];
 8000a2a:	89fb      	ldrh	r3, [r7, #14]
 8000a2c:	4a31      	ldr	r2, [pc, #196]	@ (8000af4 <HAL_UARTEx_RxEventCallback+0xdc>)
 8000a2e:	5cd3      	ldrb	r3, [r2, r3]
 8000a30:	737b      	strb	r3, [r7, #13]
        if(c=='\r'||c=='\n'){
 8000a32:	7b7b      	ldrb	r3, [r7, #13]
 8000a34:	2b0d      	cmp	r3, #13
 8000a36:	d002      	beq.n	8000a3e <HAL_UARTEx_RxEventCallback+0x26>
 8000a38:	7b7b      	ldrb	r3, [r7, #13]
 8000a3a:	2b0a      	cmp	r3, #10
 8000a3c:	d134      	bne.n	8000aa8 <HAL_UARTEx_RxEventCallback+0x90>
            line[pos]=0;
 8000a3e:	4b2e      	ldr	r3, [pc, #184]	@ (8000af8 <HAL_UARTEx_RxEventCallback+0xe0>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	461a      	mov	r2, r3
 8000a44:	4b2d      	ldr	r3, [pc, #180]	@ (8000afc <HAL_UARTEx_RxEventCallback+0xe4>)
 8000a46:	2100      	movs	r1, #0
 8000a48:	5499      	strb	r1, [r3, r2]
            if     (!strcmp(line,"BTN1")) register_press(0);
 8000a4a:	492d      	ldr	r1, [pc, #180]	@ (8000b00 <HAL_UARTEx_RxEventCallback+0xe8>)
 8000a4c:	482b      	ldr	r0, [pc, #172]	@ (8000afc <HAL_UARTEx_RxEventCallback+0xe4>)
 8000a4e:	f7ff fc47 	bl	80002e0 <strcmp>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d103      	bne.n	8000a60 <HAL_UARTEx_RxEventCallback+0x48>
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f7ff ff6f 	bl	800093c <register_press>
 8000a5e:	e01f      	b.n	8000aa0 <HAL_UARTEx_RxEventCallback+0x88>
            else if(!strcmp(line,"BTN2")) register_press(1);
 8000a60:	4928      	ldr	r1, [pc, #160]	@ (8000b04 <HAL_UARTEx_RxEventCallback+0xec>)
 8000a62:	4826      	ldr	r0, [pc, #152]	@ (8000afc <HAL_UARTEx_RxEventCallback+0xe4>)
 8000a64:	f7ff fc3c 	bl	80002e0 <strcmp>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d103      	bne.n	8000a76 <HAL_UARTEx_RxEventCallback+0x5e>
 8000a6e:	2001      	movs	r0, #1
 8000a70:	f7ff ff64 	bl	800093c <register_press>
 8000a74:	e014      	b.n	8000aa0 <HAL_UARTEx_RxEventCallback+0x88>
            else if(!strcmp(line,"BTN3")) register_press(2);
 8000a76:	4924      	ldr	r1, [pc, #144]	@ (8000b08 <HAL_UARTEx_RxEventCallback+0xf0>)
 8000a78:	4820      	ldr	r0, [pc, #128]	@ (8000afc <HAL_UARTEx_RxEventCallback+0xe4>)
 8000a7a:	f7ff fc31 	bl	80002e0 <strcmp>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d103      	bne.n	8000a8c <HAL_UARTEx_RxEventCallback+0x74>
 8000a84:	2002      	movs	r0, #2
 8000a86:	f7ff ff59 	bl	800093c <register_press>
 8000a8a:	e009      	b.n	8000aa0 <HAL_UARTEx_RxEventCallback+0x88>
            else if(!strcmp(line,"BTN4")) register_press(3);
 8000a8c:	491f      	ldr	r1, [pc, #124]	@ (8000b0c <HAL_UARTEx_RxEventCallback+0xf4>)
 8000a8e:	481b      	ldr	r0, [pc, #108]	@ (8000afc <HAL_UARTEx_RxEventCallback+0xe4>)
 8000a90:	f7ff fc26 	bl	80002e0 <strcmp>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d102      	bne.n	8000aa0 <HAL_UARTEx_RxEventCallback+0x88>
 8000a9a:	2003      	movs	r0, #3
 8000a9c:	f7ff ff4e 	bl	800093c <register_press>
            pos=0;
 8000aa0:	4b15      	ldr	r3, [pc, #84]	@ (8000af8 <HAL_UARTEx_RxEventCallback+0xe0>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	701a      	strb	r2, [r3, #0]
 8000aa6:	e013      	b.n	8000ad0 <HAL_UARTEx_RxEventCallback+0xb8>
        }else if(pos<63 && c>=32 && c<127) line[pos++]=c;
 8000aa8:	4b13      	ldr	r3, [pc, #76]	@ (8000af8 <HAL_UARTEx_RxEventCallback+0xe0>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	2b3e      	cmp	r3, #62	@ 0x3e
 8000aae:	d80f      	bhi.n	8000ad0 <HAL_UARTEx_RxEventCallback+0xb8>
 8000ab0:	7b7b      	ldrb	r3, [r7, #13]
 8000ab2:	2b1f      	cmp	r3, #31
 8000ab4:	d90c      	bls.n	8000ad0 <HAL_UARTEx_RxEventCallback+0xb8>
 8000ab6:	7b7b      	ldrb	r3, [r7, #13]
 8000ab8:	2b7e      	cmp	r3, #126	@ 0x7e
 8000aba:	d809      	bhi.n	8000ad0 <HAL_UARTEx_RxEventCallback+0xb8>
 8000abc:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <HAL_UARTEx_RxEventCallback+0xe0>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	1c5a      	adds	r2, r3, #1
 8000ac2:	b2d1      	uxtb	r1, r2
 8000ac4:	4a0c      	ldr	r2, [pc, #48]	@ (8000af8 <HAL_UARTEx_RxEventCallback+0xe0>)
 8000ac6:	7011      	strb	r1, [r2, #0]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4a0c      	ldr	r2, [pc, #48]	@ (8000afc <HAL_UARTEx_RxEventCallback+0xe4>)
 8000acc:	7b7b      	ldrb	r3, [r7, #13]
 8000ace:	5453      	strb	r3, [r2, r1]
    for(uint16_t i=0;i<sz;i++){
 8000ad0:	89fb      	ldrh	r3, [r7, #14]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	81fb      	strh	r3, [r7, #14]
 8000ad6:	89fa      	ldrh	r2, [r7, #14]
 8000ad8:	887b      	ldrh	r3, [r7, #2]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	d3a5      	bcc.n	8000a2a <HAL_UARTEx_RxEventCallback+0x12>
    }
    HAL_UARTEx_ReceiveToIdle_DMA(&huart3,rxBuf,RX_DMA_BUFSIZE);
 8000ade:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ae2:	4904      	ldr	r1, [pc, #16]	@ (8000af4 <HAL_UARTEx_RxEventCallback+0xdc>)
 8000ae4:	480a      	ldr	r0, [pc, #40]	@ (8000b10 <HAL_UARTEx_RxEventCallback+0xf8>)
 8000ae6:	f007 fe01 	bl	80086ec <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000aea:	bf00      	nop
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	2400020c 	.word	0x2400020c
 8000af8:	24000349 	.word	0x24000349
 8000afc:	2400034c 	.word	0x2400034c
 8000b00:	08009794 	.word	0x08009794
 8000b04:	0800979c 	.word	0x0800979c
 8000b08:	080097a4 	.word	0x080097a4
 8000b0c:	080097ac 	.word	0x080097ac
 8000b10:	24000088 	.word	0x24000088

08000b14 <main>:
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_USART3_UART_Init(void);

/* ================================ MAIN =============================== */
int main(void){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af00      	add	r7, sp, #0
    MPU_Config(); HAL_Init(); SystemClock_Config();
 8000b1a:	f000 fc6d 	bl	80013f8 <MPU_Config>
 8000b1e:	f000 ff4d 	bl	80019bc <HAL_Init>
 8000b22:	f000 fa21 	bl	8000f68 <SystemClock_Config>
    MX_GPIO_Init(); MX_DMA_Init(); MX_USART3_UART_Init();
 8000b26:	f000 faff 	bl	8001128 <MX_GPIO_Init>
 8000b2a:	f000 fad5 	bl	80010d8 <MX_DMA_Init>
 8000b2e:	f000 fa87 	bl	8001040 <MX_USART3_UART_Init>
    DWT_Init();
 8000b32:	f7ff fdcb 	bl	80006cc <DWT_Init>

    HAL_UARTEx_ReceiveToIdle_DMA(&huart3,rxBuf,RX_DMA_BUFSIZE);
 8000b36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b3a:	499b      	ldr	r1, [pc, #620]	@ (8000da8 <main+0x294>)
 8000b3c:	489b      	ldr	r0, [pc, #620]	@ (8000dac <main+0x298>)
 8000b3e:	f007 fdd5 	bl	80086ec <HAL_UARTEx_ReceiveToIdle_DMA>

    printf("Ready\r\n");
 8000b42:	489b      	ldr	r0, [pc, #620]	@ (8000db0 <main+0x29c>)
 8000b44:	f007 ff9e 	bl	8008a84 <puts>

    uint32_t lastUs = HAL_GetTick(); lastSec = HAL_GetTick();
 8000b48:	f000 ffbe 	bl	8001ac8 <HAL_GetTick>
 8000b4c:	6178      	str	r0, [r7, #20]
 8000b4e:	f000 ffbb 	bl	8001ac8 <HAL_GetTick>
 8000b52:	4603      	mov	r3, r0
 8000b54:	4a97      	ldr	r2, [pc, #604]	@ (8000db4 <main+0x2a0>)
 8000b56:	6013      	str	r3, [r2, #0]

    while(1){
        uint32_t now = HAL_GetTick();
 8000b58:	f000 ffb6 	bl	8001ac8 <HAL_GetTick>
 8000b5c:	6078      	str	r0, [r7, #4]

        /* -- dekodna logika (6 pritiskov) ----------------------------- */
        if ((state==COUNTDOWN||state==ALARM) && attemptCnt==6){
 8000b5e:	4b96      	ldr	r3, [pc, #600]	@ (8000db8 <main+0x2a4>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d003      	beq.n	8000b6e <main+0x5a>
 8000b66:	4b94      	ldr	r3, [pc, #592]	@ (8000db8 <main+0x2a4>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b02      	cmp	r3, #2
 8000b6c:	d13c      	bne.n	8000be8 <main+0xd4>
 8000b6e:	4b93      	ldr	r3, [pc, #588]	@ (8000dbc <main+0x2a8>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b06      	cmp	r3, #6
 8000b74:	d138      	bne.n	8000be8 <main+0xd4>
            if (pressCnt[0]==6 && !pressCnt[1] && !pressCnt[2] && !pressCnt[3]){
 8000b76:	4b92      	ldr	r3, [pc, #584]	@ (8000dc0 <main+0x2ac>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2b06      	cmp	r3, #6
 8000b7c:	d12f      	bne.n	8000bde <main+0xca>
 8000b7e:	4b90      	ldr	r3, [pc, #576]	@ (8000dc0 <main+0x2ac>)
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d12b      	bne.n	8000bde <main+0xca>
 8000b86:	4b8e      	ldr	r3, [pc, #568]	@ (8000dc0 <main+0x2ac>)
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d127      	bne.n	8000bde <main+0xca>
 8000b8e:	4b8c      	ldr	r3, [pc, #560]	@ (8000dc0 <main+0x2ac>)
 8000b90:	68db      	ldr	r3, [r3, #12]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d123      	bne.n	8000bde <main+0xca>
                state       = DISARMED;
 8000b96:	4b88      	ldr	r3, [pc, #544]	@ (8000db8 <main+0x2a4>)
 8000b98:	2203      	movs	r2, #3
 8000b9a:	701a      	strb	r2, [r3, #0]
                disarmUntil = now + 10000;
 8000b9c:	687a      	ldr	r2, [r7, #4]
 8000b9e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000ba2:	4413      	add	r3, r2
 8000ba4:	4a87      	ldr	r2, [pc, #540]	@ (8000dc4 <main+0x2b0>)
 8000ba6:	6013      	str	r3, [r2, #0]
                set_led(1,false); set_led(2,false); set_led(3,false); set_led(4,true);
 8000ba8:	2100      	movs	r1, #0
 8000baa:	2001      	movs	r0, #1
 8000bac:	f7ff fdd4 	bl	8000758 <set_led>
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	2002      	movs	r0, #2
 8000bb4:	f7ff fdd0 	bl	8000758 <set_led>
 8000bb8:	2100      	movs	r1, #0
 8000bba:	2003      	movs	r0, #3
 8000bbc:	f7ff fdcc 	bl	8000758 <set_led>
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	2004      	movs	r0, #4
 8000bc4:	f7ff fdc8 	bl	8000758 <set_led>
                HAL_GPIO_WritePin(GPIOG,GPIO_PIN_3,GPIO_PIN_RESET);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2108      	movs	r1, #8
 8000bcc:	487e      	ldr	r0, [pc, #504]	@ (8000dc8 <main+0x2b4>)
 8000bce:	f003 fbdf 	bl	8004390 <HAL_GPIO_WritePin>
                printf("ALARM_DEAKTIVIRAN\r\n");
 8000bd2:	487e      	ldr	r0, [pc, #504]	@ (8000dcc <main+0x2b8>)
 8000bd4:	f007 ff56 	bl	8008a84 <puts>
                reset_btn();
 8000bd8:	f7ff ff06 	bl	80009e8 <reset_btn>
 8000bdc:	e004      	b.n	8000be8 <main+0xd4>
            } else {
                reset_btn();
 8000bde:	f7ff ff03 	bl	80009e8 <reset_btn>
                printf("NAPACNA_KODA\r\n");
 8000be2:	487b      	ldr	r0, [pc, #492]	@ (8000dd0 <main+0x2bc>)
 8000be4:	f007 ff4e 	bl	8008a84 <puts>
            }
        }

        /* --------------------- FSM --------------------------------- */
        switch(state){
 8000be8:	4b73      	ldr	r3, [pc, #460]	@ (8000db8 <main+0x2a4>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b03      	cmp	r3, #3
 8000bee:	f200 81ad 	bhi.w	8000f4c <main+0x438>
 8000bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8000bf8 <main+0xe4>)
 8000bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf8:	08000c09 	.word	0x08000c09
 8000bfc:	08000c71 	.word	0x08000c71
 8000c00:	08000ebf 	.word	0x08000ebf
 8000c04:	08000f21 	.word	0x08000f21

        case MONITOR:
            if (now - lastUs >= 500){
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000c12:	f0c0 8194 	bcc.w	8000f3e <main+0x42a>
                lastUs = now;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	617b      	str	r3, [r7, #20]
                uint32_t d = us_read_cm();
 8000c1a:	f7ff fe1b 	bl	8000854 <us_read_cm>
 8000c1e:	6038      	str	r0, [r7, #0]
                printf("US: %lu cm\r\n",(unsigned long)(d==UINT32_MAX?0:d));
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c26:	d001      	beq.n	8000c2c <main+0x118>
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	e000      	b.n	8000c2e <main+0x11a>
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4868      	ldr	r0, [pc, #416]	@ (8000dd4 <main+0x2c0>)
 8000c32:	f007 febf 	bl	80089b4 <iprintf>
                if (d < 100){
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	2b63      	cmp	r3, #99	@ 0x63
 8000c3a:	f200 8180 	bhi.w	8000f3e <main+0x42a>
                    state       = COUNTDOWN;
 8000c3e:	4b5e      	ldr	r3, [pc, #376]	@ (8000db8 <main+0x2a4>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	701a      	strb	r2, [r3, #0]
                    secLeft     = 60;
 8000c44:	4b64      	ldr	r3, [pc, #400]	@ (8000dd8 <main+0x2c4>)
 8000c46:	223c      	movs	r2, #60	@ 0x3c
 8000c48:	601a      	str	r2, [r3, #0]
                    lastSec     = now;
 8000c4a:	4a5a      	ldr	r2, [pc, #360]	@ (8000db4 <main+0x2a0>)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6013      	str	r3, [r2, #0]
                    lastBlink   = now;
 8000c50:	4a62      	ldr	r2, [pc, #392]	@ (8000ddc <main+0x2c8>)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6013      	str	r3, [r2, #0]
                    blink       = false;
 8000c56:	4b62      	ldr	r3, [pc, #392]	@ (8000de0 <main+0x2cc>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	701a      	strb	r2, [r3, #0]
                    printf(">>>Alarm:60s<<<\r\n");
 8000c5c:	4861      	ldr	r0, [pc, #388]	@ (8000de4 <main+0x2d0>)
 8000c5e:	f007 ff11 	bl	8008a84 <puts>
                    printf("ALARM_SPROZEN\r\n");
 8000c62:	4861      	ldr	r0, [pc, #388]	@ (8000de8 <main+0x2d4>)
 8000c64:	f007 ff0e 	bl	8008a84 <puts>
                    beep(200);
 8000c68:	20c8      	movs	r0, #200	@ 0xc8
 8000c6a:	f7ff fdd3 	bl	8000814 <beep>
                }
            }
            break;
 8000c6e:	e166      	b.n	8000f3e <main+0x42a>

        case COUNTDOWN:
            if (now - lastSec >= 1000){
 8000c70:	4b50      	ldr	r3, [pc, #320]	@ (8000db4 <main+0x2a0>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	1ad3      	subs	r3, r2, r3
 8000c78:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000c7c:	d35f      	bcc.n	8000d3e <main+0x22a>
                lastSec += 1000;
 8000c7e:	4b4d      	ldr	r3, [pc, #308]	@ (8000db4 <main+0x2a0>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000c86:	4a4b      	ldr	r2, [pc, #300]	@ (8000db4 <main+0x2a0>)
 8000c88:	6013      	str	r3, [r2, #0]
                --secLeft;
 8000c8a:	4b53      	ldr	r3, [pc, #332]	@ (8000dd8 <main+0x2c4>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	4a51      	ldr	r2, [pc, #324]	@ (8000dd8 <main+0x2c4>)
 8000c92:	6013      	str	r3, [r2, #0]
                printf("T-%02lu s\r\n",(unsigned long)secLeft);
 8000c94:	4b50      	ldr	r3, [pc, #320]	@ (8000dd8 <main+0x2c4>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4854      	ldr	r0, [pc, #336]	@ (8000dec <main+0x2d8>)
 8000c9c:	f007 fe8a 	bl	80089b4 <iprintf>

                if      (secLeft > 55) { }
 8000ca0:	4b4d      	ldr	r3, [pc, #308]	@ (8000dd8 <main+0x2c4>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b37      	cmp	r3, #55	@ 0x37
 8000ca6:	d83a      	bhi.n	8000d1e <main+0x20a>
                else if (secLeft > 40 && (secLeft==45||secLeft==40)) beep(100);
 8000ca8:	4b4b      	ldr	r3, [pc, #300]	@ (8000dd8 <main+0x2c4>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2b28      	cmp	r3, #40	@ 0x28
 8000cae:	d90b      	bls.n	8000cc8 <main+0x1b4>
 8000cb0:	4b49      	ldr	r3, [pc, #292]	@ (8000dd8 <main+0x2c4>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b2d      	cmp	r3, #45	@ 0x2d
 8000cb6:	d003      	beq.n	8000cc0 <main+0x1ac>
 8000cb8:	4b47      	ldr	r3, [pc, #284]	@ (8000dd8 <main+0x2c4>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2b28      	cmp	r3, #40	@ 0x28
 8000cbe:	d103      	bne.n	8000cc8 <main+0x1b4>
 8000cc0:	2064      	movs	r0, #100	@ 0x64
 8000cc2:	f7ff fda7 	bl	8000814 <beep>
 8000cc6:	e02a      	b.n	8000d1e <main+0x20a>
                else if (secLeft > 20 && (secLeft % 5 == 0))         beep(100);
 8000cc8:	4b43      	ldr	r3, [pc, #268]	@ (8000dd8 <main+0x2c4>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b14      	cmp	r3, #20
 8000cce:	d90f      	bls.n	8000cf0 <main+0x1dc>
 8000cd0:	4b41      	ldr	r3, [pc, #260]	@ (8000dd8 <main+0x2c4>)
 8000cd2:	6819      	ldr	r1, [r3, #0]
 8000cd4:	4b46      	ldr	r3, [pc, #280]	@ (8000df0 <main+0x2dc>)
 8000cd6:	fba3 2301 	umull	r2, r3, r3, r1
 8000cda:	089a      	lsrs	r2, r3, #2
 8000cdc:	4613      	mov	r3, r2
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	4413      	add	r3, r2
 8000ce2:	1aca      	subs	r2, r1, r3
 8000ce4:	2a00      	cmp	r2, #0
 8000ce6:	d103      	bne.n	8000cf0 <main+0x1dc>
 8000ce8:	2064      	movs	r0, #100	@ 0x64
 8000cea:	f7ff fd93 	bl	8000814 <beep>
 8000cee:	e016      	b.n	8000d1e <main+0x20a>
                else if (secLeft > 10 && (secLeft==20||secLeft==15)) beep(100);
 8000cf0:	4b39      	ldr	r3, [pc, #228]	@ (8000dd8 <main+0x2c4>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b0a      	cmp	r3, #10
 8000cf6:	d90b      	bls.n	8000d10 <main+0x1fc>
 8000cf8:	4b37      	ldr	r3, [pc, #220]	@ (8000dd8 <main+0x2c4>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b14      	cmp	r3, #20
 8000cfe:	d003      	beq.n	8000d08 <main+0x1f4>
 8000d00:	4b35      	ldr	r3, [pc, #212]	@ (8000dd8 <main+0x2c4>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2b0f      	cmp	r3, #15
 8000d06:	d103      	bne.n	8000d10 <main+0x1fc>
 8000d08:	2064      	movs	r0, #100	@ 0x64
 8000d0a:	f7ff fd83 	bl	8000814 <beep>
 8000d0e:	e006      	b.n	8000d1e <main+0x20a>
                else if (secLeft <= 10)                              beep(100);
 8000d10:	4b31      	ldr	r3, [pc, #196]	@ (8000dd8 <main+0x2c4>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b0a      	cmp	r3, #10
 8000d16:	d802      	bhi.n	8000d1e <main+0x20a>
 8000d18:	2064      	movs	r0, #100	@ 0x64
 8000d1a:	f7ff fd7b 	bl	8000814 <beep>

                if (secLeft == 0){
 8000d1e:	4b2e      	ldr	r3, [pc, #184]	@ (8000dd8 <main+0x2c4>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d10b      	bne.n	8000d3e <main+0x22a>
                    state       = ALARM;
 8000d26:	4b24      	ldr	r3, [pc, #144]	@ (8000db8 <main+0x2a4>)
 8000d28:	2202      	movs	r2, #2
 8000d2a:	701a      	strb	r2, [r3, #0]
                    lastBlink   = now;
 8000d2c:	4a2b      	ldr	r2, [pc, #172]	@ (8000ddc <main+0x2c8>)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6013      	str	r3, [r2, #0]
                    printf("Alarmna agencija obveščena\r\n");
 8000d32:	4830      	ldr	r0, [pc, #192]	@ (8000df4 <main+0x2e0>)
 8000d34:	f007 fea6 	bl	8008a84 <puts>
                    printf("ALARM_NOTIFIED\r\n");
 8000d38:	482f      	ldr	r0, [pc, #188]	@ (8000df8 <main+0x2e4>)
 8000d3a:	f007 fea3 	bl	8008a84 <puts>
                }
            }

            if (secLeft > 55){
 8000d3e:	4b26      	ldr	r3, [pc, #152]	@ (8000dd8 <main+0x2c4>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2b37      	cmp	r3, #55	@ 0x37
 8000d44:	d95a      	bls.n	8000dfc <main+0x2e8>
                if (now - lastBlink >= 250){
 8000d46:	4b25      	ldr	r3, [pc, #148]	@ (8000ddc <main+0x2c8>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	687a      	ldr	r2, [r7, #4]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	2bf9      	cmp	r3, #249	@ 0xf9
 8000d50:	f240 80f7 	bls.w	8000f42 <main+0x42e>
                    lastBlink += 250;
 8000d54:	4b21      	ldr	r3, [pc, #132]	@ (8000ddc <main+0x2c8>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	33fa      	adds	r3, #250	@ 0xfa
 8000d5a:	4a20      	ldr	r2, [pc, #128]	@ (8000ddc <main+0x2c8>)
 8000d5c:	6013      	str	r3, [r2, #0]
                    blink = !blink;
 8000d5e:	4b20      	ldr	r3, [pc, #128]	@ (8000de0 <main+0x2cc>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	bf14      	ite	ne
 8000d66:	2301      	movne	r3, #1
 8000d68:	2300      	moveq	r3, #0
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	f083 0301 	eor.w	r3, r3, #1
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	4b19      	ldr	r3, [pc, #100]	@ (8000de0 <main+0x2cc>)
 8000d7a:	701a      	strb	r2, [r3, #0]
                    for (int i=1;i<=3;++i) set_led(i,blink);
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	e00a      	b.n	8000d98 <main+0x284>
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	4a16      	ldr	r2, [pc, #88]	@ (8000de0 <main+0x2cc>)
 8000d88:	7812      	ldrb	r2, [r2, #0]
 8000d8a:	4611      	mov	r1, r2
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff fce3 	bl	8000758 <set_led>
 8000d92:	693b      	ldr	r3, [r7, #16]
 8000d94:	3301      	adds	r3, #1
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	2b03      	cmp	r3, #3
 8000d9c:	ddf1      	ble.n	8000d82 <main+0x26e>
                    beep(50);
 8000d9e:	2032      	movs	r0, #50	@ 0x32
 8000da0:	f7ff fd38 	bl	8000814 <beep>
            else if (now - lastBlink >= 500){
                lastBlink += 500;
                blink = !blink;
                for (int i=1;i<=3;++i) set_led(i,blink);
            }
            break;
 8000da4:	e0cd      	b.n	8000f42 <main+0x42e>
 8000da6:	bf00      	nop
 8000da8:	2400020c 	.word	0x2400020c
 8000dac:	24000088 	.word	0x24000088
 8000db0:	080097b4 	.word	0x080097b4
 8000db4:	2400033c 	.word	0x2400033c
 8000db8:	24000334 	.word	0x24000334
 8000dbc:	2400032c 	.word	0x2400032c
 8000dc0:	2400030c 	.word	0x2400030c
 8000dc4:	24000344 	.word	0x24000344
 8000dc8:	58021800 	.word	0x58021800
 8000dcc:	080097bc 	.word	0x080097bc
 8000dd0:	080097d0 	.word	0x080097d0
 8000dd4:	080097e0 	.word	0x080097e0
 8000dd8:	24000338 	.word	0x24000338
 8000ddc:	24000340 	.word	0x24000340
 8000de0:	24000348 	.word	0x24000348
 8000de4:	080097f0 	.word	0x080097f0
 8000de8:	08009804 	.word	0x08009804
 8000dec:	08009814 	.word	0x08009814
 8000df0:	cccccccd 	.word	0xcccccccd
 8000df4:	08009820 	.word	0x08009820
 8000df8:	08009840 	.word	0x08009840
            else if (secLeft > 40){
 8000dfc:	4b55      	ldr	r3, [pc, #340]	@ (8000f54 <main+0x440>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2b28      	cmp	r3, #40	@ 0x28
 8000e02:	d90c      	bls.n	8000e1e <main+0x30a>
                set_led(1,true); set_led(2,false); set_led(3,false);
 8000e04:	2101      	movs	r1, #1
 8000e06:	2001      	movs	r0, #1
 8000e08:	f7ff fca6 	bl	8000758 <set_led>
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	2002      	movs	r0, #2
 8000e10:	f7ff fca2 	bl	8000758 <set_led>
 8000e14:	2100      	movs	r1, #0
 8000e16:	2003      	movs	r0, #3
 8000e18:	f7ff fc9e 	bl	8000758 <set_led>
            break;
 8000e1c:	e091      	b.n	8000f42 <main+0x42e>
            else if (secLeft > 20){
 8000e1e:	4b4d      	ldr	r3, [pc, #308]	@ (8000f54 <main+0x440>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2b14      	cmp	r3, #20
 8000e24:	d90c      	bls.n	8000e40 <main+0x32c>
                set_led(1,true); set_led(2,true ); set_led(3,false);
 8000e26:	2101      	movs	r1, #1
 8000e28:	2001      	movs	r0, #1
 8000e2a:	f7ff fc95 	bl	8000758 <set_led>
 8000e2e:	2101      	movs	r1, #1
 8000e30:	2002      	movs	r0, #2
 8000e32:	f7ff fc91 	bl	8000758 <set_led>
 8000e36:	2100      	movs	r1, #0
 8000e38:	2003      	movs	r0, #3
 8000e3a:	f7ff fc8d 	bl	8000758 <set_led>
            break;
 8000e3e:	e080      	b.n	8000f42 <main+0x42e>
            else if (secLeft > 10){
 8000e40:	4b44      	ldr	r3, [pc, #272]	@ (8000f54 <main+0x440>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b0a      	cmp	r3, #10
 8000e46:	d90c      	bls.n	8000e62 <main+0x34e>
                set_led(1,true); set_led(2,true ); set_led(3,true );
 8000e48:	2101      	movs	r1, #1
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	f7ff fc84 	bl	8000758 <set_led>
 8000e50:	2101      	movs	r1, #1
 8000e52:	2002      	movs	r0, #2
 8000e54:	f7ff fc80 	bl	8000758 <set_led>
 8000e58:	2101      	movs	r1, #1
 8000e5a:	2003      	movs	r0, #3
 8000e5c:	f7ff fc7c 	bl	8000758 <set_led>
            break;
 8000e60:	e06f      	b.n	8000f42 <main+0x42e>
            else if (now - lastBlink >= 500){
 8000e62:	4b3d      	ldr	r3, [pc, #244]	@ (8000f58 <main+0x444>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000e6e:	d368      	bcc.n	8000f42 <main+0x42e>
                lastBlink += 500;
 8000e70:	4b39      	ldr	r3, [pc, #228]	@ (8000f58 <main+0x444>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000e78:	4a37      	ldr	r2, [pc, #220]	@ (8000f58 <main+0x444>)
 8000e7a:	6013      	str	r3, [r2, #0]
                blink = !blink;
 8000e7c:	4b37      	ldr	r3, [pc, #220]	@ (8000f5c <main+0x448>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	bf14      	ite	ne
 8000e84:	2301      	movne	r3, #1
 8000e86:	2300      	moveq	r3, #0
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	f083 0301 	eor.w	r3, r3, #1
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	f003 0301 	and.w	r3, r3, #1
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4b31      	ldr	r3, [pc, #196]	@ (8000f5c <main+0x448>)
 8000e98:	701a      	strb	r2, [r3, #0]
                for (int i=1;i<=3;++i) set_led(i,blink);
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	e00a      	b.n	8000eb6 <main+0x3a2>
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	4a2d      	ldr	r2, [pc, #180]	@ (8000f5c <main+0x448>)
 8000ea6:	7812      	ldrb	r2, [r2, #0]
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff fc54 	bl	8000758 <set_led>
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	2b03      	cmp	r3, #3
 8000eba:	ddf1      	ble.n	8000ea0 <main+0x38c>
            break;
 8000ebc:	e041      	b.n	8000f42 <main+0x42e>

        case ALARM:
            if (now - lastBlink >= 500){
 8000ebe:	4b26      	ldr	r3, [pc, #152]	@ (8000f58 <main+0x444>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000eca:	d33c      	bcc.n	8000f46 <main+0x432>
                lastBlink += 500;
 8000ecc:	4b22      	ldr	r3, [pc, #136]	@ (8000f58 <main+0x444>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000ed4:	4a20      	ldr	r2, [pc, #128]	@ (8000f58 <main+0x444>)
 8000ed6:	6013      	str	r3, [r2, #0]
                blink = !blink;
 8000ed8:	4b20      	ldr	r3, [pc, #128]	@ (8000f5c <main+0x448>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	bf14      	ite	ne
 8000ee0:	2301      	movne	r3, #1
 8000ee2:	2300      	moveq	r3, #0
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	f083 0301 	eor.w	r3, r3, #1
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f5c <main+0x448>)
 8000ef4:	701a      	strb	r2, [r3, #0]
                for (int i=1;i<=3;++i) set_led(i,blink);
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	e00a      	b.n	8000f12 <main+0x3fe>
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	4a16      	ldr	r2, [pc, #88]	@ (8000f5c <main+0x448>)
 8000f02:	7812      	ldrb	r2, [r2, #0]
 8000f04:	4611      	mov	r1, r2
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff fc26 	bl	8000758 <set_led>
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	ddf1      	ble.n	8000efc <main+0x3e8>
                beep(100);
 8000f18:	2064      	movs	r0, #100	@ 0x64
 8000f1a:	f7ff fc7b 	bl	8000814 <beep>
            }
            break;
 8000f1e:	e012      	b.n	8000f46 <main+0x432>

        case DISARMED:
            if (now >= disarmUntil){
 8000f20:	4b0f      	ldr	r3, [pc, #60]	@ (8000f60 <main+0x44c>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	d30f      	bcc.n	8000f4a <main+0x436>
                set_led(4,false);
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	2004      	movs	r0, #4
 8000f2e:	f7ff fc13 	bl	8000758 <set_led>
                state  = MONITOR;
 8000f32:	4b0c      	ldr	r3, [pc, #48]	@ (8000f64 <main+0x450>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	701a      	strb	r2, [r3, #0]
                lastUs = now;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	617b      	str	r3, [r7, #20]
            }
            break;
 8000f3c:	e005      	b.n	8000f4a <main+0x436>
            break;
 8000f3e:	bf00      	nop
 8000f40:	e004      	b.n	8000f4c <main+0x438>
            break;
 8000f42:	bf00      	nop
 8000f44:	e002      	b.n	8000f4c <main+0x438>
            break;
 8000f46:	bf00      	nop
 8000f48:	e000      	b.n	8000f4c <main+0x438>
            break;
 8000f4a:	bf00      	nop
        }

        HAL_Delay(1);
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	f000 fdc7 	bl	8001ae0 <HAL_Delay>
    while(1){
 8000f52:	e601      	b.n	8000b58 <main+0x44>
 8000f54:	24000338 	.word	0x24000338
 8000f58:	24000340 	.word	0x24000340
 8000f5c:	24000348 	.word	0x24000348
 8000f60:	24000344 	.word	0x24000344
 8000f64:	24000334 	.word	0x24000334

08000f68 <SystemClock_Config>:
/* ------------- CubeMX generirane funkcije (brez sprememb) ------------ */
/* ...  (SystemClock_Config, MX_GPIO_Init, MX_DMA_Init, ...)             */
/* --------------------------------------------------------------------- */

void SystemClock_Config(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b09c      	sub	sp, #112	@ 0x70
 8000f6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f72:	224c      	movs	r2, #76	@ 0x4c
 8000f74:	2100      	movs	r1, #0
 8000f76:	4618      	mov	r0, r3
 8000f78:	f007 fe64 	bl	8008c44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	2220      	movs	r2, #32
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f007 fe5e 	bl	8008c44 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f88:	2002      	movs	r0, #2
 8000f8a:	f003 fa4f 	bl	800442c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f8e:	2300      	movs	r3, #0
 8000f90:	603b      	str	r3, [r7, #0]
 8000f92:	4b29      	ldr	r3, [pc, #164]	@ (8001038 <SystemClock_Config+0xd0>)
 8000f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f96:	4a28      	ldr	r2, [pc, #160]	@ (8001038 <SystemClock_Config+0xd0>)
 8000f98:	f023 0301 	bic.w	r3, r3, #1
 8000f9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000f9e:	4b26      	ldr	r3, [pc, #152]	@ (8001038 <SystemClock_Config+0xd0>)
 8000fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	4b24      	ldr	r3, [pc, #144]	@ (800103c <SystemClock_Config+0xd4>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000fb0:	4a22      	ldr	r2, [pc, #136]	@ (800103c <SystemClock_Config+0xd4>)
 8000fb2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fb6:	6193      	str	r3, [r2, #24]
 8000fb8:	4b20      	ldr	r3, [pc, #128]	@ (800103c <SystemClock_Config+0xd4>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fc0:	603b      	str	r3, [r7, #0]
 8000fc2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fc4:	bf00      	nop
 8000fc6:	4b1d      	ldr	r3, [pc, #116]	@ (800103c <SystemClock_Config+0xd4>)
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000fd2:	d1f8      	bne.n	8000fc6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fdc:	2340      	movs	r3, #64	@ 0x40
 8000fde:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f003 fa59 	bl	80044a0 <HAL_RCC_OscConfig>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000ff4:	f000 fa2c 	bl	8001450 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff8:	233f      	movs	r3, #63	@ 0x3f
 8000ffa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001004:	2300      	movs	r3, #0
 8001006:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800100c:	2340      	movs	r3, #64	@ 0x40
 800100e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001010:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001014:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001016:	2300      	movs	r3, #0
 8001018:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	2101      	movs	r1, #1
 800101e:	4618      	mov	r0, r3
 8001020:	f003 fe98 	bl	8004d54 <HAL_RCC_ClockConfig>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800102a:	f000 fa11 	bl	8001450 <Error_Handler>
  }
}
 800102e:	bf00      	nop
 8001030:	3770      	adds	r7, #112	@ 0x70
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	58000400 	.word	0x58000400
 800103c:	58024800 	.word	0x58024800

08001040 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001044:	4b22      	ldr	r3, [pc, #136]	@ (80010d0 <MX_USART3_UART_Init+0x90>)
 8001046:	4a23      	ldr	r2, [pc, #140]	@ (80010d4 <MX_USART3_UART_Init+0x94>)
 8001048:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800104a:	4b21      	ldr	r3, [pc, #132]	@ (80010d0 <MX_USART3_UART_Init+0x90>)
 800104c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001050:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001052:	4b1f      	ldr	r3, [pc, #124]	@ (80010d0 <MX_USART3_UART_Init+0x90>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001058:	4b1d      	ldr	r3, [pc, #116]	@ (80010d0 <MX_USART3_UART_Init+0x90>)
 800105a:	2200      	movs	r2, #0
 800105c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800105e:	4b1c      	ldr	r3, [pc, #112]	@ (80010d0 <MX_USART3_UART_Init+0x90>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001064:	4b1a      	ldr	r3, [pc, #104]	@ (80010d0 <MX_USART3_UART_Init+0x90>)
 8001066:	220c      	movs	r2, #12
 8001068:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106a:	4b19      	ldr	r3, [pc, #100]	@ (80010d0 <MX_USART3_UART_Init+0x90>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001070:	4b17      	ldr	r3, [pc, #92]	@ (80010d0 <MX_USART3_UART_Init+0x90>)
 8001072:	2200      	movs	r2, #0
 8001074:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001076:	4b16      	ldr	r3, [pc, #88]	@ (80010d0 <MX_USART3_UART_Init+0x90>)
 8001078:	2200      	movs	r2, #0
 800107a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800107c:	4b14      	ldr	r3, [pc, #80]	@ (80010d0 <MX_USART3_UART_Init+0x90>)
 800107e:	2200      	movs	r2, #0
 8001080:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001082:	4b13      	ldr	r3, [pc, #76]	@ (80010d0 <MX_USART3_UART_Init+0x90>)
 8001084:	2200      	movs	r2, #0
 8001086:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001088:	4811      	ldr	r0, [pc, #68]	@ (80010d0 <MX_USART3_UART_Init+0x90>)
 800108a:	f006 f81b 	bl	80070c4 <HAL_UART_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001094:	f000 f9dc 	bl	8001450 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001098:	2100      	movs	r1, #0
 800109a:	480d      	ldr	r0, [pc, #52]	@ (80010d0 <MX_USART3_UART_Init+0x90>)
 800109c:	f007 faaa 	bl	80085f4 <HAL_UARTEx_SetTxFifoThreshold>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80010a6:	f000 f9d3 	bl	8001450 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010aa:	2100      	movs	r1, #0
 80010ac:	4808      	ldr	r0, [pc, #32]	@ (80010d0 <MX_USART3_UART_Init+0x90>)
 80010ae:	f007 fadf 	bl	8008670 <HAL_UARTEx_SetRxFifoThreshold>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80010b8:	f000 f9ca 	bl	8001450 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80010bc:	4804      	ldr	r0, [pc, #16]	@ (80010d0 <MX_USART3_UART_Init+0x90>)
 80010be:	f007 fa60 	bl	8008582 <HAL_UARTEx_DisableFifoMode>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80010c8:	f000 f9c2 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	24000088 	.word	0x24000088
 80010d4:	40004800 	.word	0x40004800

080010d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010de:	4b11      	ldr	r3, [pc, #68]	@ (8001124 <MX_DMA_Init+0x4c>)
 80010e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010e4:	4a0f      	ldr	r2, [pc, #60]	@ (8001124 <MX_DMA_Init+0x4c>)
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80010ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001124 <MX_DMA_Init+0x4c>)
 80010f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2100      	movs	r1, #0
 8001100:	200b      	movs	r0, #11
 8001102:	f000 fdf8 	bl	8001cf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001106:	200b      	movs	r0, #11
 8001108:	f000 fe0f 	bl	8001d2a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800110c:	2200      	movs	r2, #0
 800110e:	2100      	movs	r1, #0
 8001110:	200c      	movs	r0, #12
 8001112:	f000 fdf0 	bl	8001cf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001116:	200c      	movs	r0, #12
 8001118:	f000 fe07 	bl	8001d2a <HAL_NVIC_EnableIRQ>

}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	58024400 	.word	0x58024400

08001128 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08e      	sub	sp, #56	@ 0x38
 800112c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
 800113c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800113e:	4ba4      	ldr	r3, [pc, #656]	@ (80013d0 <MX_GPIO_Init+0x2a8>)
 8001140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001144:	4aa2      	ldr	r2, [pc, #648]	@ (80013d0 <MX_GPIO_Init+0x2a8>)
 8001146:	f043 0302 	orr.w	r3, r3, #2
 800114a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800114e:	4ba0      	ldr	r3, [pc, #640]	@ (80013d0 <MX_GPIO_Init+0x2a8>)
 8001150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001154:	f003 0302 	and.w	r3, r3, #2
 8001158:	623b      	str	r3, [r7, #32]
 800115a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800115c:	4b9c      	ldr	r3, [pc, #624]	@ (80013d0 <MX_GPIO_Init+0x2a8>)
 800115e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001162:	4a9b      	ldr	r2, [pc, #620]	@ (80013d0 <MX_GPIO_Init+0x2a8>)
 8001164:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001168:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800116c:	4b98      	ldr	r3, [pc, #608]	@ (80013d0 <MX_GPIO_Init+0x2a8>)
 800116e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001172:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001176:	61fb      	str	r3, [r7, #28]
 8001178:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800117a:	4b95      	ldr	r3, [pc, #596]	@ (80013d0 <MX_GPIO_Init+0x2a8>)
 800117c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001180:	4a93      	ldr	r2, [pc, #588]	@ (80013d0 <MX_GPIO_Init+0x2a8>)
 8001182:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001186:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800118a:	4b91      	ldr	r3, [pc, #580]	@ (80013d0 <MX_GPIO_Init+0x2a8>)
 800118c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001190:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001194:	61bb      	str	r3, [r7, #24]
 8001196:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001198:	4b8d      	ldr	r3, [pc, #564]	@ (80013d0 <MX_GPIO_Init+0x2a8>)
 800119a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800119e:	4a8c      	ldr	r2, [pc, #560]	@ (80013d0 <MX_GPIO_Init+0x2a8>)
 80011a0:	f043 0310 	orr.w	r3, r3, #16
 80011a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011a8:	4b89      	ldr	r3, [pc, #548]	@ (80013d0 <MX_GPIO_Init+0x2a8>)
 80011aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ae:	f003 0310 	and.w	r3, r3, #16
 80011b2:	617b      	str	r3, [r7, #20]
 80011b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	4b86      	ldr	r3, [pc, #536]	@ (80013d0 <MX_GPIO_Init+0x2a8>)
 80011b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011bc:	4a84      	ldr	r2, [pc, #528]	@ (80013d0 <MX_GPIO_Init+0x2a8>)
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011c6:	4b82      	ldr	r3, [pc, #520]	@ (80013d0 <MX_GPIO_Init+0x2a8>)
 80011c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	613b      	str	r3, [r7, #16]
 80011d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011d4:	4b7e      	ldr	r3, [pc, #504]	@ (80013d0 <MX_GPIO_Init+0x2a8>)
 80011d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011da:	4a7d      	ldr	r2, [pc, #500]	@ (80013d0 <MX_GPIO_Init+0x2a8>)
 80011dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011e4:	4b7a      	ldr	r3, [pc, #488]	@ (80013d0 <MX_GPIO_Init+0x2a8>)
 80011e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80011f2:	4b77      	ldr	r3, [pc, #476]	@ (80013d0 <MX_GPIO_Init+0x2a8>)
 80011f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011f8:	4a75      	ldr	r2, [pc, #468]	@ (80013d0 <MX_GPIO_Init+0x2a8>)
 80011fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001202:	4b73      	ldr	r3, [pc, #460]	@ (80013d0 <MX_GPIO_Init+0x2a8>)
 8001204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001208:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001210:	4b6f      	ldr	r3, [pc, #444]	@ (80013d0 <MX_GPIO_Init+0x2a8>)
 8001212:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001216:	4a6e      	ldr	r2, [pc, #440]	@ (80013d0 <MX_GPIO_Init+0x2a8>)
 8001218:	f043 0320 	orr.w	r3, r3, #32
 800121c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001220:	4b6b      	ldr	r3, [pc, #428]	@ (80013d0 <MX_GPIO_Init+0x2a8>)
 8001222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001226:	f003 0320 	and.w	r3, r3, #32
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800122e:	4b68      	ldr	r3, [pc, #416]	@ (80013d0 <MX_GPIO_Init+0x2a8>)
 8001230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001234:	4a66      	ldr	r2, [pc, #408]	@ (80013d0 <MX_GPIO_Init+0x2a8>)
 8001236:	f043 0304 	orr.w	r3, r3, #4
 800123a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800123e:	4b64      	ldr	r3, [pc, #400]	@ (80013d0 <MX_GPIO_Init+0x2a8>)
 8001240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001244:	f003 0304 	and.w	r3, r3, #4
 8001248:	603b      	str	r3, [r7, #0]
 800124a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_RESET);
 800124c:	2200      	movs	r2, #0
 800124e:	f248 0110 	movw	r1, #32784	@ 0x8010
 8001252:	4860      	ldr	r0, [pc, #384]	@ (80013d4 <MX_GPIO_Init+0x2ac>)
 8001254:	f003 f89c 	bl	8004390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_15, GPIO_PIN_RESET);
 8001258:	2200      	movs	r2, #0
 800125a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800125e:	485e      	ldr	r0, [pc, #376]	@ (80013d8 <MX_GPIO_Init+0x2b0>)
 8001260:	f003 f896 	bl	8004390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001264:	2200      	movs	r2, #0
 8001266:	2108      	movs	r1, #8
 8001268:	485c      	ldr	r0, [pc, #368]	@ (80013dc <MX_GPIO_Init+0x2b4>)
 800126a:	f003 f891 	bl	8004390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_RESET);
 800126e:	2200      	movs	r2, #0
 8001270:	2108      	movs	r1, #8
 8001272:	485b      	ldr	r0, [pc, #364]	@ (80013e0 <MX_GPIO_Init+0x2b8>)
 8001274:	f003 f88c 	bl	8004390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIGF_GPIO_Port, TRIGF_Pin, GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	2101      	movs	r1, #1
 800127c:	4859      	ldr	r0, [pc, #356]	@ (80013e4 <MX_GPIO_Init+0x2bc>)
 800127e:	f003 f887 	bl	8004390 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB4 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_15;
 8001282:	f248 0310 	movw	r3, #32784	@ 0x8010
 8001286:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001288:	2301      	movs	r3, #1
 800128a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001290:	2300      	movs	r3, #0
 8001292:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001294:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001298:	4619      	mov	r1, r3
 800129a:	484e      	ldr	r0, [pc, #312]	@ (80013d4 <MX_GPIO_Init+0x2ac>)
 800129c:	f002 feb0 	bl	8004000 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN1_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 80012a0:	2304      	movs	r3, #4
 80012a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012a4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80012a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012aa:	2301      	movs	r3, #1
 80012ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 80012ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012b2:	4619      	mov	r1, r3
 80012b4:	484c      	ldr	r0, [pc, #304]	@ (80013e8 <MX_GPIO_Init+0x2c0>)
 80012b6:	f002 fea3 	bl	8004000 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80012ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c0:	2301      	movs	r3, #1
 80012c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c8:	2300      	movs	r3, #0
 80012ca:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012d0:	4619      	mov	r1, r3
 80012d2:	4841      	ldr	r0, [pc, #260]	@ (80013d8 <MX_GPIO_Init+0x2b0>)
 80012d4:	f002 fe94 	bl	8004000 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012d8:	2308      	movs	r3, #8
 80012da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012dc:	2301      	movs	r3, #1
 80012de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	2300      	movs	r3, #0
 80012e6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ec:	4619      	mov	r1, r3
 80012ee:	483b      	ldr	r0, [pc, #236]	@ (80013dc <MX_GPIO_Init+0x2b4>)
 80012f0:	f002 fe86 	bl	8004000 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN2_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin;
 80012f4:	2340      	movs	r3, #64	@ 0x40
 80012f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012f8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80012fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012fe:	2301      	movs	r3, #1
 8001300:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BTN2_GPIO_Port, &GPIO_InitStruct);
 8001302:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001306:	4619      	mov	r1, r3
 8001308:	4834      	ldr	r0, [pc, #208]	@ (80013dc <MX_GPIO_Init+0x2b4>)
 800130a:	f002 fe79 	bl	8004000 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN3_Pin */
  GPIO_InitStruct.Pin = BTN3_Pin;
 800130e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001312:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001314:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001318:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800131a:	2301      	movs	r3, #1
 800131c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BTN3_GPIO_Port, &GPIO_InitStruct);
 800131e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001322:	4619      	mov	r1, r3
 8001324:	4831      	ldr	r0, [pc, #196]	@ (80013ec <MX_GPIO_Init+0x2c4>)
 8001326:	f002 fe6b 	bl	8004000 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800132a:	2308      	movs	r3, #8
 800132c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132e:	2301      	movs	r3, #1
 8001330:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2300      	movs	r3, #0
 8001338:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800133a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800133e:	4619      	mov	r1, r3
 8001340:	4827      	ldr	r0, [pc, #156]	@ (80013e0 <MX_GPIO_Init+0x2b8>)
 8001342:	f002 fe5d 	bl	8004000 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN4_Pin */
  GPIO_InitStruct.Pin = BTN4_Pin;
 8001346:	2302      	movs	r3, #2
 8001348:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800134a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800134e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001350:	2301      	movs	r3, #1
 8001352:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BTN4_GPIO_Port, &GPIO_InitStruct);
 8001354:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001358:	4619      	mov	r1, r3
 800135a:	4825      	ldr	r0, [pc, #148]	@ (80013f0 <MX_GPIO_Init+0x2c8>)
 800135c:	f002 fe50 	bl	8004000 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 8001360:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001364:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001366:	2300      	movs	r3, #0
 8001368:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 800136e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001372:	4619      	mov	r1, r3
 8001374:	481f      	ldr	r0, [pc, #124]	@ (80013f4 <MX_GPIO_Init+0x2cc>)
 8001376:	f002 fe43 	bl	8004000 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIGF_Pin */
  GPIO_InitStruct.Pin = TRIGF_Pin;
 800137a:	2301      	movs	r3, #1
 800137c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137e:	2301      	movs	r3, #1
 8001380:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001386:	2300      	movs	r3, #0
 8001388:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TRIGF_GPIO_Port, &GPIO_InitStruct);
 800138a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800138e:	4619      	mov	r1, r3
 8001390:	4814      	ldr	r0, [pc, #80]	@ (80013e4 <MX_GPIO_Init+0x2bc>)
 8001392:	f002 fe35 	bl	8004000 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(BTN4_EXTI_IRQn, 0, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	2100      	movs	r1, #0
 800139a:	2007      	movs	r0, #7
 800139c:	f000 fcab 	bl	8001cf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BTN4_EXTI_IRQn);
 80013a0:	2007      	movs	r0, #7
 80013a2:	f000 fcc2 	bl	8001d2a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(BTN1_EXTI_IRQn, 0, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2100      	movs	r1, #0
 80013aa:	2008      	movs	r0, #8
 80013ac:	f000 fca3 	bl	8001cf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BTN1_EXTI_IRQn);
 80013b0:	2008      	movs	r0, #8
 80013b2:	f000 fcba 	bl	8001d2a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(BTN2_EXTI_IRQn, 0, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2100      	movs	r1, #0
 80013ba:	2017      	movs	r0, #23
 80013bc:	f000 fc9b 	bl	8001cf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BTN2_EXTI_IRQn);
 80013c0:	2017      	movs	r0, #23
 80013c2:	f000 fcb2 	bl	8001d2a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80013c6:	bf00      	nop
 80013c8:	3738      	adds	r7, #56	@ 0x38
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	58024400 	.word	0x58024400
 80013d4:	58020400 	.word	0x58020400
 80013d8:	58021c00 	.word	0x58021c00
 80013dc:	58021000 	.word	0x58021000
 80013e0:	58021800 	.word	0x58021800
 80013e4:	58020800 	.word	0x58020800
 80013e8:	58022000 	.word	0x58022000
 80013ec:	58020000 	.word	0x58020000
 80013f0:	58022800 	.word	0x58022800
 80013f4:	58021400 	.word	0x58021400

080013f8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80013fe:	463b      	mov	r3, r7
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800140a:	f000 fca9 	bl	8001d60 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800140e:	2301      	movs	r3, #1
 8001410:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001412:	2300      	movs	r3, #0
 8001414:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800141a:	231f      	movs	r3, #31
 800141c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800141e:	2387      	movs	r3, #135	@ 0x87
 8001420:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001422:	2300      	movs	r3, #0
 8001424:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001426:	2300      	movs	r3, #0
 8001428:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800142a:	2301      	movs	r3, #1
 800142c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800142e:	2301      	movs	r3, #1
 8001430:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001432:	2300      	movs	r3, #0
 8001434:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001436:	2300      	movs	r3, #0
 8001438:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800143a:	463b      	mov	r3, r7
 800143c:	4618      	mov	r0, r3
 800143e:	f000 fcc7 	bl	8001dd0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001442:	2004      	movs	r0, #4
 8001444:	f000 fca4 	bl	8001d90 <HAL_MPU_Enable>

}
 8001448:	bf00      	nop
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001454:	b672      	cpsid	i
}
 8001456:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <Error_Handler+0x8>

0800145c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001462:	4b0a      	ldr	r3, [pc, #40]	@ (800148c <HAL_MspInit+0x30>)
 8001464:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001468:	4a08      	ldr	r2, [pc, #32]	@ (800148c <HAL_MspInit+0x30>)
 800146a:	f043 0302 	orr.w	r3, r3, #2
 800146e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001472:	4b06      	ldr	r3, [pc, #24]	@ (800148c <HAL_MspInit+0x30>)
 8001474:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	58024400 	.word	0x58024400

08001490 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b0ba      	sub	sp, #232	@ 0xe8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014a8:	f107 0310 	add.w	r3, r7, #16
 80014ac:	22c0      	movs	r2, #192	@ 0xc0
 80014ae:	2100      	movs	r1, #0
 80014b0:	4618      	mov	r0, r3
 80014b2:	f007 fbc7 	bl	8008c44 <memset>
  if(huart->Instance==USART3)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a55      	ldr	r2, [pc, #340]	@ (8001610 <HAL_UART_MspInit+0x180>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	f040 80a3 	bne.w	8001608 <HAL_UART_MspInit+0x178>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014c2:	f04f 0202 	mov.w	r2, #2
 80014c6:	f04f 0300 	mov.w	r3, #0
 80014ca:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80014ce:	2300      	movs	r3, #0
 80014d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014d4:	f107 0310 	add.w	r3, r7, #16
 80014d8:	4618      	mov	r0, r3
 80014da:	f003 ffc7 	bl	800546c <HAL_RCCEx_PeriphCLKConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 80014e4:	f7ff ffb4 	bl	8001450 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014e8:	4b4a      	ldr	r3, [pc, #296]	@ (8001614 <HAL_UART_MspInit+0x184>)
 80014ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014ee:	4a49      	ldr	r2, [pc, #292]	@ (8001614 <HAL_UART_MspInit+0x184>)
 80014f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014f4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80014f8:	4b46      	ldr	r3, [pc, #280]	@ (8001614 <HAL_UART_MspInit+0x184>)
 80014fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001506:	4b43      	ldr	r3, [pc, #268]	@ (8001614 <HAL_UART_MspInit+0x184>)
 8001508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800150c:	4a41      	ldr	r2, [pc, #260]	@ (8001614 <HAL_UART_MspInit+0x184>)
 800150e:	f043 0302 	orr.w	r3, r3, #2
 8001512:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001516:	4b3f      	ldr	r3, [pc, #252]	@ (8001614 <HAL_UART_MspInit+0x184>)
 8001518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001524:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001528:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152c:	2302      	movs	r3, #2
 800152e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	2300      	movs	r3, #0
 800153a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800153e:	2307      	movs	r3, #7
 8001540:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001544:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001548:	4619      	mov	r1, r3
 800154a:	4833      	ldr	r0, [pc, #204]	@ (8001618 <HAL_UART_MspInit+0x188>)
 800154c:	f002 fd58 	bl	8004000 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream0;
 8001550:	4b32      	ldr	r3, [pc, #200]	@ (800161c <HAL_UART_MspInit+0x18c>)
 8001552:	4a33      	ldr	r2, [pc, #204]	@ (8001620 <HAL_UART_MspInit+0x190>)
 8001554:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001556:	4b31      	ldr	r3, [pc, #196]	@ (800161c <HAL_UART_MspInit+0x18c>)
 8001558:	222e      	movs	r2, #46	@ 0x2e
 800155a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800155c:	4b2f      	ldr	r3, [pc, #188]	@ (800161c <HAL_UART_MspInit+0x18c>)
 800155e:	2240      	movs	r2, #64	@ 0x40
 8001560:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001562:	4b2e      	ldr	r3, [pc, #184]	@ (800161c <HAL_UART_MspInit+0x18c>)
 8001564:	2200      	movs	r2, #0
 8001566:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001568:	4b2c      	ldr	r3, [pc, #176]	@ (800161c <HAL_UART_MspInit+0x18c>)
 800156a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800156e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001570:	4b2a      	ldr	r3, [pc, #168]	@ (800161c <HAL_UART_MspInit+0x18c>)
 8001572:	2200      	movs	r2, #0
 8001574:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001576:	4b29      	ldr	r3, [pc, #164]	@ (800161c <HAL_UART_MspInit+0x18c>)
 8001578:	2200      	movs	r2, #0
 800157a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800157c:	4b27      	ldr	r3, [pc, #156]	@ (800161c <HAL_UART_MspInit+0x18c>)
 800157e:	2200      	movs	r2, #0
 8001580:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001582:	4b26      	ldr	r3, [pc, #152]	@ (800161c <HAL_UART_MspInit+0x18c>)
 8001584:	2200      	movs	r2, #0
 8001586:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001588:	4b24      	ldr	r3, [pc, #144]	@ (800161c <HAL_UART_MspInit+0x18c>)
 800158a:	2200      	movs	r2, #0
 800158c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800158e:	4823      	ldr	r0, [pc, #140]	@ (800161c <HAL_UART_MspInit+0x18c>)
 8001590:	f000 fc5e 	bl	8001e50 <HAL_DMA_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 800159a:	f7ff ff59 	bl	8001450 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a1e      	ldr	r2, [pc, #120]	@ (800161c <HAL_UART_MspInit+0x18c>)
 80015a2:	67da      	str	r2, [r3, #124]	@ 0x7c
 80015a4:	4a1d      	ldr	r2, [pc, #116]	@ (800161c <HAL_UART_MspInit+0x18c>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80015aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001624 <HAL_UART_MspInit+0x194>)
 80015ac:	4a1e      	ldr	r2, [pc, #120]	@ (8001628 <HAL_UART_MspInit+0x198>)
 80015ae:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80015b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001624 <HAL_UART_MspInit+0x194>)
 80015b2:	222d      	movs	r2, #45	@ 0x2d
 80015b4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001624 <HAL_UART_MspInit+0x194>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015bc:	4b19      	ldr	r3, [pc, #100]	@ (8001624 <HAL_UART_MspInit+0x194>)
 80015be:	2200      	movs	r2, #0
 80015c0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015c2:	4b18      	ldr	r3, [pc, #96]	@ (8001624 <HAL_UART_MspInit+0x194>)
 80015c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015c8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015ca:	4b16      	ldr	r3, [pc, #88]	@ (8001624 <HAL_UART_MspInit+0x194>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015d0:	4b14      	ldr	r3, [pc, #80]	@ (8001624 <HAL_UART_MspInit+0x194>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80015d6:	4b13      	ldr	r3, [pc, #76]	@ (8001624 <HAL_UART_MspInit+0x194>)
 80015d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015dc:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015de:	4b11      	ldr	r3, [pc, #68]	@ (8001624 <HAL_UART_MspInit+0x194>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001624 <HAL_UART_MspInit+0x194>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80015ea:	480e      	ldr	r0, [pc, #56]	@ (8001624 <HAL_UART_MspInit+0x194>)
 80015ec:	f000 fc30 	bl	8001e50 <HAL_DMA_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 80015f6:	f7ff ff2b 	bl	8001450 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a09      	ldr	r2, [pc, #36]	@ (8001624 <HAL_UART_MspInit+0x194>)
 80015fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001602:	4a08      	ldr	r2, [pc, #32]	@ (8001624 <HAL_UART_MspInit+0x194>)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8001608:	bf00      	nop
 800160a:	37e8      	adds	r7, #232	@ 0xe8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40004800 	.word	0x40004800
 8001614:	58024400 	.word	0x58024400
 8001618:	58020400 	.word	0x58020400
 800161c:	2400011c 	.word	0x2400011c
 8001620:	40020010 	.word	0x40020010
 8001624:	24000194 	.word	0x24000194
 8001628:	40020028 	.word	0x40020028

0800162c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <NMI_Handler+0x4>

08001634 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <HardFault_Handler+0x4>

0800163c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <MemManage_Handler+0x4>

08001644 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <BusFault_Handler+0x4>

0800164c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <UsageFault_Handler+0x4>

08001654 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001682:	f000 fa0d 	bl	8001aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}

0800168a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN4_Pin);
 800168e:	2002      	movs	r0, #2
 8001690:	f002 feb1 	bl	80043f6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}

08001698 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 800169c:	2004      	movs	r0, #4
 800169e:	f002 feaa 	bl	80043f6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80016ac:	4802      	ldr	r0, [pc, #8]	@ (80016b8 <DMA1_Stream0_IRQHandler+0x10>)
 80016ae:	f001 f995 	bl	80029dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	2400011c 	.word	0x2400011c

080016bc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80016c0:	4802      	ldr	r0, [pc, #8]	@ (80016cc <DMA1_Stream1_IRQHandler+0x10>)
 80016c2:	f001 f98b 	bl	80029dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	24000194 	.word	0x24000194

080016d0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 80016d4:	2040      	movs	r0, #64	@ 0x40
 80016d6:	f002 fe8e 	bl	80043f6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN3_Pin);
 80016da:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80016de:	f002 fe8a 	bl	80043f6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b086      	sub	sp, #24
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	60f8      	str	r0, [r7, #12]
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	e00a      	b.n	800170e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016f8:	f3af 8000 	nop.w
 80016fc:	4601      	mov	r1, r0
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	1c5a      	adds	r2, r3, #1
 8001702:	60ba      	str	r2, [r7, #8]
 8001704:	b2ca      	uxtb	r2, r1
 8001706:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	3301      	adds	r3, #1
 800170c:	617b      	str	r3, [r7, #20]
 800170e:	697a      	ldr	r2, [r7, #20]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	429a      	cmp	r2, r3
 8001714:	dbf0      	blt.n	80016f8 <_read+0x12>
  }

  return len;
 8001716:	687b      	ldr	r3, [r7, #4]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001728:	f04f 33ff 	mov.w	r3, #4294967295
}
 800172c:	4618      	mov	r0, r3
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001748:	605a      	str	r2, [r3, #4]
  return 0;
 800174a:	2300      	movs	r3, #0
}
 800174c:	4618      	mov	r0, r3
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <_isatty>:

int _isatty(int file)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001760:	2301      	movs	r3, #1
}
 8001762:	4618      	mov	r0, r3
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800176e:	b480      	push	{r7}
 8001770:	b085      	sub	sp, #20
 8001772:	af00      	add	r7, sp, #0
 8001774:	60f8      	str	r0, [r7, #12]
 8001776:	60b9      	str	r1, [r7, #8]
 8001778:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001790:	4a14      	ldr	r2, [pc, #80]	@ (80017e4 <_sbrk+0x5c>)
 8001792:	4b15      	ldr	r3, [pc, #84]	@ (80017e8 <_sbrk+0x60>)
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800179c:	4b13      	ldr	r3, [pc, #76]	@ (80017ec <_sbrk+0x64>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d102      	bne.n	80017aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017a4:	4b11      	ldr	r3, [pc, #68]	@ (80017ec <_sbrk+0x64>)
 80017a6:	4a12      	ldr	r2, [pc, #72]	@ (80017f0 <_sbrk+0x68>)
 80017a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017aa:	4b10      	ldr	r3, [pc, #64]	@ (80017ec <_sbrk+0x64>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d207      	bcs.n	80017c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017b8:	f007 fa92 	bl	8008ce0 <__errno>
 80017bc:	4603      	mov	r3, r0
 80017be:	220c      	movs	r2, #12
 80017c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017c2:	f04f 33ff 	mov.w	r3, #4294967295
 80017c6:	e009      	b.n	80017dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017c8:	4b08      	ldr	r3, [pc, #32]	@ (80017ec <_sbrk+0x64>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ce:	4b07      	ldr	r3, [pc, #28]	@ (80017ec <_sbrk+0x64>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	4a05      	ldr	r2, [pc, #20]	@ (80017ec <_sbrk+0x64>)
 80017d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017da:	68fb      	ldr	r3, [r7, #12]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	24080000 	.word	0x24080000
 80017e8:	00000400 	.word	0x00000400
 80017ec:	2400038c 	.word	0x2400038c
 80017f0:	240004e0 	.word	0x240004e0

080017f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017f8:	4b43      	ldr	r3, [pc, #268]	@ (8001908 <SystemInit+0x114>)
 80017fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017fe:	4a42      	ldr	r2, [pc, #264]	@ (8001908 <SystemInit+0x114>)
 8001800:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001804:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001808:	4b40      	ldr	r3, [pc, #256]	@ (800190c <SystemInit+0x118>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 030f 	and.w	r3, r3, #15
 8001810:	2b06      	cmp	r3, #6
 8001812:	d807      	bhi.n	8001824 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001814:	4b3d      	ldr	r3, [pc, #244]	@ (800190c <SystemInit+0x118>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f023 030f 	bic.w	r3, r3, #15
 800181c:	4a3b      	ldr	r2, [pc, #236]	@ (800190c <SystemInit+0x118>)
 800181e:	f043 0307 	orr.w	r3, r3, #7
 8001822:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001824:	4b3a      	ldr	r3, [pc, #232]	@ (8001910 <SystemInit+0x11c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a39      	ldr	r2, [pc, #228]	@ (8001910 <SystemInit+0x11c>)
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001830:	4b37      	ldr	r3, [pc, #220]	@ (8001910 <SystemInit+0x11c>)
 8001832:	2200      	movs	r2, #0
 8001834:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001836:	4b36      	ldr	r3, [pc, #216]	@ (8001910 <SystemInit+0x11c>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	4935      	ldr	r1, [pc, #212]	@ (8001910 <SystemInit+0x11c>)
 800183c:	4b35      	ldr	r3, [pc, #212]	@ (8001914 <SystemInit+0x120>)
 800183e:	4013      	ands	r3, r2
 8001840:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001842:	4b32      	ldr	r3, [pc, #200]	@ (800190c <SystemInit+0x118>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0308 	and.w	r3, r3, #8
 800184a:	2b00      	cmp	r3, #0
 800184c:	d007      	beq.n	800185e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800184e:	4b2f      	ldr	r3, [pc, #188]	@ (800190c <SystemInit+0x118>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f023 030f 	bic.w	r3, r3, #15
 8001856:	4a2d      	ldr	r2, [pc, #180]	@ (800190c <SystemInit+0x118>)
 8001858:	f043 0307 	orr.w	r3, r3, #7
 800185c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800185e:	4b2c      	ldr	r3, [pc, #176]	@ (8001910 <SystemInit+0x11c>)
 8001860:	2200      	movs	r2, #0
 8001862:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001864:	4b2a      	ldr	r3, [pc, #168]	@ (8001910 <SystemInit+0x11c>)
 8001866:	2200      	movs	r2, #0
 8001868:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800186a:	4b29      	ldr	r3, [pc, #164]	@ (8001910 <SystemInit+0x11c>)
 800186c:	2200      	movs	r2, #0
 800186e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001870:	4b27      	ldr	r3, [pc, #156]	@ (8001910 <SystemInit+0x11c>)
 8001872:	4a29      	ldr	r2, [pc, #164]	@ (8001918 <SystemInit+0x124>)
 8001874:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001876:	4b26      	ldr	r3, [pc, #152]	@ (8001910 <SystemInit+0x11c>)
 8001878:	4a28      	ldr	r2, [pc, #160]	@ (800191c <SystemInit+0x128>)
 800187a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800187c:	4b24      	ldr	r3, [pc, #144]	@ (8001910 <SystemInit+0x11c>)
 800187e:	4a28      	ldr	r2, [pc, #160]	@ (8001920 <SystemInit+0x12c>)
 8001880:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001882:	4b23      	ldr	r3, [pc, #140]	@ (8001910 <SystemInit+0x11c>)
 8001884:	2200      	movs	r2, #0
 8001886:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001888:	4b21      	ldr	r3, [pc, #132]	@ (8001910 <SystemInit+0x11c>)
 800188a:	4a25      	ldr	r2, [pc, #148]	@ (8001920 <SystemInit+0x12c>)
 800188c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800188e:	4b20      	ldr	r3, [pc, #128]	@ (8001910 <SystemInit+0x11c>)
 8001890:	2200      	movs	r2, #0
 8001892:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001894:	4b1e      	ldr	r3, [pc, #120]	@ (8001910 <SystemInit+0x11c>)
 8001896:	4a22      	ldr	r2, [pc, #136]	@ (8001920 <SystemInit+0x12c>)
 8001898:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800189a:	4b1d      	ldr	r3, [pc, #116]	@ (8001910 <SystemInit+0x11c>)
 800189c:	2200      	movs	r2, #0
 800189e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80018a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001910 <SystemInit+0x11c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a1a      	ldr	r2, [pc, #104]	@ (8001910 <SystemInit+0x11c>)
 80018a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80018ac:	4b18      	ldr	r3, [pc, #96]	@ (8001910 <SystemInit+0x11c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80018b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001924 <SystemInit+0x130>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001928 <SystemInit+0x134>)
 80018b8:	4013      	ands	r3, r2
 80018ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80018be:	d202      	bcs.n	80018c6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80018c0:	4b1a      	ldr	r3, [pc, #104]	@ (800192c <SystemInit+0x138>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80018c6:	4b12      	ldr	r3, [pc, #72]	@ (8001910 <SystemInit+0x11c>)
 80018c8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80018cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d113      	bne.n	80018fc <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80018d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001910 <SystemInit+0x11c>)
 80018d6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80018da:	4a0d      	ldr	r2, [pc, #52]	@ (8001910 <SystemInit+0x11c>)
 80018dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018e0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80018e4:	4b12      	ldr	r3, [pc, #72]	@ (8001930 <SystemInit+0x13c>)
 80018e6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80018ea:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80018ec:	4b08      	ldr	r3, [pc, #32]	@ (8001910 <SystemInit+0x11c>)
 80018ee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80018f2:	4a07      	ldr	r2, [pc, #28]	@ (8001910 <SystemInit+0x11c>)
 80018f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80018f8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	e000ed00 	.word	0xe000ed00
 800190c:	52002000 	.word	0x52002000
 8001910:	58024400 	.word	0x58024400
 8001914:	eaf6ed7f 	.word	0xeaf6ed7f
 8001918:	02020200 	.word	0x02020200
 800191c:	01ff0000 	.word	0x01ff0000
 8001920:	01010280 	.word	0x01010280
 8001924:	5c001000 	.word	0x5c001000
 8001928:	ffff0000 	.word	0xffff0000
 800192c:	51008108 	.word	0x51008108
 8001930:	52004000 	.word	0x52004000

08001934 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001938:	4b09      	ldr	r3, [pc, #36]	@ (8001960 <ExitRun0Mode+0x2c>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	4a08      	ldr	r2, [pc, #32]	@ (8001960 <ExitRun0Mode+0x2c>)
 800193e:	f043 0302 	orr.w	r3, r3, #2
 8001942:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001944:	bf00      	nop
 8001946:	4b06      	ldr	r3, [pc, #24]	@ (8001960 <ExitRun0Mode+0x2c>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f9      	beq.n	8001946 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001952:	bf00      	nop
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	58024800 	.word	0x58024800

08001964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001964:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80019a0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001968:	f7ff ffe4 	bl	8001934 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800196c:	f7ff ff42 	bl	80017f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001970:	480c      	ldr	r0, [pc, #48]	@ (80019a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001972:	490d      	ldr	r1, [pc, #52]	@ (80019a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001974:	4a0d      	ldr	r2, [pc, #52]	@ (80019ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001978:	e002      	b.n	8001980 <LoopCopyDataInit>

0800197a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800197a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800197c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800197e:	3304      	adds	r3, #4

08001980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001984:	d3f9      	bcc.n	800197a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001986:	4a0a      	ldr	r2, [pc, #40]	@ (80019b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001988:	4c0a      	ldr	r4, [pc, #40]	@ (80019b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800198a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800198c:	e001      	b.n	8001992 <LoopFillZerobss>

0800198e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800198e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001990:	3204      	adds	r2, #4

08001992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001994:	d3fb      	bcc.n	800198e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001996:	f007 f9a9 	bl	8008cec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800199a:	f7ff f8bb 	bl	8000b14 <main>
  bx  lr
 800199e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019a0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80019a4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80019a8:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 80019ac:	080098d4 	.word	0x080098d4
  ldr r2, =_sbss
 80019b0:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 80019b4:	240004e0 	.word	0x240004e0

080019b8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019b8:	e7fe      	b.n	80019b8 <ADC3_IRQHandler>
	...

080019bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c2:	2003      	movs	r0, #3
 80019c4:	f000 f98c 	bl	8001ce0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80019c8:	f003 fb7a 	bl	80050c0 <HAL_RCC_GetSysClockFreq>
 80019cc:	4602      	mov	r2, r0
 80019ce:	4b15      	ldr	r3, [pc, #84]	@ (8001a24 <HAL_Init+0x68>)
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	0a1b      	lsrs	r3, r3, #8
 80019d4:	f003 030f 	and.w	r3, r3, #15
 80019d8:	4913      	ldr	r1, [pc, #76]	@ (8001a28 <HAL_Init+0x6c>)
 80019da:	5ccb      	ldrb	r3, [r1, r3]
 80019dc:	f003 031f 	and.w	r3, r3, #31
 80019e0:	fa22 f303 	lsr.w	r3, r2, r3
 80019e4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80019e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a24 <HAL_Init+0x68>)
 80019e8:	699b      	ldr	r3, [r3, #24]
 80019ea:	f003 030f 	and.w	r3, r3, #15
 80019ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001a28 <HAL_Init+0x6c>)
 80019f0:	5cd3      	ldrb	r3, [r2, r3]
 80019f2:	f003 031f 	and.w	r3, r3, #31
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	fa22 f303 	lsr.w	r3, r2, r3
 80019fc:	4a0b      	ldr	r2, [pc, #44]	@ (8001a2c <HAL_Init+0x70>)
 80019fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a00:	4a0b      	ldr	r2, [pc, #44]	@ (8001a30 <HAL_Init+0x74>)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a06:	200f      	movs	r0, #15
 8001a08:	f000 f814 	bl	8001a34 <HAL_InitTick>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e002      	b.n	8001a1c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a16:	f7ff fd21 	bl	800145c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	58024400 	.word	0x58024400
 8001a28:	08009850 	.word	0x08009850
 8001a2c:	24000004 	.word	0x24000004
 8001a30:	24000000 	.word	0x24000000

08001a34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001a3c:	4b15      	ldr	r3, [pc, #84]	@ (8001a94 <HAL_InitTick+0x60>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d101      	bne.n	8001a48 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e021      	b.n	8001a8c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001a48:	4b13      	ldr	r3, [pc, #76]	@ (8001a98 <HAL_InitTick+0x64>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	4b11      	ldr	r3, [pc, #68]	@ (8001a94 <HAL_InitTick+0x60>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	4619      	mov	r1, r3
 8001a52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f000 f971 	bl	8001d46 <HAL_SYSTICK_Config>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e00e      	b.n	8001a8c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b0f      	cmp	r3, #15
 8001a72:	d80a      	bhi.n	8001a8a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a74:	2200      	movs	r2, #0
 8001a76:	6879      	ldr	r1, [r7, #4]
 8001a78:	f04f 30ff 	mov.w	r0, #4294967295
 8001a7c:	f000 f93b 	bl	8001cf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a80:	4a06      	ldr	r2, [pc, #24]	@ (8001a9c <HAL_InitTick+0x68>)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a86:	2300      	movs	r3, #0
 8001a88:	e000      	b.n	8001a8c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	2400000c 	.word	0x2400000c
 8001a98:	24000000 	.word	0x24000000
 8001a9c:	24000008 	.word	0x24000008

08001aa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001aa4:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <HAL_IncTick+0x20>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ac4 <HAL_IncTick+0x24>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4413      	add	r3, r2
 8001ab0:	4a04      	ldr	r2, [pc, #16]	@ (8001ac4 <HAL_IncTick+0x24>)
 8001ab2:	6013      	str	r3, [r2, #0]
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	2400000c 	.word	0x2400000c
 8001ac4:	24000390 	.word	0x24000390

08001ac8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return uwTick;
 8001acc:	4b03      	ldr	r3, [pc, #12]	@ (8001adc <HAL_GetTick+0x14>)
 8001ace:	681b      	ldr	r3, [r3, #0]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	24000390 	.word	0x24000390

08001ae0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ae8:	f7ff ffee 	bl	8001ac8 <HAL_GetTick>
 8001aec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af8:	d005      	beq.n	8001b06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001afa:	4b0a      	ldr	r3, [pc, #40]	@ (8001b24 <HAL_Delay+0x44>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	461a      	mov	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4413      	add	r3, r2
 8001b04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b06:	bf00      	nop
 8001b08:	f7ff ffde 	bl	8001ac8 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d8f7      	bhi.n	8001b08 <HAL_Delay+0x28>
  {
  }
}
 8001b18:	bf00      	nop
 8001b1a:	bf00      	nop
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	2400000c 	.word	0x2400000c

08001b28 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001b2c:	4b03      	ldr	r3, [pc, #12]	@ (8001b3c <HAL_GetREVID+0x14>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	0c1b      	lsrs	r3, r3, #16
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	5c001000 	.word	0x5c001000

08001b40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b50:	4b0b      	ldr	r3, [pc, #44]	@ (8001b80 <__NVIC_SetPriorityGrouping+0x40>)
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b68:	4b06      	ldr	r3, [pc, #24]	@ (8001b84 <__NVIC_SetPriorityGrouping+0x44>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b6e:	4a04      	ldr	r2, [pc, #16]	@ (8001b80 <__NVIC_SetPriorityGrouping+0x40>)
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	60d3      	str	r3, [r2, #12]
}
 8001b74:	bf00      	nop
 8001b76:	3714      	adds	r7, #20
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	e000ed00 	.word	0xe000ed00
 8001b84:	05fa0000 	.word	0x05fa0000

08001b88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b8c:	4b04      	ldr	r3, [pc, #16]	@ (8001ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	0a1b      	lsrs	r3, r3, #8
 8001b92:	f003 0307 	and.w	r3, r3, #7
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	4603      	mov	r3, r0
 8001bac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	db0b      	blt.n	8001bce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bb6:	88fb      	ldrh	r3, [r7, #6]
 8001bb8:	f003 021f 	and.w	r2, r3, #31
 8001bbc:	4907      	ldr	r1, [pc, #28]	@ (8001bdc <__NVIC_EnableIRQ+0x38>)
 8001bbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bc2:	095b      	lsrs	r3, r3, #5
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000e100 	.word	0xe000e100

08001be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	6039      	str	r1, [r7, #0]
 8001bea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001bec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	db0a      	blt.n	8001c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	490c      	ldr	r1, [pc, #48]	@ (8001c2c <__NVIC_SetPriority+0x4c>)
 8001bfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bfe:	0112      	lsls	r2, r2, #4
 8001c00:	b2d2      	uxtb	r2, r2
 8001c02:	440b      	add	r3, r1
 8001c04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c08:	e00a      	b.n	8001c20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	4908      	ldr	r1, [pc, #32]	@ (8001c30 <__NVIC_SetPriority+0x50>)
 8001c10:	88fb      	ldrh	r3, [r7, #6]
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	3b04      	subs	r3, #4
 8001c18:	0112      	lsls	r2, r2, #4
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	761a      	strb	r2, [r3, #24]
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	e000e100 	.word	0xe000e100
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b089      	sub	sp, #36	@ 0x24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f1c3 0307 	rsb	r3, r3, #7
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	bf28      	it	cs
 8001c52:	2304      	movcs	r3, #4
 8001c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	3304      	adds	r3, #4
 8001c5a:	2b06      	cmp	r3, #6
 8001c5c:	d902      	bls.n	8001c64 <NVIC_EncodePriority+0x30>
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3b03      	subs	r3, #3
 8001c62:	e000      	b.n	8001c66 <NVIC_EncodePriority+0x32>
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c68:	f04f 32ff 	mov.w	r2, #4294967295
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43da      	mvns	r2, r3
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	401a      	ands	r2, r3
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	fa01 f303 	lsl.w	r3, r1, r3
 8001c86:	43d9      	mvns	r1, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c8c:	4313      	orrs	r3, r2
         );
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3724      	adds	r7, #36	@ 0x24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
	...

08001c9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cac:	d301      	bcc.n	8001cb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e00f      	b.n	8001cd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001cdc <SysTick_Config+0x40>)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cba:	210f      	movs	r1, #15
 8001cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc0:	f7ff ff8e 	bl	8001be0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cc4:	4b05      	ldr	r3, [pc, #20]	@ (8001cdc <SysTick_Config+0x40>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cca:	4b04      	ldr	r3, [pc, #16]	@ (8001cdc <SysTick_Config+0x40>)
 8001ccc:	2207      	movs	r2, #7
 8001cce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	e000e010 	.word	0xe000e010

08001ce0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7ff ff29 	bl	8001b40 <__NVIC_SetPriorityGrouping>
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b086      	sub	sp, #24
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	607a      	str	r2, [r7, #4]
 8001d02:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d04:	f7ff ff40 	bl	8001b88 <__NVIC_GetPriorityGrouping>
 8001d08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	68b9      	ldr	r1, [r7, #8]
 8001d0e:	6978      	ldr	r0, [r7, #20]
 8001d10:	f7ff ff90 	bl	8001c34 <NVIC_EncodePriority>
 8001d14:	4602      	mov	r2, r0
 8001d16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff5f 	bl	8001be0 <__NVIC_SetPriority>
}
 8001d22:	bf00      	nop
 8001d24:	3718      	adds	r7, #24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b082      	sub	sp, #8
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	4603      	mov	r3, r0
 8001d32:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff ff33 	bl	8001ba4 <__NVIC_EnableIRQ>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b082      	sub	sp, #8
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7ff ffa4 	bl	8001c9c <SysTick_Config>
 8001d54:	4603      	mov	r3, r0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
	...

08001d60 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001d64:	f3bf 8f5f 	dmb	sy
}
 8001d68:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001d6a:	4b07      	ldr	r3, [pc, #28]	@ (8001d88 <HAL_MPU_Disable+0x28>)
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6e:	4a06      	ldr	r2, [pc, #24]	@ (8001d88 <HAL_MPU_Disable+0x28>)
 8001d70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d74:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001d76:	4b05      	ldr	r3, [pc, #20]	@ (8001d8c <HAL_MPU_Disable+0x2c>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	605a      	str	r2, [r3, #4]
}
 8001d7c:	bf00      	nop
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	e000ed00 	.word	0xe000ed00
 8001d8c:	e000ed90 	.word	0xe000ed90

08001d90 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001d98:	4a0b      	ldr	r2, [pc, #44]	@ (8001dc8 <HAL_MPU_Enable+0x38>)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001da2:	4b0a      	ldr	r3, [pc, #40]	@ (8001dcc <HAL_MPU_Enable+0x3c>)
 8001da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da6:	4a09      	ldr	r2, [pc, #36]	@ (8001dcc <HAL_MPU_Enable+0x3c>)
 8001da8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dac:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001dae:	f3bf 8f4f 	dsb	sy
}
 8001db2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001db4:	f3bf 8f6f 	isb	sy
}
 8001db8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	e000ed90 	.word	0xe000ed90
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	785a      	ldrb	r2, [r3, #1]
 8001ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e4c <HAL_MPU_ConfigRegion+0x7c>)
 8001dde:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001de0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e4c <HAL_MPU_ConfigRegion+0x7c>)
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	4a19      	ldr	r2, [pc, #100]	@ (8001e4c <HAL_MPU_ConfigRegion+0x7c>)
 8001de6:	f023 0301 	bic.w	r3, r3, #1
 8001dea:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001dec:	4a17      	ldr	r2, [pc, #92]	@ (8001e4c <HAL_MPU_ConfigRegion+0x7c>)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	7b1b      	ldrb	r3, [r3, #12]
 8001df8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	7adb      	ldrb	r3, [r3, #11]
 8001dfe:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e00:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	7a9b      	ldrb	r3, [r3, #10]
 8001e06:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001e08:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	7b5b      	ldrb	r3, [r3, #13]
 8001e0e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001e10:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	7b9b      	ldrb	r3, [r3, #14]
 8001e16:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001e18:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	7bdb      	ldrb	r3, [r3, #15]
 8001e1e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001e20:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	7a5b      	ldrb	r3, [r3, #9]
 8001e26:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001e28:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	7a1b      	ldrb	r3, [r3, #8]
 8001e2e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001e30:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	7812      	ldrb	r2, [r2, #0]
 8001e36:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e38:	4a04      	ldr	r2, [pc, #16]	@ (8001e4c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001e3a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001e3c:	6113      	str	r3, [r2, #16]
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	e000ed90 	.word	0xe000ed90

08001e50 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001e58:	f7ff fe36 	bl	8001ac8 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e316      	b.n	8002496 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a66      	ldr	r2, [pc, #408]	@ (8002008 <HAL_DMA_Init+0x1b8>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d04a      	beq.n	8001f08 <HAL_DMA_Init+0xb8>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a65      	ldr	r2, [pc, #404]	@ (800200c <HAL_DMA_Init+0x1bc>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d045      	beq.n	8001f08 <HAL_DMA_Init+0xb8>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a63      	ldr	r2, [pc, #396]	@ (8002010 <HAL_DMA_Init+0x1c0>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d040      	beq.n	8001f08 <HAL_DMA_Init+0xb8>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a62      	ldr	r2, [pc, #392]	@ (8002014 <HAL_DMA_Init+0x1c4>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d03b      	beq.n	8001f08 <HAL_DMA_Init+0xb8>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a60      	ldr	r2, [pc, #384]	@ (8002018 <HAL_DMA_Init+0x1c8>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d036      	beq.n	8001f08 <HAL_DMA_Init+0xb8>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a5f      	ldr	r2, [pc, #380]	@ (800201c <HAL_DMA_Init+0x1cc>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d031      	beq.n	8001f08 <HAL_DMA_Init+0xb8>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a5d      	ldr	r2, [pc, #372]	@ (8002020 <HAL_DMA_Init+0x1d0>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d02c      	beq.n	8001f08 <HAL_DMA_Init+0xb8>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a5c      	ldr	r2, [pc, #368]	@ (8002024 <HAL_DMA_Init+0x1d4>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d027      	beq.n	8001f08 <HAL_DMA_Init+0xb8>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a5a      	ldr	r2, [pc, #360]	@ (8002028 <HAL_DMA_Init+0x1d8>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d022      	beq.n	8001f08 <HAL_DMA_Init+0xb8>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a59      	ldr	r2, [pc, #356]	@ (800202c <HAL_DMA_Init+0x1dc>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d01d      	beq.n	8001f08 <HAL_DMA_Init+0xb8>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a57      	ldr	r2, [pc, #348]	@ (8002030 <HAL_DMA_Init+0x1e0>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d018      	beq.n	8001f08 <HAL_DMA_Init+0xb8>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a56      	ldr	r2, [pc, #344]	@ (8002034 <HAL_DMA_Init+0x1e4>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d013      	beq.n	8001f08 <HAL_DMA_Init+0xb8>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a54      	ldr	r2, [pc, #336]	@ (8002038 <HAL_DMA_Init+0x1e8>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d00e      	beq.n	8001f08 <HAL_DMA_Init+0xb8>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a53      	ldr	r2, [pc, #332]	@ (800203c <HAL_DMA_Init+0x1ec>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d009      	beq.n	8001f08 <HAL_DMA_Init+0xb8>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a51      	ldr	r2, [pc, #324]	@ (8002040 <HAL_DMA_Init+0x1f0>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d004      	beq.n	8001f08 <HAL_DMA_Init+0xb8>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a50      	ldr	r2, [pc, #320]	@ (8002044 <HAL_DMA_Init+0x1f4>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d101      	bne.n	8001f0c <HAL_DMA_Init+0xbc>
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e000      	b.n	8001f0e <HAL_DMA_Init+0xbe>
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 813b 	beq.w	800218a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2202      	movs	r2, #2
 8001f18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a37      	ldr	r2, [pc, #220]	@ (8002008 <HAL_DMA_Init+0x1b8>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d04a      	beq.n	8001fc4 <HAL_DMA_Init+0x174>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a36      	ldr	r2, [pc, #216]	@ (800200c <HAL_DMA_Init+0x1bc>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d045      	beq.n	8001fc4 <HAL_DMA_Init+0x174>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a34      	ldr	r2, [pc, #208]	@ (8002010 <HAL_DMA_Init+0x1c0>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d040      	beq.n	8001fc4 <HAL_DMA_Init+0x174>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a33      	ldr	r2, [pc, #204]	@ (8002014 <HAL_DMA_Init+0x1c4>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d03b      	beq.n	8001fc4 <HAL_DMA_Init+0x174>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a31      	ldr	r2, [pc, #196]	@ (8002018 <HAL_DMA_Init+0x1c8>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d036      	beq.n	8001fc4 <HAL_DMA_Init+0x174>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a30      	ldr	r2, [pc, #192]	@ (800201c <HAL_DMA_Init+0x1cc>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d031      	beq.n	8001fc4 <HAL_DMA_Init+0x174>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a2e      	ldr	r2, [pc, #184]	@ (8002020 <HAL_DMA_Init+0x1d0>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d02c      	beq.n	8001fc4 <HAL_DMA_Init+0x174>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a2d      	ldr	r2, [pc, #180]	@ (8002024 <HAL_DMA_Init+0x1d4>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d027      	beq.n	8001fc4 <HAL_DMA_Init+0x174>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a2b      	ldr	r2, [pc, #172]	@ (8002028 <HAL_DMA_Init+0x1d8>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d022      	beq.n	8001fc4 <HAL_DMA_Init+0x174>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a2a      	ldr	r2, [pc, #168]	@ (800202c <HAL_DMA_Init+0x1dc>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d01d      	beq.n	8001fc4 <HAL_DMA_Init+0x174>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a28      	ldr	r2, [pc, #160]	@ (8002030 <HAL_DMA_Init+0x1e0>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d018      	beq.n	8001fc4 <HAL_DMA_Init+0x174>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a27      	ldr	r2, [pc, #156]	@ (8002034 <HAL_DMA_Init+0x1e4>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d013      	beq.n	8001fc4 <HAL_DMA_Init+0x174>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a25      	ldr	r2, [pc, #148]	@ (8002038 <HAL_DMA_Init+0x1e8>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d00e      	beq.n	8001fc4 <HAL_DMA_Init+0x174>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a24      	ldr	r2, [pc, #144]	@ (800203c <HAL_DMA_Init+0x1ec>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d009      	beq.n	8001fc4 <HAL_DMA_Init+0x174>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a22      	ldr	r2, [pc, #136]	@ (8002040 <HAL_DMA_Init+0x1f0>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d004      	beq.n	8001fc4 <HAL_DMA_Init+0x174>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a21      	ldr	r2, [pc, #132]	@ (8002044 <HAL_DMA_Init+0x1f4>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d108      	bne.n	8001fd6 <HAL_DMA_Init+0x186>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 0201 	bic.w	r2, r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	e007      	b.n	8001fe6 <HAL_DMA_Init+0x196>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 0201 	bic.w	r2, r2, #1
 8001fe4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001fe6:	e02f      	b.n	8002048 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fe8:	f7ff fd6e 	bl	8001ac8 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b05      	cmp	r3, #5
 8001ff4:	d928      	bls.n	8002048 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2220      	movs	r2, #32
 8001ffa:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2203      	movs	r2, #3
 8002000:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e246      	b.n	8002496 <HAL_DMA_Init+0x646>
 8002008:	40020010 	.word	0x40020010
 800200c:	40020028 	.word	0x40020028
 8002010:	40020040 	.word	0x40020040
 8002014:	40020058 	.word	0x40020058
 8002018:	40020070 	.word	0x40020070
 800201c:	40020088 	.word	0x40020088
 8002020:	400200a0 	.word	0x400200a0
 8002024:	400200b8 	.word	0x400200b8
 8002028:	40020410 	.word	0x40020410
 800202c:	40020428 	.word	0x40020428
 8002030:	40020440 	.word	0x40020440
 8002034:	40020458 	.word	0x40020458
 8002038:	40020470 	.word	0x40020470
 800203c:	40020488 	.word	0x40020488
 8002040:	400204a0 	.word	0x400204a0
 8002044:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1c8      	bne.n	8001fe8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	4b83      	ldr	r3, [pc, #524]	@ (8002270 <HAL_DMA_Init+0x420>)
 8002062:	4013      	ands	r3, r2
 8002064:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800206e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800207a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002086:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	4313      	orrs	r3, r2
 8002092:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002098:	2b04      	cmp	r3, #4
 800209a:	d107      	bne.n	80020ac <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a4:	4313      	orrs	r3, r2
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80020ac:	4b71      	ldr	r3, [pc, #452]	@ (8002274 <HAL_DMA_Init+0x424>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	4b71      	ldr	r3, [pc, #452]	@ (8002278 <HAL_DMA_Init+0x428>)
 80020b2:	4013      	ands	r3, r2
 80020b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80020b8:	d328      	bcc.n	800210c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b28      	cmp	r3, #40	@ 0x28
 80020c0:	d903      	bls.n	80020ca <HAL_DMA_Init+0x27a>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80020c8:	d917      	bls.n	80020fa <HAL_DMA_Init+0x2aa>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b3e      	cmp	r3, #62	@ 0x3e
 80020d0:	d903      	bls.n	80020da <HAL_DMA_Init+0x28a>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b42      	cmp	r3, #66	@ 0x42
 80020d8:	d90f      	bls.n	80020fa <HAL_DMA_Init+0x2aa>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b46      	cmp	r3, #70	@ 0x46
 80020e0:	d903      	bls.n	80020ea <HAL_DMA_Init+0x29a>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b48      	cmp	r3, #72	@ 0x48
 80020e8:	d907      	bls.n	80020fa <HAL_DMA_Init+0x2aa>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b4e      	cmp	r3, #78	@ 0x4e
 80020f0:	d905      	bls.n	80020fe <HAL_DMA_Init+0x2ae>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b52      	cmp	r3, #82	@ 0x52
 80020f8:	d801      	bhi.n	80020fe <HAL_DMA_Init+0x2ae>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <HAL_DMA_Init+0x2b0>
 80020fe:	2300      	movs	r3, #0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800210a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	f023 0307 	bic.w	r3, r3, #7
 8002122:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	4313      	orrs	r3, r2
 800212c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002132:	2b04      	cmp	r3, #4
 8002134:	d117      	bne.n	8002166 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	4313      	orrs	r3, r2
 800213e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00e      	beq.n	8002166 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f001 fdcf 	bl	8003cec <DMA_CheckFifoParam>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d008      	beq.n	8002166 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2240      	movs	r2, #64	@ 0x40
 8002158:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e197      	b.n	8002496 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f001 fd0a 	bl	8003b88 <DMA_CalcBaseAndBitshift>
 8002174:	4603      	mov	r3, r0
 8002176:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800217c:	f003 031f 	and.w	r3, r3, #31
 8002180:	223f      	movs	r2, #63	@ 0x3f
 8002182:	409a      	lsls	r2, r3
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	e0cd      	b.n	8002326 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a3b      	ldr	r2, [pc, #236]	@ (800227c <HAL_DMA_Init+0x42c>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d022      	beq.n	80021da <HAL_DMA_Init+0x38a>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a39      	ldr	r2, [pc, #228]	@ (8002280 <HAL_DMA_Init+0x430>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d01d      	beq.n	80021da <HAL_DMA_Init+0x38a>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a38      	ldr	r2, [pc, #224]	@ (8002284 <HAL_DMA_Init+0x434>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d018      	beq.n	80021da <HAL_DMA_Init+0x38a>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a36      	ldr	r2, [pc, #216]	@ (8002288 <HAL_DMA_Init+0x438>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d013      	beq.n	80021da <HAL_DMA_Init+0x38a>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a35      	ldr	r2, [pc, #212]	@ (800228c <HAL_DMA_Init+0x43c>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d00e      	beq.n	80021da <HAL_DMA_Init+0x38a>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a33      	ldr	r2, [pc, #204]	@ (8002290 <HAL_DMA_Init+0x440>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d009      	beq.n	80021da <HAL_DMA_Init+0x38a>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a32      	ldr	r2, [pc, #200]	@ (8002294 <HAL_DMA_Init+0x444>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d004      	beq.n	80021da <HAL_DMA_Init+0x38a>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a30      	ldr	r2, [pc, #192]	@ (8002298 <HAL_DMA_Init+0x448>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d101      	bne.n	80021de <HAL_DMA_Init+0x38e>
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <HAL_DMA_Init+0x390>
 80021de:	2300      	movs	r3, #0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 8097 	beq.w	8002314 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a24      	ldr	r2, [pc, #144]	@ (800227c <HAL_DMA_Init+0x42c>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d021      	beq.n	8002234 <HAL_DMA_Init+0x3e4>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a22      	ldr	r2, [pc, #136]	@ (8002280 <HAL_DMA_Init+0x430>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d01c      	beq.n	8002234 <HAL_DMA_Init+0x3e4>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a21      	ldr	r2, [pc, #132]	@ (8002284 <HAL_DMA_Init+0x434>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d017      	beq.n	8002234 <HAL_DMA_Init+0x3e4>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a1f      	ldr	r2, [pc, #124]	@ (8002288 <HAL_DMA_Init+0x438>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d012      	beq.n	8002234 <HAL_DMA_Init+0x3e4>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a1e      	ldr	r2, [pc, #120]	@ (800228c <HAL_DMA_Init+0x43c>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d00d      	beq.n	8002234 <HAL_DMA_Init+0x3e4>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a1c      	ldr	r2, [pc, #112]	@ (8002290 <HAL_DMA_Init+0x440>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d008      	beq.n	8002234 <HAL_DMA_Init+0x3e4>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a1b      	ldr	r2, [pc, #108]	@ (8002294 <HAL_DMA_Init+0x444>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d003      	beq.n	8002234 <HAL_DMA_Init+0x3e4>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a19      	ldr	r2, [pc, #100]	@ (8002298 <HAL_DMA_Init+0x448>)
 8002232:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2202      	movs	r2, #2
 8002238:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800224c:	697a      	ldr	r2, [r7, #20]
 800224e:	4b13      	ldr	r3, [pc, #76]	@ (800229c <HAL_DMA_Init+0x44c>)
 8002250:	4013      	ands	r3, r2
 8002252:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	2b40      	cmp	r3, #64	@ 0x40
 800225a:	d021      	beq.n	80022a0 <HAL_DMA_Init+0x450>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	2b80      	cmp	r3, #128	@ 0x80
 8002262:	d102      	bne.n	800226a <HAL_DMA_Init+0x41a>
 8002264:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002268:	e01b      	b.n	80022a2 <HAL_DMA_Init+0x452>
 800226a:	2300      	movs	r3, #0
 800226c:	e019      	b.n	80022a2 <HAL_DMA_Init+0x452>
 800226e:	bf00      	nop
 8002270:	fe10803f 	.word	0xfe10803f
 8002274:	5c001000 	.word	0x5c001000
 8002278:	ffff0000 	.word	0xffff0000
 800227c:	58025408 	.word	0x58025408
 8002280:	5802541c 	.word	0x5802541c
 8002284:	58025430 	.word	0x58025430
 8002288:	58025444 	.word	0x58025444
 800228c:	58025458 	.word	0x58025458
 8002290:	5802546c 	.word	0x5802546c
 8002294:	58025480 	.word	0x58025480
 8002298:	58025494 	.word	0x58025494
 800229c:	fffe000f 	.word	0xfffe000f
 80022a0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	68d2      	ldr	r2, [r2, #12]
 80022a6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80022a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80022b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80022b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80022c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80022c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80022d0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	461a      	mov	r2, r3
 80022e6:	4b6e      	ldr	r3, [pc, #440]	@ (80024a0 <HAL_DMA_Init+0x650>)
 80022e8:	4413      	add	r3, r2
 80022ea:	4a6e      	ldr	r2, [pc, #440]	@ (80024a4 <HAL_DMA_Init+0x654>)
 80022ec:	fba2 2303 	umull	r2, r3, r2, r3
 80022f0:	091b      	lsrs	r3, r3, #4
 80022f2:	009a      	lsls	r2, r3, #2
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f001 fc45 	bl	8003b88 <DMA_CalcBaseAndBitshift>
 80022fe:	4603      	mov	r3, r0
 8002300:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002306:	f003 031f 	and.w	r3, r3, #31
 800230a:	2201      	movs	r2, #1
 800230c:	409a      	lsls	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	e008      	b.n	8002326 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2240      	movs	r2, #64	@ 0x40
 8002318:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2203      	movs	r2, #3
 800231e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e0b7      	b.n	8002496 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a5f      	ldr	r2, [pc, #380]	@ (80024a8 <HAL_DMA_Init+0x658>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d072      	beq.n	8002416 <HAL_DMA_Init+0x5c6>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a5d      	ldr	r2, [pc, #372]	@ (80024ac <HAL_DMA_Init+0x65c>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d06d      	beq.n	8002416 <HAL_DMA_Init+0x5c6>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a5c      	ldr	r2, [pc, #368]	@ (80024b0 <HAL_DMA_Init+0x660>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d068      	beq.n	8002416 <HAL_DMA_Init+0x5c6>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a5a      	ldr	r2, [pc, #360]	@ (80024b4 <HAL_DMA_Init+0x664>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d063      	beq.n	8002416 <HAL_DMA_Init+0x5c6>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a59      	ldr	r2, [pc, #356]	@ (80024b8 <HAL_DMA_Init+0x668>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d05e      	beq.n	8002416 <HAL_DMA_Init+0x5c6>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a57      	ldr	r2, [pc, #348]	@ (80024bc <HAL_DMA_Init+0x66c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d059      	beq.n	8002416 <HAL_DMA_Init+0x5c6>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a56      	ldr	r2, [pc, #344]	@ (80024c0 <HAL_DMA_Init+0x670>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d054      	beq.n	8002416 <HAL_DMA_Init+0x5c6>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a54      	ldr	r2, [pc, #336]	@ (80024c4 <HAL_DMA_Init+0x674>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d04f      	beq.n	8002416 <HAL_DMA_Init+0x5c6>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a53      	ldr	r2, [pc, #332]	@ (80024c8 <HAL_DMA_Init+0x678>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d04a      	beq.n	8002416 <HAL_DMA_Init+0x5c6>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a51      	ldr	r2, [pc, #324]	@ (80024cc <HAL_DMA_Init+0x67c>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d045      	beq.n	8002416 <HAL_DMA_Init+0x5c6>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a50      	ldr	r2, [pc, #320]	@ (80024d0 <HAL_DMA_Init+0x680>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d040      	beq.n	8002416 <HAL_DMA_Init+0x5c6>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a4e      	ldr	r2, [pc, #312]	@ (80024d4 <HAL_DMA_Init+0x684>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d03b      	beq.n	8002416 <HAL_DMA_Init+0x5c6>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a4d      	ldr	r2, [pc, #308]	@ (80024d8 <HAL_DMA_Init+0x688>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d036      	beq.n	8002416 <HAL_DMA_Init+0x5c6>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a4b      	ldr	r2, [pc, #300]	@ (80024dc <HAL_DMA_Init+0x68c>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d031      	beq.n	8002416 <HAL_DMA_Init+0x5c6>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a4a      	ldr	r2, [pc, #296]	@ (80024e0 <HAL_DMA_Init+0x690>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d02c      	beq.n	8002416 <HAL_DMA_Init+0x5c6>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a48      	ldr	r2, [pc, #288]	@ (80024e4 <HAL_DMA_Init+0x694>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d027      	beq.n	8002416 <HAL_DMA_Init+0x5c6>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a47      	ldr	r2, [pc, #284]	@ (80024e8 <HAL_DMA_Init+0x698>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d022      	beq.n	8002416 <HAL_DMA_Init+0x5c6>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a45      	ldr	r2, [pc, #276]	@ (80024ec <HAL_DMA_Init+0x69c>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d01d      	beq.n	8002416 <HAL_DMA_Init+0x5c6>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a44      	ldr	r2, [pc, #272]	@ (80024f0 <HAL_DMA_Init+0x6a0>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d018      	beq.n	8002416 <HAL_DMA_Init+0x5c6>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a42      	ldr	r2, [pc, #264]	@ (80024f4 <HAL_DMA_Init+0x6a4>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d013      	beq.n	8002416 <HAL_DMA_Init+0x5c6>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a41      	ldr	r2, [pc, #260]	@ (80024f8 <HAL_DMA_Init+0x6a8>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d00e      	beq.n	8002416 <HAL_DMA_Init+0x5c6>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a3f      	ldr	r2, [pc, #252]	@ (80024fc <HAL_DMA_Init+0x6ac>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d009      	beq.n	8002416 <HAL_DMA_Init+0x5c6>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a3e      	ldr	r2, [pc, #248]	@ (8002500 <HAL_DMA_Init+0x6b0>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d004      	beq.n	8002416 <HAL_DMA_Init+0x5c6>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a3c      	ldr	r2, [pc, #240]	@ (8002504 <HAL_DMA_Init+0x6b4>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d101      	bne.n	800241a <HAL_DMA_Init+0x5ca>
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <HAL_DMA_Init+0x5cc>
 800241a:	2300      	movs	r3, #0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d032      	beq.n	8002486 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f001 fcdf 	bl	8003de4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	2b80      	cmp	r3, #128	@ 0x80
 800242c:	d102      	bne.n	8002434 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002448:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d010      	beq.n	8002474 <HAL_DMA_Init+0x624>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b08      	cmp	r3, #8
 8002458:	d80c      	bhi.n	8002474 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f001 fd5c 	bl	8003f18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002470:	605a      	str	r2, [r3, #4]
 8002472:	e008      	b.n	8002486 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	a7fdabf8 	.word	0xa7fdabf8
 80024a4:	cccccccd 	.word	0xcccccccd
 80024a8:	40020010 	.word	0x40020010
 80024ac:	40020028 	.word	0x40020028
 80024b0:	40020040 	.word	0x40020040
 80024b4:	40020058 	.word	0x40020058
 80024b8:	40020070 	.word	0x40020070
 80024bc:	40020088 	.word	0x40020088
 80024c0:	400200a0 	.word	0x400200a0
 80024c4:	400200b8 	.word	0x400200b8
 80024c8:	40020410 	.word	0x40020410
 80024cc:	40020428 	.word	0x40020428
 80024d0:	40020440 	.word	0x40020440
 80024d4:	40020458 	.word	0x40020458
 80024d8:	40020470 	.word	0x40020470
 80024dc:	40020488 	.word	0x40020488
 80024e0:	400204a0 	.word	0x400204a0
 80024e4:	400204b8 	.word	0x400204b8
 80024e8:	58025408 	.word	0x58025408
 80024ec:	5802541c 	.word	0x5802541c
 80024f0:	58025430 	.word	0x58025430
 80024f4:	58025444 	.word	0x58025444
 80024f8:	58025458 	.word	0x58025458
 80024fc:	5802546c 	.word	0x5802546c
 8002500:	58025480 	.word	0x58025480
 8002504:	58025494 	.word	0x58025494

08002508 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
 8002514:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002516:	2300      	movs	r3, #0
 8002518:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e226      	b.n	8002972 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800252a:	2b01      	cmp	r3, #1
 800252c:	d101      	bne.n	8002532 <HAL_DMA_Start_IT+0x2a>
 800252e:	2302      	movs	r3, #2
 8002530:	e21f      	b.n	8002972 <HAL_DMA_Start_IT+0x46a>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b01      	cmp	r3, #1
 8002544:	f040 820a 	bne.w	800295c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2202      	movs	r2, #2
 800254c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a68      	ldr	r2, [pc, #416]	@ (80026fc <HAL_DMA_Start_IT+0x1f4>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d04a      	beq.n	80025f6 <HAL_DMA_Start_IT+0xee>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a66      	ldr	r2, [pc, #408]	@ (8002700 <HAL_DMA_Start_IT+0x1f8>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d045      	beq.n	80025f6 <HAL_DMA_Start_IT+0xee>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a65      	ldr	r2, [pc, #404]	@ (8002704 <HAL_DMA_Start_IT+0x1fc>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d040      	beq.n	80025f6 <HAL_DMA_Start_IT+0xee>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a63      	ldr	r2, [pc, #396]	@ (8002708 <HAL_DMA_Start_IT+0x200>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d03b      	beq.n	80025f6 <HAL_DMA_Start_IT+0xee>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a62      	ldr	r2, [pc, #392]	@ (800270c <HAL_DMA_Start_IT+0x204>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d036      	beq.n	80025f6 <HAL_DMA_Start_IT+0xee>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a60      	ldr	r2, [pc, #384]	@ (8002710 <HAL_DMA_Start_IT+0x208>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d031      	beq.n	80025f6 <HAL_DMA_Start_IT+0xee>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a5f      	ldr	r2, [pc, #380]	@ (8002714 <HAL_DMA_Start_IT+0x20c>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d02c      	beq.n	80025f6 <HAL_DMA_Start_IT+0xee>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a5d      	ldr	r2, [pc, #372]	@ (8002718 <HAL_DMA_Start_IT+0x210>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d027      	beq.n	80025f6 <HAL_DMA_Start_IT+0xee>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a5c      	ldr	r2, [pc, #368]	@ (800271c <HAL_DMA_Start_IT+0x214>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d022      	beq.n	80025f6 <HAL_DMA_Start_IT+0xee>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a5a      	ldr	r2, [pc, #360]	@ (8002720 <HAL_DMA_Start_IT+0x218>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d01d      	beq.n	80025f6 <HAL_DMA_Start_IT+0xee>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a59      	ldr	r2, [pc, #356]	@ (8002724 <HAL_DMA_Start_IT+0x21c>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d018      	beq.n	80025f6 <HAL_DMA_Start_IT+0xee>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a57      	ldr	r2, [pc, #348]	@ (8002728 <HAL_DMA_Start_IT+0x220>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d013      	beq.n	80025f6 <HAL_DMA_Start_IT+0xee>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a56      	ldr	r2, [pc, #344]	@ (800272c <HAL_DMA_Start_IT+0x224>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d00e      	beq.n	80025f6 <HAL_DMA_Start_IT+0xee>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a54      	ldr	r2, [pc, #336]	@ (8002730 <HAL_DMA_Start_IT+0x228>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d009      	beq.n	80025f6 <HAL_DMA_Start_IT+0xee>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a53      	ldr	r2, [pc, #332]	@ (8002734 <HAL_DMA_Start_IT+0x22c>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d004      	beq.n	80025f6 <HAL_DMA_Start_IT+0xee>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a51      	ldr	r2, [pc, #324]	@ (8002738 <HAL_DMA_Start_IT+0x230>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d108      	bne.n	8002608 <HAL_DMA_Start_IT+0x100>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 0201 	bic.w	r2, r2, #1
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	e007      	b.n	8002618 <HAL_DMA_Start_IT+0x110>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 0201 	bic.w	r2, r2, #1
 8002616:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	68b9      	ldr	r1, [r7, #8]
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f001 f906 	bl	8003830 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a34      	ldr	r2, [pc, #208]	@ (80026fc <HAL_DMA_Start_IT+0x1f4>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d04a      	beq.n	80026c4 <HAL_DMA_Start_IT+0x1bc>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a33      	ldr	r2, [pc, #204]	@ (8002700 <HAL_DMA_Start_IT+0x1f8>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d045      	beq.n	80026c4 <HAL_DMA_Start_IT+0x1bc>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a31      	ldr	r2, [pc, #196]	@ (8002704 <HAL_DMA_Start_IT+0x1fc>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d040      	beq.n	80026c4 <HAL_DMA_Start_IT+0x1bc>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a30      	ldr	r2, [pc, #192]	@ (8002708 <HAL_DMA_Start_IT+0x200>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d03b      	beq.n	80026c4 <HAL_DMA_Start_IT+0x1bc>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a2e      	ldr	r2, [pc, #184]	@ (800270c <HAL_DMA_Start_IT+0x204>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d036      	beq.n	80026c4 <HAL_DMA_Start_IT+0x1bc>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a2d      	ldr	r2, [pc, #180]	@ (8002710 <HAL_DMA_Start_IT+0x208>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d031      	beq.n	80026c4 <HAL_DMA_Start_IT+0x1bc>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a2b      	ldr	r2, [pc, #172]	@ (8002714 <HAL_DMA_Start_IT+0x20c>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d02c      	beq.n	80026c4 <HAL_DMA_Start_IT+0x1bc>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a2a      	ldr	r2, [pc, #168]	@ (8002718 <HAL_DMA_Start_IT+0x210>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d027      	beq.n	80026c4 <HAL_DMA_Start_IT+0x1bc>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a28      	ldr	r2, [pc, #160]	@ (800271c <HAL_DMA_Start_IT+0x214>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d022      	beq.n	80026c4 <HAL_DMA_Start_IT+0x1bc>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a27      	ldr	r2, [pc, #156]	@ (8002720 <HAL_DMA_Start_IT+0x218>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d01d      	beq.n	80026c4 <HAL_DMA_Start_IT+0x1bc>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a25      	ldr	r2, [pc, #148]	@ (8002724 <HAL_DMA_Start_IT+0x21c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d018      	beq.n	80026c4 <HAL_DMA_Start_IT+0x1bc>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a24      	ldr	r2, [pc, #144]	@ (8002728 <HAL_DMA_Start_IT+0x220>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d013      	beq.n	80026c4 <HAL_DMA_Start_IT+0x1bc>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a22      	ldr	r2, [pc, #136]	@ (800272c <HAL_DMA_Start_IT+0x224>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d00e      	beq.n	80026c4 <HAL_DMA_Start_IT+0x1bc>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a21      	ldr	r2, [pc, #132]	@ (8002730 <HAL_DMA_Start_IT+0x228>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d009      	beq.n	80026c4 <HAL_DMA_Start_IT+0x1bc>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a1f      	ldr	r2, [pc, #124]	@ (8002734 <HAL_DMA_Start_IT+0x22c>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d004      	beq.n	80026c4 <HAL_DMA_Start_IT+0x1bc>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a1e      	ldr	r2, [pc, #120]	@ (8002738 <HAL_DMA_Start_IT+0x230>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d101      	bne.n	80026c8 <HAL_DMA_Start_IT+0x1c0>
 80026c4:	2301      	movs	r3, #1
 80026c6:	e000      	b.n	80026ca <HAL_DMA_Start_IT+0x1c2>
 80026c8:	2300      	movs	r3, #0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d036      	beq.n	800273c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f023 021e 	bic.w	r2, r3, #30
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f042 0216 	orr.w	r2, r2, #22
 80026e0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d03e      	beq.n	8002768 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f042 0208 	orr.w	r2, r2, #8
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	e035      	b.n	8002768 <HAL_DMA_Start_IT+0x260>
 80026fc:	40020010 	.word	0x40020010
 8002700:	40020028 	.word	0x40020028
 8002704:	40020040 	.word	0x40020040
 8002708:	40020058 	.word	0x40020058
 800270c:	40020070 	.word	0x40020070
 8002710:	40020088 	.word	0x40020088
 8002714:	400200a0 	.word	0x400200a0
 8002718:	400200b8 	.word	0x400200b8
 800271c:	40020410 	.word	0x40020410
 8002720:	40020428 	.word	0x40020428
 8002724:	40020440 	.word	0x40020440
 8002728:	40020458 	.word	0x40020458
 800272c:	40020470 	.word	0x40020470
 8002730:	40020488 	.word	0x40020488
 8002734:	400204a0 	.word	0x400204a0
 8002738:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f023 020e 	bic.w	r2, r3, #14
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f042 020a 	orr.w	r2, r2, #10
 800274e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002754:	2b00      	cmp	r3, #0
 8002756:	d007      	beq.n	8002768 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f042 0204 	orr.w	r2, r2, #4
 8002766:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a83      	ldr	r2, [pc, #524]	@ (800297c <HAL_DMA_Start_IT+0x474>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d072      	beq.n	8002858 <HAL_DMA_Start_IT+0x350>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a82      	ldr	r2, [pc, #520]	@ (8002980 <HAL_DMA_Start_IT+0x478>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d06d      	beq.n	8002858 <HAL_DMA_Start_IT+0x350>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a80      	ldr	r2, [pc, #512]	@ (8002984 <HAL_DMA_Start_IT+0x47c>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d068      	beq.n	8002858 <HAL_DMA_Start_IT+0x350>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a7f      	ldr	r2, [pc, #508]	@ (8002988 <HAL_DMA_Start_IT+0x480>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d063      	beq.n	8002858 <HAL_DMA_Start_IT+0x350>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a7d      	ldr	r2, [pc, #500]	@ (800298c <HAL_DMA_Start_IT+0x484>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d05e      	beq.n	8002858 <HAL_DMA_Start_IT+0x350>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a7c      	ldr	r2, [pc, #496]	@ (8002990 <HAL_DMA_Start_IT+0x488>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d059      	beq.n	8002858 <HAL_DMA_Start_IT+0x350>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a7a      	ldr	r2, [pc, #488]	@ (8002994 <HAL_DMA_Start_IT+0x48c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d054      	beq.n	8002858 <HAL_DMA_Start_IT+0x350>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a79      	ldr	r2, [pc, #484]	@ (8002998 <HAL_DMA_Start_IT+0x490>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d04f      	beq.n	8002858 <HAL_DMA_Start_IT+0x350>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a77      	ldr	r2, [pc, #476]	@ (800299c <HAL_DMA_Start_IT+0x494>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d04a      	beq.n	8002858 <HAL_DMA_Start_IT+0x350>
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a76      	ldr	r2, [pc, #472]	@ (80029a0 <HAL_DMA_Start_IT+0x498>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d045      	beq.n	8002858 <HAL_DMA_Start_IT+0x350>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a74      	ldr	r2, [pc, #464]	@ (80029a4 <HAL_DMA_Start_IT+0x49c>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d040      	beq.n	8002858 <HAL_DMA_Start_IT+0x350>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a73      	ldr	r2, [pc, #460]	@ (80029a8 <HAL_DMA_Start_IT+0x4a0>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d03b      	beq.n	8002858 <HAL_DMA_Start_IT+0x350>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a71      	ldr	r2, [pc, #452]	@ (80029ac <HAL_DMA_Start_IT+0x4a4>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d036      	beq.n	8002858 <HAL_DMA_Start_IT+0x350>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a70      	ldr	r2, [pc, #448]	@ (80029b0 <HAL_DMA_Start_IT+0x4a8>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d031      	beq.n	8002858 <HAL_DMA_Start_IT+0x350>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a6e      	ldr	r2, [pc, #440]	@ (80029b4 <HAL_DMA_Start_IT+0x4ac>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d02c      	beq.n	8002858 <HAL_DMA_Start_IT+0x350>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a6d      	ldr	r2, [pc, #436]	@ (80029b8 <HAL_DMA_Start_IT+0x4b0>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d027      	beq.n	8002858 <HAL_DMA_Start_IT+0x350>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a6b      	ldr	r2, [pc, #428]	@ (80029bc <HAL_DMA_Start_IT+0x4b4>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d022      	beq.n	8002858 <HAL_DMA_Start_IT+0x350>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a6a      	ldr	r2, [pc, #424]	@ (80029c0 <HAL_DMA_Start_IT+0x4b8>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d01d      	beq.n	8002858 <HAL_DMA_Start_IT+0x350>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a68      	ldr	r2, [pc, #416]	@ (80029c4 <HAL_DMA_Start_IT+0x4bc>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d018      	beq.n	8002858 <HAL_DMA_Start_IT+0x350>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a67      	ldr	r2, [pc, #412]	@ (80029c8 <HAL_DMA_Start_IT+0x4c0>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d013      	beq.n	8002858 <HAL_DMA_Start_IT+0x350>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a65      	ldr	r2, [pc, #404]	@ (80029cc <HAL_DMA_Start_IT+0x4c4>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d00e      	beq.n	8002858 <HAL_DMA_Start_IT+0x350>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a64      	ldr	r2, [pc, #400]	@ (80029d0 <HAL_DMA_Start_IT+0x4c8>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d009      	beq.n	8002858 <HAL_DMA_Start_IT+0x350>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a62      	ldr	r2, [pc, #392]	@ (80029d4 <HAL_DMA_Start_IT+0x4cc>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d004      	beq.n	8002858 <HAL_DMA_Start_IT+0x350>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a61      	ldr	r2, [pc, #388]	@ (80029d8 <HAL_DMA_Start_IT+0x4d0>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d101      	bne.n	800285c <HAL_DMA_Start_IT+0x354>
 8002858:	2301      	movs	r3, #1
 800285a:	e000      	b.n	800285e <HAL_DMA_Start_IT+0x356>
 800285c:	2300      	movs	r3, #0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d01a      	beq.n	8002898 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d007      	beq.n	8002880 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800287a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800287e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002884:	2b00      	cmp	r3, #0
 8002886:	d007      	beq.n	8002898 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002892:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002896:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a37      	ldr	r2, [pc, #220]	@ (800297c <HAL_DMA_Start_IT+0x474>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d04a      	beq.n	8002938 <HAL_DMA_Start_IT+0x430>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a36      	ldr	r2, [pc, #216]	@ (8002980 <HAL_DMA_Start_IT+0x478>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d045      	beq.n	8002938 <HAL_DMA_Start_IT+0x430>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a34      	ldr	r2, [pc, #208]	@ (8002984 <HAL_DMA_Start_IT+0x47c>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d040      	beq.n	8002938 <HAL_DMA_Start_IT+0x430>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a33      	ldr	r2, [pc, #204]	@ (8002988 <HAL_DMA_Start_IT+0x480>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d03b      	beq.n	8002938 <HAL_DMA_Start_IT+0x430>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a31      	ldr	r2, [pc, #196]	@ (800298c <HAL_DMA_Start_IT+0x484>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d036      	beq.n	8002938 <HAL_DMA_Start_IT+0x430>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a30      	ldr	r2, [pc, #192]	@ (8002990 <HAL_DMA_Start_IT+0x488>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d031      	beq.n	8002938 <HAL_DMA_Start_IT+0x430>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a2e      	ldr	r2, [pc, #184]	@ (8002994 <HAL_DMA_Start_IT+0x48c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d02c      	beq.n	8002938 <HAL_DMA_Start_IT+0x430>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a2d      	ldr	r2, [pc, #180]	@ (8002998 <HAL_DMA_Start_IT+0x490>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d027      	beq.n	8002938 <HAL_DMA_Start_IT+0x430>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a2b      	ldr	r2, [pc, #172]	@ (800299c <HAL_DMA_Start_IT+0x494>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d022      	beq.n	8002938 <HAL_DMA_Start_IT+0x430>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a2a      	ldr	r2, [pc, #168]	@ (80029a0 <HAL_DMA_Start_IT+0x498>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d01d      	beq.n	8002938 <HAL_DMA_Start_IT+0x430>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a28      	ldr	r2, [pc, #160]	@ (80029a4 <HAL_DMA_Start_IT+0x49c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d018      	beq.n	8002938 <HAL_DMA_Start_IT+0x430>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a27      	ldr	r2, [pc, #156]	@ (80029a8 <HAL_DMA_Start_IT+0x4a0>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d013      	beq.n	8002938 <HAL_DMA_Start_IT+0x430>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a25      	ldr	r2, [pc, #148]	@ (80029ac <HAL_DMA_Start_IT+0x4a4>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d00e      	beq.n	8002938 <HAL_DMA_Start_IT+0x430>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a24      	ldr	r2, [pc, #144]	@ (80029b0 <HAL_DMA_Start_IT+0x4a8>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d009      	beq.n	8002938 <HAL_DMA_Start_IT+0x430>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a22      	ldr	r2, [pc, #136]	@ (80029b4 <HAL_DMA_Start_IT+0x4ac>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d004      	beq.n	8002938 <HAL_DMA_Start_IT+0x430>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a21      	ldr	r2, [pc, #132]	@ (80029b8 <HAL_DMA_Start_IT+0x4b0>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d108      	bne.n	800294a <HAL_DMA_Start_IT+0x442>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f042 0201 	orr.w	r2, r2, #1
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	e012      	b.n	8002970 <HAL_DMA_Start_IT+0x468>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f042 0201 	orr.w	r2, r2, #1
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	e009      	b.n	8002970 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002962:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002970:	7dfb      	ldrb	r3, [r7, #23]
}
 8002972:	4618      	mov	r0, r3
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40020010 	.word	0x40020010
 8002980:	40020028 	.word	0x40020028
 8002984:	40020040 	.word	0x40020040
 8002988:	40020058 	.word	0x40020058
 800298c:	40020070 	.word	0x40020070
 8002990:	40020088 	.word	0x40020088
 8002994:	400200a0 	.word	0x400200a0
 8002998:	400200b8 	.word	0x400200b8
 800299c:	40020410 	.word	0x40020410
 80029a0:	40020428 	.word	0x40020428
 80029a4:	40020440 	.word	0x40020440
 80029a8:	40020458 	.word	0x40020458
 80029ac:	40020470 	.word	0x40020470
 80029b0:	40020488 	.word	0x40020488
 80029b4:	400204a0 	.word	0x400204a0
 80029b8:	400204b8 	.word	0x400204b8
 80029bc:	58025408 	.word	0x58025408
 80029c0:	5802541c 	.word	0x5802541c
 80029c4:	58025430 	.word	0x58025430
 80029c8:	58025444 	.word	0x58025444
 80029cc:	58025458 	.word	0x58025458
 80029d0:	5802546c 	.word	0x5802546c
 80029d4:	58025480 	.word	0x58025480
 80029d8:	58025494 	.word	0x58025494

080029dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b08a      	sub	sp, #40	@ 0x28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80029e4:	2300      	movs	r3, #0
 80029e6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80029e8:	4b67      	ldr	r3, [pc, #412]	@ (8002b88 <HAL_DMA_IRQHandler+0x1ac>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a67      	ldr	r2, [pc, #412]	@ (8002b8c <HAL_DMA_IRQHandler+0x1b0>)
 80029ee:	fba2 2303 	umull	r2, r3, r2, r3
 80029f2:	0a9b      	lsrs	r3, r3, #10
 80029f4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029fa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a00:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002a02:	6a3b      	ldr	r3, [r7, #32]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a5f      	ldr	r2, [pc, #380]	@ (8002b90 <HAL_DMA_IRQHandler+0x1b4>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d04a      	beq.n	8002aae <HAL_DMA_IRQHandler+0xd2>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a5d      	ldr	r2, [pc, #372]	@ (8002b94 <HAL_DMA_IRQHandler+0x1b8>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d045      	beq.n	8002aae <HAL_DMA_IRQHandler+0xd2>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a5c      	ldr	r2, [pc, #368]	@ (8002b98 <HAL_DMA_IRQHandler+0x1bc>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d040      	beq.n	8002aae <HAL_DMA_IRQHandler+0xd2>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a5a      	ldr	r2, [pc, #360]	@ (8002b9c <HAL_DMA_IRQHandler+0x1c0>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d03b      	beq.n	8002aae <HAL_DMA_IRQHandler+0xd2>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a59      	ldr	r2, [pc, #356]	@ (8002ba0 <HAL_DMA_IRQHandler+0x1c4>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d036      	beq.n	8002aae <HAL_DMA_IRQHandler+0xd2>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a57      	ldr	r2, [pc, #348]	@ (8002ba4 <HAL_DMA_IRQHandler+0x1c8>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d031      	beq.n	8002aae <HAL_DMA_IRQHandler+0xd2>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a56      	ldr	r2, [pc, #344]	@ (8002ba8 <HAL_DMA_IRQHandler+0x1cc>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d02c      	beq.n	8002aae <HAL_DMA_IRQHandler+0xd2>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a54      	ldr	r2, [pc, #336]	@ (8002bac <HAL_DMA_IRQHandler+0x1d0>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d027      	beq.n	8002aae <HAL_DMA_IRQHandler+0xd2>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a53      	ldr	r2, [pc, #332]	@ (8002bb0 <HAL_DMA_IRQHandler+0x1d4>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d022      	beq.n	8002aae <HAL_DMA_IRQHandler+0xd2>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a51      	ldr	r2, [pc, #324]	@ (8002bb4 <HAL_DMA_IRQHandler+0x1d8>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d01d      	beq.n	8002aae <HAL_DMA_IRQHandler+0xd2>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a50      	ldr	r2, [pc, #320]	@ (8002bb8 <HAL_DMA_IRQHandler+0x1dc>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d018      	beq.n	8002aae <HAL_DMA_IRQHandler+0xd2>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a4e      	ldr	r2, [pc, #312]	@ (8002bbc <HAL_DMA_IRQHandler+0x1e0>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d013      	beq.n	8002aae <HAL_DMA_IRQHandler+0xd2>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a4d      	ldr	r2, [pc, #308]	@ (8002bc0 <HAL_DMA_IRQHandler+0x1e4>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d00e      	beq.n	8002aae <HAL_DMA_IRQHandler+0xd2>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a4b      	ldr	r2, [pc, #300]	@ (8002bc4 <HAL_DMA_IRQHandler+0x1e8>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d009      	beq.n	8002aae <HAL_DMA_IRQHandler+0xd2>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a4a      	ldr	r2, [pc, #296]	@ (8002bc8 <HAL_DMA_IRQHandler+0x1ec>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d004      	beq.n	8002aae <HAL_DMA_IRQHandler+0xd2>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a48      	ldr	r2, [pc, #288]	@ (8002bcc <HAL_DMA_IRQHandler+0x1f0>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d101      	bne.n	8002ab2 <HAL_DMA_IRQHandler+0xd6>
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e000      	b.n	8002ab4 <HAL_DMA_IRQHandler+0xd8>
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 842b 	beq.w	8003310 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002abe:	f003 031f 	and.w	r3, r3, #31
 8002ac2:	2208      	movs	r2, #8
 8002ac4:	409a      	lsls	r2, r3
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 80a2 	beq.w	8002c14 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a2e      	ldr	r2, [pc, #184]	@ (8002b90 <HAL_DMA_IRQHandler+0x1b4>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d04a      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x194>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a2d      	ldr	r2, [pc, #180]	@ (8002b94 <HAL_DMA_IRQHandler+0x1b8>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d045      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x194>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a2b      	ldr	r2, [pc, #172]	@ (8002b98 <HAL_DMA_IRQHandler+0x1bc>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d040      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x194>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a2a      	ldr	r2, [pc, #168]	@ (8002b9c <HAL_DMA_IRQHandler+0x1c0>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d03b      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x194>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a28      	ldr	r2, [pc, #160]	@ (8002ba0 <HAL_DMA_IRQHandler+0x1c4>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d036      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x194>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a27      	ldr	r2, [pc, #156]	@ (8002ba4 <HAL_DMA_IRQHandler+0x1c8>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d031      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x194>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a25      	ldr	r2, [pc, #148]	@ (8002ba8 <HAL_DMA_IRQHandler+0x1cc>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d02c      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x194>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a24      	ldr	r2, [pc, #144]	@ (8002bac <HAL_DMA_IRQHandler+0x1d0>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d027      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x194>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a22      	ldr	r2, [pc, #136]	@ (8002bb0 <HAL_DMA_IRQHandler+0x1d4>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d022      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x194>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a21      	ldr	r2, [pc, #132]	@ (8002bb4 <HAL_DMA_IRQHandler+0x1d8>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d01d      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x194>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a1f      	ldr	r2, [pc, #124]	@ (8002bb8 <HAL_DMA_IRQHandler+0x1dc>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d018      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x194>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a1e      	ldr	r2, [pc, #120]	@ (8002bbc <HAL_DMA_IRQHandler+0x1e0>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d013      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x194>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a1c      	ldr	r2, [pc, #112]	@ (8002bc0 <HAL_DMA_IRQHandler+0x1e4>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d00e      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x194>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a1b      	ldr	r2, [pc, #108]	@ (8002bc4 <HAL_DMA_IRQHandler+0x1e8>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d009      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x194>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a19      	ldr	r2, [pc, #100]	@ (8002bc8 <HAL_DMA_IRQHandler+0x1ec>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d004      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x194>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a18      	ldr	r2, [pc, #96]	@ (8002bcc <HAL_DMA_IRQHandler+0x1f0>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d12f      	bne.n	8002bd0 <HAL_DMA_IRQHandler+0x1f4>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0304 	and.w	r3, r3, #4
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	bf14      	ite	ne
 8002b7e:	2301      	movne	r3, #1
 8002b80:	2300      	moveq	r3, #0
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	e02e      	b.n	8002be4 <HAL_DMA_IRQHandler+0x208>
 8002b86:	bf00      	nop
 8002b88:	24000000 	.word	0x24000000
 8002b8c:	1b4e81b5 	.word	0x1b4e81b5
 8002b90:	40020010 	.word	0x40020010
 8002b94:	40020028 	.word	0x40020028
 8002b98:	40020040 	.word	0x40020040
 8002b9c:	40020058 	.word	0x40020058
 8002ba0:	40020070 	.word	0x40020070
 8002ba4:	40020088 	.word	0x40020088
 8002ba8:	400200a0 	.word	0x400200a0
 8002bac:	400200b8 	.word	0x400200b8
 8002bb0:	40020410 	.word	0x40020410
 8002bb4:	40020428 	.word	0x40020428
 8002bb8:	40020440 	.word	0x40020440
 8002bbc:	40020458 	.word	0x40020458
 8002bc0:	40020470 	.word	0x40020470
 8002bc4:	40020488 	.word	0x40020488
 8002bc8:	400204a0 	.word	0x400204a0
 8002bcc:	400204b8 	.word	0x400204b8
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	bf14      	ite	ne
 8002bde:	2301      	movne	r3, #1
 8002be0:	2300      	moveq	r3, #0
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d015      	beq.n	8002c14 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 0204 	bic.w	r2, r2, #4
 8002bf6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bfc:	f003 031f 	and.w	r3, r3, #31
 8002c00:	2208      	movs	r2, #8
 8002c02:	409a      	lsls	r2, r3
 8002c04:	6a3b      	ldr	r3, [r7, #32]
 8002c06:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c0c:	f043 0201 	orr.w	r2, r3, #1
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c18:	f003 031f 	and.w	r3, r3, #31
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d06e      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a69      	ldr	r2, [pc, #420]	@ (8002dd4 <HAL_DMA_IRQHandler+0x3f8>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d04a      	beq.n	8002cca <HAL_DMA_IRQHandler+0x2ee>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a67      	ldr	r2, [pc, #412]	@ (8002dd8 <HAL_DMA_IRQHandler+0x3fc>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d045      	beq.n	8002cca <HAL_DMA_IRQHandler+0x2ee>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a66      	ldr	r2, [pc, #408]	@ (8002ddc <HAL_DMA_IRQHandler+0x400>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d040      	beq.n	8002cca <HAL_DMA_IRQHandler+0x2ee>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a64      	ldr	r2, [pc, #400]	@ (8002de0 <HAL_DMA_IRQHandler+0x404>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d03b      	beq.n	8002cca <HAL_DMA_IRQHandler+0x2ee>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a63      	ldr	r2, [pc, #396]	@ (8002de4 <HAL_DMA_IRQHandler+0x408>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d036      	beq.n	8002cca <HAL_DMA_IRQHandler+0x2ee>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a61      	ldr	r2, [pc, #388]	@ (8002de8 <HAL_DMA_IRQHandler+0x40c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d031      	beq.n	8002cca <HAL_DMA_IRQHandler+0x2ee>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a60      	ldr	r2, [pc, #384]	@ (8002dec <HAL_DMA_IRQHandler+0x410>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d02c      	beq.n	8002cca <HAL_DMA_IRQHandler+0x2ee>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a5e      	ldr	r2, [pc, #376]	@ (8002df0 <HAL_DMA_IRQHandler+0x414>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d027      	beq.n	8002cca <HAL_DMA_IRQHandler+0x2ee>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a5d      	ldr	r2, [pc, #372]	@ (8002df4 <HAL_DMA_IRQHandler+0x418>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d022      	beq.n	8002cca <HAL_DMA_IRQHandler+0x2ee>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a5b      	ldr	r2, [pc, #364]	@ (8002df8 <HAL_DMA_IRQHandler+0x41c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d01d      	beq.n	8002cca <HAL_DMA_IRQHandler+0x2ee>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a5a      	ldr	r2, [pc, #360]	@ (8002dfc <HAL_DMA_IRQHandler+0x420>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d018      	beq.n	8002cca <HAL_DMA_IRQHandler+0x2ee>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a58      	ldr	r2, [pc, #352]	@ (8002e00 <HAL_DMA_IRQHandler+0x424>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d013      	beq.n	8002cca <HAL_DMA_IRQHandler+0x2ee>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a57      	ldr	r2, [pc, #348]	@ (8002e04 <HAL_DMA_IRQHandler+0x428>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d00e      	beq.n	8002cca <HAL_DMA_IRQHandler+0x2ee>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a55      	ldr	r2, [pc, #340]	@ (8002e08 <HAL_DMA_IRQHandler+0x42c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d009      	beq.n	8002cca <HAL_DMA_IRQHandler+0x2ee>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a54      	ldr	r2, [pc, #336]	@ (8002e0c <HAL_DMA_IRQHandler+0x430>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d004      	beq.n	8002cca <HAL_DMA_IRQHandler+0x2ee>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a52      	ldr	r2, [pc, #328]	@ (8002e10 <HAL_DMA_IRQHandler+0x434>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d10a      	bne.n	8002ce0 <HAL_DMA_IRQHandler+0x304>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	bf14      	ite	ne
 8002cd8:	2301      	movne	r3, #1
 8002cda:	2300      	moveq	r3, #0
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	e003      	b.n	8002ce8 <HAL_DMA_IRQHandler+0x30c>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00d      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf0:	f003 031f 	and.w	r3, r3, #31
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	409a      	lsls	r2, r3
 8002cf8:	6a3b      	ldr	r3, [r7, #32]
 8002cfa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d00:	f043 0202 	orr.w	r2, r3, #2
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d0c:	f003 031f 	and.w	r3, r3, #31
 8002d10:	2204      	movs	r2, #4
 8002d12:	409a      	lsls	r2, r3
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f000 808f 	beq.w	8002e3c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a2c      	ldr	r2, [pc, #176]	@ (8002dd4 <HAL_DMA_IRQHandler+0x3f8>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d04a      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x3e2>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a2a      	ldr	r2, [pc, #168]	@ (8002dd8 <HAL_DMA_IRQHandler+0x3fc>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d045      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x3e2>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a29      	ldr	r2, [pc, #164]	@ (8002ddc <HAL_DMA_IRQHandler+0x400>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d040      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x3e2>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a27      	ldr	r2, [pc, #156]	@ (8002de0 <HAL_DMA_IRQHandler+0x404>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d03b      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x3e2>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a26      	ldr	r2, [pc, #152]	@ (8002de4 <HAL_DMA_IRQHandler+0x408>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d036      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x3e2>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a24      	ldr	r2, [pc, #144]	@ (8002de8 <HAL_DMA_IRQHandler+0x40c>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d031      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x3e2>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a23      	ldr	r2, [pc, #140]	@ (8002dec <HAL_DMA_IRQHandler+0x410>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d02c      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x3e2>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a21      	ldr	r2, [pc, #132]	@ (8002df0 <HAL_DMA_IRQHandler+0x414>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d027      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x3e2>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a20      	ldr	r2, [pc, #128]	@ (8002df4 <HAL_DMA_IRQHandler+0x418>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d022      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x3e2>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a1e      	ldr	r2, [pc, #120]	@ (8002df8 <HAL_DMA_IRQHandler+0x41c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d01d      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x3e2>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a1d      	ldr	r2, [pc, #116]	@ (8002dfc <HAL_DMA_IRQHandler+0x420>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d018      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x3e2>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a1b      	ldr	r2, [pc, #108]	@ (8002e00 <HAL_DMA_IRQHandler+0x424>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d013      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x3e2>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a1a      	ldr	r2, [pc, #104]	@ (8002e04 <HAL_DMA_IRQHandler+0x428>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d00e      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x3e2>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a18      	ldr	r2, [pc, #96]	@ (8002e08 <HAL_DMA_IRQHandler+0x42c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d009      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x3e2>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a17      	ldr	r2, [pc, #92]	@ (8002e0c <HAL_DMA_IRQHandler+0x430>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d004      	beq.n	8002dbe <HAL_DMA_IRQHandler+0x3e2>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a15      	ldr	r2, [pc, #84]	@ (8002e10 <HAL_DMA_IRQHandler+0x434>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d12a      	bne.n	8002e14 <HAL_DMA_IRQHandler+0x438>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	bf14      	ite	ne
 8002dcc:	2301      	movne	r3, #1
 8002dce:	2300      	moveq	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	e023      	b.n	8002e1c <HAL_DMA_IRQHandler+0x440>
 8002dd4:	40020010 	.word	0x40020010
 8002dd8:	40020028 	.word	0x40020028
 8002ddc:	40020040 	.word	0x40020040
 8002de0:	40020058 	.word	0x40020058
 8002de4:	40020070 	.word	0x40020070
 8002de8:	40020088 	.word	0x40020088
 8002dec:	400200a0 	.word	0x400200a0
 8002df0:	400200b8 	.word	0x400200b8
 8002df4:	40020410 	.word	0x40020410
 8002df8:	40020428 	.word	0x40020428
 8002dfc:	40020440 	.word	0x40020440
 8002e00:	40020458 	.word	0x40020458
 8002e04:	40020470 	.word	0x40020470
 8002e08:	40020488 	.word	0x40020488
 8002e0c:	400204a0 	.word	0x400204a0
 8002e10:	400204b8 	.word	0x400204b8
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00d      	beq.n	8002e3c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e24:	f003 031f 	and.w	r3, r3, #31
 8002e28:	2204      	movs	r2, #4
 8002e2a:	409a      	lsls	r2, r3
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e34:	f043 0204 	orr.w	r2, r3, #4
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e40:	f003 031f 	and.w	r3, r3, #31
 8002e44:	2210      	movs	r2, #16
 8002e46:	409a      	lsls	r2, r3
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 80a6 	beq.w	8002f9e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a85      	ldr	r2, [pc, #532]	@ (800306c <HAL_DMA_IRQHandler+0x690>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d04a      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0x516>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a83      	ldr	r2, [pc, #524]	@ (8003070 <HAL_DMA_IRQHandler+0x694>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d045      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0x516>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a82      	ldr	r2, [pc, #520]	@ (8003074 <HAL_DMA_IRQHandler+0x698>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d040      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0x516>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a80      	ldr	r2, [pc, #512]	@ (8003078 <HAL_DMA_IRQHandler+0x69c>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d03b      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0x516>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a7f      	ldr	r2, [pc, #508]	@ (800307c <HAL_DMA_IRQHandler+0x6a0>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d036      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0x516>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a7d      	ldr	r2, [pc, #500]	@ (8003080 <HAL_DMA_IRQHandler+0x6a4>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d031      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0x516>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a7c      	ldr	r2, [pc, #496]	@ (8003084 <HAL_DMA_IRQHandler+0x6a8>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d02c      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0x516>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a7a      	ldr	r2, [pc, #488]	@ (8003088 <HAL_DMA_IRQHandler+0x6ac>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d027      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0x516>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a79      	ldr	r2, [pc, #484]	@ (800308c <HAL_DMA_IRQHandler+0x6b0>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d022      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0x516>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a77      	ldr	r2, [pc, #476]	@ (8003090 <HAL_DMA_IRQHandler+0x6b4>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d01d      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0x516>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a76      	ldr	r2, [pc, #472]	@ (8003094 <HAL_DMA_IRQHandler+0x6b8>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d018      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0x516>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a74      	ldr	r2, [pc, #464]	@ (8003098 <HAL_DMA_IRQHandler+0x6bc>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d013      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0x516>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a73      	ldr	r2, [pc, #460]	@ (800309c <HAL_DMA_IRQHandler+0x6c0>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d00e      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0x516>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a71      	ldr	r2, [pc, #452]	@ (80030a0 <HAL_DMA_IRQHandler+0x6c4>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d009      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0x516>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a70      	ldr	r2, [pc, #448]	@ (80030a4 <HAL_DMA_IRQHandler+0x6c8>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d004      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0x516>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a6e      	ldr	r2, [pc, #440]	@ (80030a8 <HAL_DMA_IRQHandler+0x6cc>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d10a      	bne.n	8002f08 <HAL_DMA_IRQHandler+0x52c>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0308 	and.w	r3, r3, #8
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	bf14      	ite	ne
 8002f00:	2301      	movne	r3, #1
 8002f02:	2300      	moveq	r3, #0
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	e009      	b.n	8002f1c <HAL_DMA_IRQHandler+0x540>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0304 	and.w	r3, r3, #4
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	bf14      	ite	ne
 8002f16:	2301      	movne	r3, #1
 8002f18:	2300      	moveq	r3, #0
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d03e      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f24:	f003 031f 	and.w	r3, r3, #31
 8002f28:	2210      	movs	r2, #16
 8002f2a:	409a      	lsls	r2, r3
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d018      	beq.n	8002f70 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d108      	bne.n	8002f5e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d024      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	4798      	blx	r3
 8002f5c:	e01f      	b.n	8002f9e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d01b      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	4798      	blx	r3
 8002f6e:	e016      	b.n	8002f9e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d107      	bne.n	8002f8e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 0208 	bic.w	r2, r2, #8
 8002f8c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa2:	f003 031f 	and.w	r3, r3, #31
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	409a      	lsls	r2, r3
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	4013      	ands	r3, r2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 8110 	beq.w	80031d4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a2c      	ldr	r2, [pc, #176]	@ (800306c <HAL_DMA_IRQHandler+0x690>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d04a      	beq.n	8003054 <HAL_DMA_IRQHandler+0x678>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a2b      	ldr	r2, [pc, #172]	@ (8003070 <HAL_DMA_IRQHandler+0x694>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d045      	beq.n	8003054 <HAL_DMA_IRQHandler+0x678>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a29      	ldr	r2, [pc, #164]	@ (8003074 <HAL_DMA_IRQHandler+0x698>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d040      	beq.n	8003054 <HAL_DMA_IRQHandler+0x678>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a28      	ldr	r2, [pc, #160]	@ (8003078 <HAL_DMA_IRQHandler+0x69c>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d03b      	beq.n	8003054 <HAL_DMA_IRQHandler+0x678>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a26      	ldr	r2, [pc, #152]	@ (800307c <HAL_DMA_IRQHandler+0x6a0>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d036      	beq.n	8003054 <HAL_DMA_IRQHandler+0x678>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a25      	ldr	r2, [pc, #148]	@ (8003080 <HAL_DMA_IRQHandler+0x6a4>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d031      	beq.n	8003054 <HAL_DMA_IRQHandler+0x678>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a23      	ldr	r2, [pc, #140]	@ (8003084 <HAL_DMA_IRQHandler+0x6a8>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d02c      	beq.n	8003054 <HAL_DMA_IRQHandler+0x678>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a22      	ldr	r2, [pc, #136]	@ (8003088 <HAL_DMA_IRQHandler+0x6ac>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d027      	beq.n	8003054 <HAL_DMA_IRQHandler+0x678>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a20      	ldr	r2, [pc, #128]	@ (800308c <HAL_DMA_IRQHandler+0x6b0>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d022      	beq.n	8003054 <HAL_DMA_IRQHandler+0x678>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a1f      	ldr	r2, [pc, #124]	@ (8003090 <HAL_DMA_IRQHandler+0x6b4>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d01d      	beq.n	8003054 <HAL_DMA_IRQHandler+0x678>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a1d      	ldr	r2, [pc, #116]	@ (8003094 <HAL_DMA_IRQHandler+0x6b8>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d018      	beq.n	8003054 <HAL_DMA_IRQHandler+0x678>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a1c      	ldr	r2, [pc, #112]	@ (8003098 <HAL_DMA_IRQHandler+0x6bc>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d013      	beq.n	8003054 <HAL_DMA_IRQHandler+0x678>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a1a      	ldr	r2, [pc, #104]	@ (800309c <HAL_DMA_IRQHandler+0x6c0>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d00e      	beq.n	8003054 <HAL_DMA_IRQHandler+0x678>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a19      	ldr	r2, [pc, #100]	@ (80030a0 <HAL_DMA_IRQHandler+0x6c4>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d009      	beq.n	8003054 <HAL_DMA_IRQHandler+0x678>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a17      	ldr	r2, [pc, #92]	@ (80030a4 <HAL_DMA_IRQHandler+0x6c8>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d004      	beq.n	8003054 <HAL_DMA_IRQHandler+0x678>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a16      	ldr	r2, [pc, #88]	@ (80030a8 <HAL_DMA_IRQHandler+0x6cc>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d12b      	bne.n	80030ac <HAL_DMA_IRQHandler+0x6d0>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0310 	and.w	r3, r3, #16
 800305e:	2b00      	cmp	r3, #0
 8003060:	bf14      	ite	ne
 8003062:	2301      	movne	r3, #1
 8003064:	2300      	moveq	r3, #0
 8003066:	b2db      	uxtb	r3, r3
 8003068:	e02a      	b.n	80030c0 <HAL_DMA_IRQHandler+0x6e4>
 800306a:	bf00      	nop
 800306c:	40020010 	.word	0x40020010
 8003070:	40020028 	.word	0x40020028
 8003074:	40020040 	.word	0x40020040
 8003078:	40020058 	.word	0x40020058
 800307c:	40020070 	.word	0x40020070
 8003080:	40020088 	.word	0x40020088
 8003084:	400200a0 	.word	0x400200a0
 8003088:	400200b8 	.word	0x400200b8
 800308c:	40020410 	.word	0x40020410
 8003090:	40020428 	.word	0x40020428
 8003094:	40020440 	.word	0x40020440
 8003098:	40020458 	.word	0x40020458
 800309c:	40020470 	.word	0x40020470
 80030a0:	40020488 	.word	0x40020488
 80030a4:	400204a0 	.word	0x400204a0
 80030a8:	400204b8 	.word	0x400204b8
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	bf14      	ite	ne
 80030ba:	2301      	movne	r3, #1
 80030bc:	2300      	moveq	r3, #0
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 8087 	beq.w	80031d4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ca:	f003 031f 	and.w	r3, r3, #31
 80030ce:	2220      	movs	r2, #32
 80030d0:	409a      	lsls	r2, r3
 80030d2:	6a3b      	ldr	r3, [r7, #32]
 80030d4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d139      	bne.n	8003156 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 0216 	bic.w	r2, r2, #22
 80030f0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	695a      	ldr	r2, [r3, #20]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003100:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003106:	2b00      	cmp	r3, #0
 8003108:	d103      	bne.n	8003112 <HAL_DMA_IRQHandler+0x736>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800310e:	2b00      	cmp	r3, #0
 8003110:	d007      	beq.n	8003122 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f022 0208 	bic.w	r2, r2, #8
 8003120:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003126:	f003 031f 	and.w	r3, r3, #31
 800312a:	223f      	movs	r2, #63	@ 0x3f
 800312c:	409a      	lsls	r2, r3
 800312e:	6a3b      	ldr	r3, [r7, #32]
 8003130:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 834a 	beq.w	80037e0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	4798      	blx	r3
          }
          return;
 8003154:	e344      	b.n	80037e0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d018      	beq.n	8003196 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d108      	bne.n	8003184 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003176:	2b00      	cmp	r3, #0
 8003178:	d02c      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	4798      	blx	r3
 8003182:	e027      	b.n	80031d4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003188:	2b00      	cmp	r3, #0
 800318a:	d023      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	4798      	blx	r3
 8003194:	e01e      	b.n	80031d4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10f      	bne.n	80031c4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0210 	bic.w	r2, r2, #16
 80031b2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d003      	beq.n	80031d4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 8306 	beq.w	80037ea <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 8088 	beq.w	80032fc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2204      	movs	r2, #4
 80031f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a7a      	ldr	r2, [pc, #488]	@ (80033e4 <HAL_DMA_IRQHandler+0xa08>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d04a      	beq.n	8003294 <HAL_DMA_IRQHandler+0x8b8>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a79      	ldr	r2, [pc, #484]	@ (80033e8 <HAL_DMA_IRQHandler+0xa0c>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d045      	beq.n	8003294 <HAL_DMA_IRQHandler+0x8b8>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a77      	ldr	r2, [pc, #476]	@ (80033ec <HAL_DMA_IRQHandler+0xa10>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d040      	beq.n	8003294 <HAL_DMA_IRQHandler+0x8b8>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a76      	ldr	r2, [pc, #472]	@ (80033f0 <HAL_DMA_IRQHandler+0xa14>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d03b      	beq.n	8003294 <HAL_DMA_IRQHandler+0x8b8>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a74      	ldr	r2, [pc, #464]	@ (80033f4 <HAL_DMA_IRQHandler+0xa18>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d036      	beq.n	8003294 <HAL_DMA_IRQHandler+0x8b8>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a73      	ldr	r2, [pc, #460]	@ (80033f8 <HAL_DMA_IRQHandler+0xa1c>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d031      	beq.n	8003294 <HAL_DMA_IRQHandler+0x8b8>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a71      	ldr	r2, [pc, #452]	@ (80033fc <HAL_DMA_IRQHandler+0xa20>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d02c      	beq.n	8003294 <HAL_DMA_IRQHandler+0x8b8>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a70      	ldr	r2, [pc, #448]	@ (8003400 <HAL_DMA_IRQHandler+0xa24>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d027      	beq.n	8003294 <HAL_DMA_IRQHandler+0x8b8>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a6e      	ldr	r2, [pc, #440]	@ (8003404 <HAL_DMA_IRQHandler+0xa28>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d022      	beq.n	8003294 <HAL_DMA_IRQHandler+0x8b8>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a6d      	ldr	r2, [pc, #436]	@ (8003408 <HAL_DMA_IRQHandler+0xa2c>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d01d      	beq.n	8003294 <HAL_DMA_IRQHandler+0x8b8>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a6b      	ldr	r2, [pc, #428]	@ (800340c <HAL_DMA_IRQHandler+0xa30>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d018      	beq.n	8003294 <HAL_DMA_IRQHandler+0x8b8>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a6a      	ldr	r2, [pc, #424]	@ (8003410 <HAL_DMA_IRQHandler+0xa34>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d013      	beq.n	8003294 <HAL_DMA_IRQHandler+0x8b8>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a68      	ldr	r2, [pc, #416]	@ (8003414 <HAL_DMA_IRQHandler+0xa38>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d00e      	beq.n	8003294 <HAL_DMA_IRQHandler+0x8b8>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a67      	ldr	r2, [pc, #412]	@ (8003418 <HAL_DMA_IRQHandler+0xa3c>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d009      	beq.n	8003294 <HAL_DMA_IRQHandler+0x8b8>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a65      	ldr	r2, [pc, #404]	@ (800341c <HAL_DMA_IRQHandler+0xa40>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d004      	beq.n	8003294 <HAL_DMA_IRQHandler+0x8b8>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a64      	ldr	r2, [pc, #400]	@ (8003420 <HAL_DMA_IRQHandler+0xa44>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d108      	bne.n	80032a6 <HAL_DMA_IRQHandler+0x8ca>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0201 	bic.w	r2, r2, #1
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	e007      	b.n	80032b6 <HAL_DMA_IRQHandler+0x8da>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0201 	bic.w	r2, r2, #1
 80032b4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	3301      	adds	r3, #1
 80032ba:	60fb      	str	r3, [r7, #12]
 80032bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032be:	429a      	cmp	r2, r3
 80032c0:	d307      	bcc.n	80032d2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1f2      	bne.n	80032b6 <HAL_DMA_IRQHandler+0x8da>
 80032d0:	e000      	b.n	80032d4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80032d2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d004      	beq.n	80032ec <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2203      	movs	r2, #3
 80032e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80032ea:	e003      	b.n	80032f4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 8272 	beq.w	80037ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	4798      	blx	r3
 800330e:	e26c      	b.n	80037ea <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a43      	ldr	r2, [pc, #268]	@ (8003424 <HAL_DMA_IRQHandler+0xa48>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d022      	beq.n	8003360 <HAL_DMA_IRQHandler+0x984>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a42      	ldr	r2, [pc, #264]	@ (8003428 <HAL_DMA_IRQHandler+0xa4c>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d01d      	beq.n	8003360 <HAL_DMA_IRQHandler+0x984>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a40      	ldr	r2, [pc, #256]	@ (800342c <HAL_DMA_IRQHandler+0xa50>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d018      	beq.n	8003360 <HAL_DMA_IRQHandler+0x984>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a3f      	ldr	r2, [pc, #252]	@ (8003430 <HAL_DMA_IRQHandler+0xa54>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d013      	beq.n	8003360 <HAL_DMA_IRQHandler+0x984>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a3d      	ldr	r2, [pc, #244]	@ (8003434 <HAL_DMA_IRQHandler+0xa58>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d00e      	beq.n	8003360 <HAL_DMA_IRQHandler+0x984>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a3c      	ldr	r2, [pc, #240]	@ (8003438 <HAL_DMA_IRQHandler+0xa5c>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d009      	beq.n	8003360 <HAL_DMA_IRQHandler+0x984>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a3a      	ldr	r2, [pc, #232]	@ (800343c <HAL_DMA_IRQHandler+0xa60>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d004      	beq.n	8003360 <HAL_DMA_IRQHandler+0x984>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a39      	ldr	r2, [pc, #228]	@ (8003440 <HAL_DMA_IRQHandler+0xa64>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d101      	bne.n	8003364 <HAL_DMA_IRQHandler+0x988>
 8003360:	2301      	movs	r3, #1
 8003362:	e000      	b.n	8003366 <HAL_DMA_IRQHandler+0x98a>
 8003364:	2300      	movs	r3, #0
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 823f 	beq.w	80037ea <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003378:	f003 031f 	and.w	r3, r3, #31
 800337c:	2204      	movs	r2, #4
 800337e:	409a      	lsls	r2, r3
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	4013      	ands	r3, r2
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 80cd 	beq.w	8003524 <HAL_DMA_IRQHandler+0xb48>
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 80c7 	beq.w	8003524 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800339a:	f003 031f 	and.w	r3, r3, #31
 800339e:	2204      	movs	r2, #4
 80033a0:	409a      	lsls	r2, r3
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d049      	beq.n	8003444 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d109      	bne.n	80033ce <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033be:	2b00      	cmp	r3, #0
 80033c0:	f000 8210 	beq.w	80037e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033cc:	e20a      	b.n	80037e4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 8206 	beq.w	80037e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033e0:	e200      	b.n	80037e4 <HAL_DMA_IRQHandler+0xe08>
 80033e2:	bf00      	nop
 80033e4:	40020010 	.word	0x40020010
 80033e8:	40020028 	.word	0x40020028
 80033ec:	40020040 	.word	0x40020040
 80033f0:	40020058 	.word	0x40020058
 80033f4:	40020070 	.word	0x40020070
 80033f8:	40020088 	.word	0x40020088
 80033fc:	400200a0 	.word	0x400200a0
 8003400:	400200b8 	.word	0x400200b8
 8003404:	40020410 	.word	0x40020410
 8003408:	40020428 	.word	0x40020428
 800340c:	40020440 	.word	0x40020440
 8003410:	40020458 	.word	0x40020458
 8003414:	40020470 	.word	0x40020470
 8003418:	40020488 	.word	0x40020488
 800341c:	400204a0 	.word	0x400204a0
 8003420:	400204b8 	.word	0x400204b8
 8003424:	58025408 	.word	0x58025408
 8003428:	5802541c 	.word	0x5802541c
 800342c:	58025430 	.word	0x58025430
 8003430:	58025444 	.word	0x58025444
 8003434:	58025458 	.word	0x58025458
 8003438:	5802546c 	.word	0x5802546c
 800343c:	58025480 	.word	0x58025480
 8003440:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	f003 0320 	and.w	r3, r3, #32
 800344a:	2b00      	cmp	r3, #0
 800344c:	d160      	bne.n	8003510 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a7f      	ldr	r2, [pc, #508]	@ (8003650 <HAL_DMA_IRQHandler+0xc74>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d04a      	beq.n	80034ee <HAL_DMA_IRQHandler+0xb12>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a7d      	ldr	r2, [pc, #500]	@ (8003654 <HAL_DMA_IRQHandler+0xc78>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d045      	beq.n	80034ee <HAL_DMA_IRQHandler+0xb12>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a7c      	ldr	r2, [pc, #496]	@ (8003658 <HAL_DMA_IRQHandler+0xc7c>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d040      	beq.n	80034ee <HAL_DMA_IRQHandler+0xb12>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a7a      	ldr	r2, [pc, #488]	@ (800365c <HAL_DMA_IRQHandler+0xc80>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d03b      	beq.n	80034ee <HAL_DMA_IRQHandler+0xb12>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a79      	ldr	r2, [pc, #484]	@ (8003660 <HAL_DMA_IRQHandler+0xc84>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d036      	beq.n	80034ee <HAL_DMA_IRQHandler+0xb12>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a77      	ldr	r2, [pc, #476]	@ (8003664 <HAL_DMA_IRQHandler+0xc88>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d031      	beq.n	80034ee <HAL_DMA_IRQHandler+0xb12>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a76      	ldr	r2, [pc, #472]	@ (8003668 <HAL_DMA_IRQHandler+0xc8c>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d02c      	beq.n	80034ee <HAL_DMA_IRQHandler+0xb12>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a74      	ldr	r2, [pc, #464]	@ (800366c <HAL_DMA_IRQHandler+0xc90>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d027      	beq.n	80034ee <HAL_DMA_IRQHandler+0xb12>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a73      	ldr	r2, [pc, #460]	@ (8003670 <HAL_DMA_IRQHandler+0xc94>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d022      	beq.n	80034ee <HAL_DMA_IRQHandler+0xb12>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a71      	ldr	r2, [pc, #452]	@ (8003674 <HAL_DMA_IRQHandler+0xc98>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d01d      	beq.n	80034ee <HAL_DMA_IRQHandler+0xb12>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a70      	ldr	r2, [pc, #448]	@ (8003678 <HAL_DMA_IRQHandler+0xc9c>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d018      	beq.n	80034ee <HAL_DMA_IRQHandler+0xb12>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a6e      	ldr	r2, [pc, #440]	@ (800367c <HAL_DMA_IRQHandler+0xca0>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d013      	beq.n	80034ee <HAL_DMA_IRQHandler+0xb12>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a6d      	ldr	r2, [pc, #436]	@ (8003680 <HAL_DMA_IRQHandler+0xca4>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d00e      	beq.n	80034ee <HAL_DMA_IRQHandler+0xb12>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a6b      	ldr	r2, [pc, #428]	@ (8003684 <HAL_DMA_IRQHandler+0xca8>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d009      	beq.n	80034ee <HAL_DMA_IRQHandler+0xb12>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a6a      	ldr	r2, [pc, #424]	@ (8003688 <HAL_DMA_IRQHandler+0xcac>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d004      	beq.n	80034ee <HAL_DMA_IRQHandler+0xb12>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a68      	ldr	r2, [pc, #416]	@ (800368c <HAL_DMA_IRQHandler+0xcb0>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d108      	bne.n	8003500 <HAL_DMA_IRQHandler+0xb24>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 0208 	bic.w	r2, r2, #8
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	e007      	b.n	8003510 <HAL_DMA_IRQHandler+0xb34>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 0204 	bic.w	r2, r2, #4
 800350e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 8165 	beq.w	80037e4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003522:	e15f      	b.n	80037e4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003528:	f003 031f 	and.w	r3, r3, #31
 800352c:	2202      	movs	r2, #2
 800352e:	409a      	lsls	r2, r3
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	4013      	ands	r3, r2
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 80c5 	beq.w	80036c4 <HAL_DMA_IRQHandler+0xce8>
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 80bf 	beq.w	80036c4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800354a:	f003 031f 	and.w	r3, r3, #31
 800354e:	2202      	movs	r2, #2
 8003550:	409a      	lsls	r2, r3
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d018      	beq.n	8003592 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d109      	bne.n	800357e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 813a 	beq.w	80037e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800357c:	e134      	b.n	80037e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 8130 	beq.w	80037e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003590:	e12a      	b.n	80037e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	f003 0320 	and.w	r3, r3, #32
 8003598:	2b00      	cmp	r3, #0
 800359a:	f040 8089 	bne.w	80036b0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a2b      	ldr	r2, [pc, #172]	@ (8003650 <HAL_DMA_IRQHandler+0xc74>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d04a      	beq.n	800363e <HAL_DMA_IRQHandler+0xc62>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a29      	ldr	r2, [pc, #164]	@ (8003654 <HAL_DMA_IRQHandler+0xc78>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d045      	beq.n	800363e <HAL_DMA_IRQHandler+0xc62>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a28      	ldr	r2, [pc, #160]	@ (8003658 <HAL_DMA_IRQHandler+0xc7c>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d040      	beq.n	800363e <HAL_DMA_IRQHandler+0xc62>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a26      	ldr	r2, [pc, #152]	@ (800365c <HAL_DMA_IRQHandler+0xc80>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d03b      	beq.n	800363e <HAL_DMA_IRQHandler+0xc62>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a25      	ldr	r2, [pc, #148]	@ (8003660 <HAL_DMA_IRQHandler+0xc84>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d036      	beq.n	800363e <HAL_DMA_IRQHandler+0xc62>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a23      	ldr	r2, [pc, #140]	@ (8003664 <HAL_DMA_IRQHandler+0xc88>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d031      	beq.n	800363e <HAL_DMA_IRQHandler+0xc62>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a22      	ldr	r2, [pc, #136]	@ (8003668 <HAL_DMA_IRQHandler+0xc8c>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d02c      	beq.n	800363e <HAL_DMA_IRQHandler+0xc62>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a20      	ldr	r2, [pc, #128]	@ (800366c <HAL_DMA_IRQHandler+0xc90>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d027      	beq.n	800363e <HAL_DMA_IRQHandler+0xc62>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a1f      	ldr	r2, [pc, #124]	@ (8003670 <HAL_DMA_IRQHandler+0xc94>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d022      	beq.n	800363e <HAL_DMA_IRQHandler+0xc62>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003674 <HAL_DMA_IRQHandler+0xc98>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d01d      	beq.n	800363e <HAL_DMA_IRQHandler+0xc62>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a1c      	ldr	r2, [pc, #112]	@ (8003678 <HAL_DMA_IRQHandler+0xc9c>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d018      	beq.n	800363e <HAL_DMA_IRQHandler+0xc62>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a1a      	ldr	r2, [pc, #104]	@ (800367c <HAL_DMA_IRQHandler+0xca0>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d013      	beq.n	800363e <HAL_DMA_IRQHandler+0xc62>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a19      	ldr	r2, [pc, #100]	@ (8003680 <HAL_DMA_IRQHandler+0xca4>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d00e      	beq.n	800363e <HAL_DMA_IRQHandler+0xc62>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a17      	ldr	r2, [pc, #92]	@ (8003684 <HAL_DMA_IRQHandler+0xca8>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d009      	beq.n	800363e <HAL_DMA_IRQHandler+0xc62>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a16      	ldr	r2, [pc, #88]	@ (8003688 <HAL_DMA_IRQHandler+0xcac>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d004      	beq.n	800363e <HAL_DMA_IRQHandler+0xc62>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a14      	ldr	r2, [pc, #80]	@ (800368c <HAL_DMA_IRQHandler+0xcb0>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d128      	bne.n	8003690 <HAL_DMA_IRQHandler+0xcb4>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0214 	bic.w	r2, r2, #20
 800364c:	601a      	str	r2, [r3, #0]
 800364e:	e027      	b.n	80036a0 <HAL_DMA_IRQHandler+0xcc4>
 8003650:	40020010 	.word	0x40020010
 8003654:	40020028 	.word	0x40020028
 8003658:	40020040 	.word	0x40020040
 800365c:	40020058 	.word	0x40020058
 8003660:	40020070 	.word	0x40020070
 8003664:	40020088 	.word	0x40020088
 8003668:	400200a0 	.word	0x400200a0
 800366c:	400200b8 	.word	0x400200b8
 8003670:	40020410 	.word	0x40020410
 8003674:	40020428 	.word	0x40020428
 8003678:	40020440 	.word	0x40020440
 800367c:	40020458 	.word	0x40020458
 8003680:	40020470 	.word	0x40020470
 8003684:	40020488 	.word	0x40020488
 8003688:	400204a0 	.word	0x400204a0
 800368c:	400204b8 	.word	0x400204b8
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 020a 	bic.w	r2, r2, #10
 800369e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 8097 	beq.w	80037e8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036c2:	e091      	b.n	80037e8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c8:	f003 031f 	and.w	r3, r3, #31
 80036cc:	2208      	movs	r2, #8
 80036ce:	409a      	lsls	r2, r3
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	4013      	ands	r3, r2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f000 8088 	beq.w	80037ea <HAL_DMA_IRQHandler+0xe0e>
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	f003 0308 	and.w	r3, r3, #8
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 8082 	beq.w	80037ea <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a41      	ldr	r2, [pc, #260]	@ (80037f0 <HAL_DMA_IRQHandler+0xe14>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d04a      	beq.n	8003786 <HAL_DMA_IRQHandler+0xdaa>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a3f      	ldr	r2, [pc, #252]	@ (80037f4 <HAL_DMA_IRQHandler+0xe18>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d045      	beq.n	8003786 <HAL_DMA_IRQHandler+0xdaa>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a3e      	ldr	r2, [pc, #248]	@ (80037f8 <HAL_DMA_IRQHandler+0xe1c>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d040      	beq.n	8003786 <HAL_DMA_IRQHandler+0xdaa>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a3c      	ldr	r2, [pc, #240]	@ (80037fc <HAL_DMA_IRQHandler+0xe20>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d03b      	beq.n	8003786 <HAL_DMA_IRQHandler+0xdaa>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a3b      	ldr	r2, [pc, #236]	@ (8003800 <HAL_DMA_IRQHandler+0xe24>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d036      	beq.n	8003786 <HAL_DMA_IRQHandler+0xdaa>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a39      	ldr	r2, [pc, #228]	@ (8003804 <HAL_DMA_IRQHandler+0xe28>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d031      	beq.n	8003786 <HAL_DMA_IRQHandler+0xdaa>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a38      	ldr	r2, [pc, #224]	@ (8003808 <HAL_DMA_IRQHandler+0xe2c>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d02c      	beq.n	8003786 <HAL_DMA_IRQHandler+0xdaa>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a36      	ldr	r2, [pc, #216]	@ (800380c <HAL_DMA_IRQHandler+0xe30>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d027      	beq.n	8003786 <HAL_DMA_IRQHandler+0xdaa>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a35      	ldr	r2, [pc, #212]	@ (8003810 <HAL_DMA_IRQHandler+0xe34>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d022      	beq.n	8003786 <HAL_DMA_IRQHandler+0xdaa>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a33      	ldr	r2, [pc, #204]	@ (8003814 <HAL_DMA_IRQHandler+0xe38>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d01d      	beq.n	8003786 <HAL_DMA_IRQHandler+0xdaa>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a32      	ldr	r2, [pc, #200]	@ (8003818 <HAL_DMA_IRQHandler+0xe3c>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d018      	beq.n	8003786 <HAL_DMA_IRQHandler+0xdaa>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a30      	ldr	r2, [pc, #192]	@ (800381c <HAL_DMA_IRQHandler+0xe40>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d013      	beq.n	8003786 <HAL_DMA_IRQHandler+0xdaa>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a2f      	ldr	r2, [pc, #188]	@ (8003820 <HAL_DMA_IRQHandler+0xe44>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d00e      	beq.n	8003786 <HAL_DMA_IRQHandler+0xdaa>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a2d      	ldr	r2, [pc, #180]	@ (8003824 <HAL_DMA_IRQHandler+0xe48>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d009      	beq.n	8003786 <HAL_DMA_IRQHandler+0xdaa>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a2c      	ldr	r2, [pc, #176]	@ (8003828 <HAL_DMA_IRQHandler+0xe4c>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d004      	beq.n	8003786 <HAL_DMA_IRQHandler+0xdaa>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a2a      	ldr	r2, [pc, #168]	@ (800382c <HAL_DMA_IRQHandler+0xe50>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d108      	bne.n	8003798 <HAL_DMA_IRQHandler+0xdbc>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 021c 	bic.w	r2, r2, #28
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	e007      	b.n	80037a8 <HAL_DMA_IRQHandler+0xdcc>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 020e 	bic.w	r2, r2, #14
 80037a6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ac:	f003 031f 	and.w	r3, r3, #31
 80037b0:	2201      	movs	r2, #1
 80037b2:	409a      	lsls	r2, r3
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d009      	beq.n	80037ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	4798      	blx	r3
 80037de:	e004      	b.n	80037ea <HAL_DMA_IRQHandler+0xe0e>
          return;
 80037e0:	bf00      	nop
 80037e2:	e002      	b.n	80037ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037e4:	bf00      	nop
 80037e6:	e000      	b.n	80037ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037e8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80037ea:	3728      	adds	r7, #40	@ 0x28
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40020010 	.word	0x40020010
 80037f4:	40020028 	.word	0x40020028
 80037f8:	40020040 	.word	0x40020040
 80037fc:	40020058 	.word	0x40020058
 8003800:	40020070 	.word	0x40020070
 8003804:	40020088 	.word	0x40020088
 8003808:	400200a0 	.word	0x400200a0
 800380c:	400200b8 	.word	0x400200b8
 8003810:	40020410 	.word	0x40020410
 8003814:	40020428 	.word	0x40020428
 8003818:	40020440 	.word	0x40020440
 800381c:	40020458 	.word	0x40020458
 8003820:	40020470 	.word	0x40020470
 8003824:	40020488 	.word	0x40020488
 8003828:	400204a0 	.word	0x400204a0
 800382c:	400204b8 	.word	0x400204b8

08003830 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003830:	b480      	push	{r7}
 8003832:	b087      	sub	sp, #28
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
 800383c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003842:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003848:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a7f      	ldr	r2, [pc, #508]	@ (8003a4c <DMA_SetConfig+0x21c>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d072      	beq.n	800393a <DMA_SetConfig+0x10a>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a7d      	ldr	r2, [pc, #500]	@ (8003a50 <DMA_SetConfig+0x220>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d06d      	beq.n	800393a <DMA_SetConfig+0x10a>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a7c      	ldr	r2, [pc, #496]	@ (8003a54 <DMA_SetConfig+0x224>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d068      	beq.n	800393a <DMA_SetConfig+0x10a>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a7a      	ldr	r2, [pc, #488]	@ (8003a58 <DMA_SetConfig+0x228>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d063      	beq.n	800393a <DMA_SetConfig+0x10a>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a79      	ldr	r2, [pc, #484]	@ (8003a5c <DMA_SetConfig+0x22c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d05e      	beq.n	800393a <DMA_SetConfig+0x10a>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a77      	ldr	r2, [pc, #476]	@ (8003a60 <DMA_SetConfig+0x230>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d059      	beq.n	800393a <DMA_SetConfig+0x10a>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a76      	ldr	r2, [pc, #472]	@ (8003a64 <DMA_SetConfig+0x234>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d054      	beq.n	800393a <DMA_SetConfig+0x10a>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a74      	ldr	r2, [pc, #464]	@ (8003a68 <DMA_SetConfig+0x238>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d04f      	beq.n	800393a <DMA_SetConfig+0x10a>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a73      	ldr	r2, [pc, #460]	@ (8003a6c <DMA_SetConfig+0x23c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d04a      	beq.n	800393a <DMA_SetConfig+0x10a>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a71      	ldr	r2, [pc, #452]	@ (8003a70 <DMA_SetConfig+0x240>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d045      	beq.n	800393a <DMA_SetConfig+0x10a>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a70      	ldr	r2, [pc, #448]	@ (8003a74 <DMA_SetConfig+0x244>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d040      	beq.n	800393a <DMA_SetConfig+0x10a>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a6e      	ldr	r2, [pc, #440]	@ (8003a78 <DMA_SetConfig+0x248>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d03b      	beq.n	800393a <DMA_SetConfig+0x10a>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a6d      	ldr	r2, [pc, #436]	@ (8003a7c <DMA_SetConfig+0x24c>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d036      	beq.n	800393a <DMA_SetConfig+0x10a>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a6b      	ldr	r2, [pc, #428]	@ (8003a80 <DMA_SetConfig+0x250>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d031      	beq.n	800393a <DMA_SetConfig+0x10a>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a6a      	ldr	r2, [pc, #424]	@ (8003a84 <DMA_SetConfig+0x254>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d02c      	beq.n	800393a <DMA_SetConfig+0x10a>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a68      	ldr	r2, [pc, #416]	@ (8003a88 <DMA_SetConfig+0x258>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d027      	beq.n	800393a <DMA_SetConfig+0x10a>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a67      	ldr	r2, [pc, #412]	@ (8003a8c <DMA_SetConfig+0x25c>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d022      	beq.n	800393a <DMA_SetConfig+0x10a>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a65      	ldr	r2, [pc, #404]	@ (8003a90 <DMA_SetConfig+0x260>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d01d      	beq.n	800393a <DMA_SetConfig+0x10a>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a64      	ldr	r2, [pc, #400]	@ (8003a94 <DMA_SetConfig+0x264>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d018      	beq.n	800393a <DMA_SetConfig+0x10a>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a62      	ldr	r2, [pc, #392]	@ (8003a98 <DMA_SetConfig+0x268>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d013      	beq.n	800393a <DMA_SetConfig+0x10a>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a61      	ldr	r2, [pc, #388]	@ (8003a9c <DMA_SetConfig+0x26c>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d00e      	beq.n	800393a <DMA_SetConfig+0x10a>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a5f      	ldr	r2, [pc, #380]	@ (8003aa0 <DMA_SetConfig+0x270>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d009      	beq.n	800393a <DMA_SetConfig+0x10a>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a5e      	ldr	r2, [pc, #376]	@ (8003aa4 <DMA_SetConfig+0x274>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d004      	beq.n	800393a <DMA_SetConfig+0x10a>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a5c      	ldr	r2, [pc, #368]	@ (8003aa8 <DMA_SetConfig+0x278>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d101      	bne.n	800393e <DMA_SetConfig+0x10e>
 800393a:	2301      	movs	r3, #1
 800393c:	e000      	b.n	8003940 <DMA_SetConfig+0x110>
 800393e:	2300      	movs	r3, #0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00d      	beq.n	8003960 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800394c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003952:	2b00      	cmp	r3, #0
 8003954:	d004      	beq.n	8003960 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800395e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a39      	ldr	r2, [pc, #228]	@ (8003a4c <DMA_SetConfig+0x21c>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d04a      	beq.n	8003a00 <DMA_SetConfig+0x1d0>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a38      	ldr	r2, [pc, #224]	@ (8003a50 <DMA_SetConfig+0x220>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d045      	beq.n	8003a00 <DMA_SetConfig+0x1d0>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a36      	ldr	r2, [pc, #216]	@ (8003a54 <DMA_SetConfig+0x224>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d040      	beq.n	8003a00 <DMA_SetConfig+0x1d0>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a35      	ldr	r2, [pc, #212]	@ (8003a58 <DMA_SetConfig+0x228>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d03b      	beq.n	8003a00 <DMA_SetConfig+0x1d0>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a33      	ldr	r2, [pc, #204]	@ (8003a5c <DMA_SetConfig+0x22c>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d036      	beq.n	8003a00 <DMA_SetConfig+0x1d0>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a32      	ldr	r2, [pc, #200]	@ (8003a60 <DMA_SetConfig+0x230>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d031      	beq.n	8003a00 <DMA_SetConfig+0x1d0>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a30      	ldr	r2, [pc, #192]	@ (8003a64 <DMA_SetConfig+0x234>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d02c      	beq.n	8003a00 <DMA_SetConfig+0x1d0>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a2f      	ldr	r2, [pc, #188]	@ (8003a68 <DMA_SetConfig+0x238>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d027      	beq.n	8003a00 <DMA_SetConfig+0x1d0>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a2d      	ldr	r2, [pc, #180]	@ (8003a6c <DMA_SetConfig+0x23c>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d022      	beq.n	8003a00 <DMA_SetConfig+0x1d0>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a2c      	ldr	r2, [pc, #176]	@ (8003a70 <DMA_SetConfig+0x240>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d01d      	beq.n	8003a00 <DMA_SetConfig+0x1d0>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a2a      	ldr	r2, [pc, #168]	@ (8003a74 <DMA_SetConfig+0x244>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d018      	beq.n	8003a00 <DMA_SetConfig+0x1d0>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a29      	ldr	r2, [pc, #164]	@ (8003a78 <DMA_SetConfig+0x248>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d013      	beq.n	8003a00 <DMA_SetConfig+0x1d0>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a27      	ldr	r2, [pc, #156]	@ (8003a7c <DMA_SetConfig+0x24c>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d00e      	beq.n	8003a00 <DMA_SetConfig+0x1d0>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a26      	ldr	r2, [pc, #152]	@ (8003a80 <DMA_SetConfig+0x250>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d009      	beq.n	8003a00 <DMA_SetConfig+0x1d0>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a24      	ldr	r2, [pc, #144]	@ (8003a84 <DMA_SetConfig+0x254>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d004      	beq.n	8003a00 <DMA_SetConfig+0x1d0>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a23      	ldr	r2, [pc, #140]	@ (8003a88 <DMA_SetConfig+0x258>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d101      	bne.n	8003a04 <DMA_SetConfig+0x1d4>
 8003a00:	2301      	movs	r3, #1
 8003a02:	e000      	b.n	8003a06 <DMA_SetConfig+0x1d6>
 8003a04:	2300      	movs	r3, #0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d059      	beq.n	8003abe <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a0e:	f003 031f 	and.w	r3, r3, #31
 8003a12:	223f      	movs	r2, #63	@ 0x3f
 8003a14:	409a      	lsls	r2, r3
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003a28:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	2b40      	cmp	r3, #64	@ 0x40
 8003a38:	d138      	bne.n	8003aac <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003a4a:	e086      	b.n	8003b5a <DMA_SetConfig+0x32a>
 8003a4c:	40020010 	.word	0x40020010
 8003a50:	40020028 	.word	0x40020028
 8003a54:	40020040 	.word	0x40020040
 8003a58:	40020058 	.word	0x40020058
 8003a5c:	40020070 	.word	0x40020070
 8003a60:	40020088 	.word	0x40020088
 8003a64:	400200a0 	.word	0x400200a0
 8003a68:	400200b8 	.word	0x400200b8
 8003a6c:	40020410 	.word	0x40020410
 8003a70:	40020428 	.word	0x40020428
 8003a74:	40020440 	.word	0x40020440
 8003a78:	40020458 	.word	0x40020458
 8003a7c:	40020470 	.word	0x40020470
 8003a80:	40020488 	.word	0x40020488
 8003a84:	400204a0 	.word	0x400204a0
 8003a88:	400204b8 	.word	0x400204b8
 8003a8c:	58025408 	.word	0x58025408
 8003a90:	5802541c 	.word	0x5802541c
 8003a94:	58025430 	.word	0x58025430
 8003a98:	58025444 	.word	0x58025444
 8003a9c:	58025458 	.word	0x58025458
 8003aa0:	5802546c 	.word	0x5802546c
 8003aa4:	58025480 	.word	0x58025480
 8003aa8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	60da      	str	r2, [r3, #12]
}
 8003abc:	e04d      	b.n	8003b5a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a29      	ldr	r2, [pc, #164]	@ (8003b68 <DMA_SetConfig+0x338>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d022      	beq.n	8003b0e <DMA_SetConfig+0x2de>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a27      	ldr	r2, [pc, #156]	@ (8003b6c <DMA_SetConfig+0x33c>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d01d      	beq.n	8003b0e <DMA_SetConfig+0x2de>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a26      	ldr	r2, [pc, #152]	@ (8003b70 <DMA_SetConfig+0x340>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d018      	beq.n	8003b0e <DMA_SetConfig+0x2de>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a24      	ldr	r2, [pc, #144]	@ (8003b74 <DMA_SetConfig+0x344>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d013      	beq.n	8003b0e <DMA_SetConfig+0x2de>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a23      	ldr	r2, [pc, #140]	@ (8003b78 <DMA_SetConfig+0x348>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d00e      	beq.n	8003b0e <DMA_SetConfig+0x2de>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a21      	ldr	r2, [pc, #132]	@ (8003b7c <DMA_SetConfig+0x34c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d009      	beq.n	8003b0e <DMA_SetConfig+0x2de>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a20      	ldr	r2, [pc, #128]	@ (8003b80 <DMA_SetConfig+0x350>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d004      	beq.n	8003b0e <DMA_SetConfig+0x2de>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a1e      	ldr	r2, [pc, #120]	@ (8003b84 <DMA_SetConfig+0x354>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d101      	bne.n	8003b12 <DMA_SetConfig+0x2e2>
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e000      	b.n	8003b14 <DMA_SetConfig+0x2e4>
 8003b12:	2300      	movs	r3, #0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d020      	beq.n	8003b5a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b1c:	f003 031f 	and.w	r3, r3, #31
 8003b20:	2201      	movs	r2, #1
 8003b22:	409a      	lsls	r2, r3
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	2b40      	cmp	r3, #64	@ 0x40
 8003b36:	d108      	bne.n	8003b4a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	60da      	str	r2, [r3, #12]
}
 8003b48:	e007      	b.n	8003b5a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	60da      	str	r2, [r3, #12]
}
 8003b5a:	bf00      	nop
 8003b5c:	371c      	adds	r7, #28
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	58025408 	.word	0x58025408
 8003b6c:	5802541c 	.word	0x5802541c
 8003b70:	58025430 	.word	0x58025430
 8003b74:	58025444 	.word	0x58025444
 8003b78:	58025458 	.word	0x58025458
 8003b7c:	5802546c 	.word	0x5802546c
 8003b80:	58025480 	.word	0x58025480
 8003b84:	58025494 	.word	0x58025494

08003b88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a42      	ldr	r2, [pc, #264]	@ (8003ca0 <DMA_CalcBaseAndBitshift+0x118>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d04a      	beq.n	8003c30 <DMA_CalcBaseAndBitshift+0xa8>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a41      	ldr	r2, [pc, #260]	@ (8003ca4 <DMA_CalcBaseAndBitshift+0x11c>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d045      	beq.n	8003c30 <DMA_CalcBaseAndBitshift+0xa8>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a3f      	ldr	r2, [pc, #252]	@ (8003ca8 <DMA_CalcBaseAndBitshift+0x120>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d040      	beq.n	8003c30 <DMA_CalcBaseAndBitshift+0xa8>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a3e      	ldr	r2, [pc, #248]	@ (8003cac <DMA_CalcBaseAndBitshift+0x124>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d03b      	beq.n	8003c30 <DMA_CalcBaseAndBitshift+0xa8>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a3c      	ldr	r2, [pc, #240]	@ (8003cb0 <DMA_CalcBaseAndBitshift+0x128>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d036      	beq.n	8003c30 <DMA_CalcBaseAndBitshift+0xa8>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a3b      	ldr	r2, [pc, #236]	@ (8003cb4 <DMA_CalcBaseAndBitshift+0x12c>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d031      	beq.n	8003c30 <DMA_CalcBaseAndBitshift+0xa8>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a39      	ldr	r2, [pc, #228]	@ (8003cb8 <DMA_CalcBaseAndBitshift+0x130>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d02c      	beq.n	8003c30 <DMA_CalcBaseAndBitshift+0xa8>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a38      	ldr	r2, [pc, #224]	@ (8003cbc <DMA_CalcBaseAndBitshift+0x134>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d027      	beq.n	8003c30 <DMA_CalcBaseAndBitshift+0xa8>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a36      	ldr	r2, [pc, #216]	@ (8003cc0 <DMA_CalcBaseAndBitshift+0x138>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d022      	beq.n	8003c30 <DMA_CalcBaseAndBitshift+0xa8>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a35      	ldr	r2, [pc, #212]	@ (8003cc4 <DMA_CalcBaseAndBitshift+0x13c>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d01d      	beq.n	8003c30 <DMA_CalcBaseAndBitshift+0xa8>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a33      	ldr	r2, [pc, #204]	@ (8003cc8 <DMA_CalcBaseAndBitshift+0x140>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d018      	beq.n	8003c30 <DMA_CalcBaseAndBitshift+0xa8>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a32      	ldr	r2, [pc, #200]	@ (8003ccc <DMA_CalcBaseAndBitshift+0x144>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d013      	beq.n	8003c30 <DMA_CalcBaseAndBitshift+0xa8>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a30      	ldr	r2, [pc, #192]	@ (8003cd0 <DMA_CalcBaseAndBitshift+0x148>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d00e      	beq.n	8003c30 <DMA_CalcBaseAndBitshift+0xa8>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a2f      	ldr	r2, [pc, #188]	@ (8003cd4 <DMA_CalcBaseAndBitshift+0x14c>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d009      	beq.n	8003c30 <DMA_CalcBaseAndBitshift+0xa8>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a2d      	ldr	r2, [pc, #180]	@ (8003cd8 <DMA_CalcBaseAndBitshift+0x150>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d004      	beq.n	8003c30 <DMA_CalcBaseAndBitshift+0xa8>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a2c      	ldr	r2, [pc, #176]	@ (8003cdc <DMA_CalcBaseAndBitshift+0x154>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d101      	bne.n	8003c34 <DMA_CalcBaseAndBitshift+0xac>
 8003c30:	2301      	movs	r3, #1
 8003c32:	e000      	b.n	8003c36 <DMA_CalcBaseAndBitshift+0xae>
 8003c34:	2300      	movs	r3, #0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d024      	beq.n	8003c84 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	3b10      	subs	r3, #16
 8003c42:	4a27      	ldr	r2, [pc, #156]	@ (8003ce0 <DMA_CalcBaseAndBitshift+0x158>)
 8003c44:	fba2 2303 	umull	r2, r3, r2, r3
 8003c48:	091b      	lsrs	r3, r3, #4
 8003c4a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f003 0307 	and.w	r3, r3, #7
 8003c52:	4a24      	ldr	r2, [pc, #144]	@ (8003ce4 <DMA_CalcBaseAndBitshift+0x15c>)
 8003c54:	5cd3      	ldrb	r3, [r2, r3]
 8003c56:	461a      	mov	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2b03      	cmp	r3, #3
 8003c60:	d908      	bls.n	8003c74 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	461a      	mov	r2, r3
 8003c68:	4b1f      	ldr	r3, [pc, #124]	@ (8003ce8 <DMA_CalcBaseAndBitshift+0x160>)
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	1d1a      	adds	r2, r3, #4
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	659a      	str	r2, [r3, #88]	@ 0x58
 8003c72:	e00d      	b.n	8003c90 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	461a      	mov	r2, r3
 8003c7a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ce8 <DMA_CalcBaseAndBitshift+0x160>)
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c82:	e005      	b.n	8003c90 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3714      	adds	r7, #20
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	40020010 	.word	0x40020010
 8003ca4:	40020028 	.word	0x40020028
 8003ca8:	40020040 	.word	0x40020040
 8003cac:	40020058 	.word	0x40020058
 8003cb0:	40020070 	.word	0x40020070
 8003cb4:	40020088 	.word	0x40020088
 8003cb8:	400200a0 	.word	0x400200a0
 8003cbc:	400200b8 	.word	0x400200b8
 8003cc0:	40020410 	.word	0x40020410
 8003cc4:	40020428 	.word	0x40020428
 8003cc8:	40020440 	.word	0x40020440
 8003ccc:	40020458 	.word	0x40020458
 8003cd0:	40020470 	.word	0x40020470
 8003cd4:	40020488 	.word	0x40020488
 8003cd8:	400204a0 	.word	0x400204a0
 8003cdc:	400204b8 	.word	0x400204b8
 8003ce0:	aaaaaaab 	.word	0xaaaaaaab
 8003ce4:	08009860 	.word	0x08009860
 8003ce8:	fffffc00 	.word	0xfffffc00

08003cec <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d120      	bne.n	8003d42 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d04:	2b03      	cmp	r3, #3
 8003d06:	d858      	bhi.n	8003dba <DMA_CheckFifoParam+0xce>
 8003d08:	a201      	add	r2, pc, #4	@ (adr r2, 8003d10 <DMA_CheckFifoParam+0x24>)
 8003d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d0e:	bf00      	nop
 8003d10:	08003d21 	.word	0x08003d21
 8003d14:	08003d33 	.word	0x08003d33
 8003d18:	08003d21 	.word	0x08003d21
 8003d1c:	08003dbb 	.word	0x08003dbb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d048      	beq.n	8003dbe <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d30:	e045      	b.n	8003dbe <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d36:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003d3a:	d142      	bne.n	8003dc2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d40:	e03f      	b.n	8003dc2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d4a:	d123      	bne.n	8003d94 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d50:	2b03      	cmp	r3, #3
 8003d52:	d838      	bhi.n	8003dc6 <DMA_CheckFifoParam+0xda>
 8003d54:	a201      	add	r2, pc, #4	@ (adr r2, 8003d5c <DMA_CheckFifoParam+0x70>)
 8003d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d5a:	bf00      	nop
 8003d5c:	08003d6d 	.word	0x08003d6d
 8003d60:	08003d73 	.word	0x08003d73
 8003d64:	08003d6d 	.word	0x08003d6d
 8003d68:	08003d85 	.word	0x08003d85
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	73fb      	strb	r3, [r7, #15]
        break;
 8003d70:	e030      	b.n	8003dd4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d76:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d025      	beq.n	8003dca <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d82:	e022      	b.n	8003dca <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d88:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003d8c:	d11f      	bne.n	8003dce <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d92:	e01c      	b.n	8003dce <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d902      	bls.n	8003da2 <DMA_CheckFifoParam+0xb6>
 8003d9c:	2b03      	cmp	r3, #3
 8003d9e:	d003      	beq.n	8003da8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003da0:	e018      	b.n	8003dd4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	73fb      	strb	r3, [r7, #15]
        break;
 8003da6:	e015      	b.n	8003dd4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00e      	beq.n	8003dd2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	73fb      	strb	r3, [r7, #15]
    break;
 8003db8:	e00b      	b.n	8003dd2 <DMA_CheckFifoParam+0xe6>
        break;
 8003dba:	bf00      	nop
 8003dbc:	e00a      	b.n	8003dd4 <DMA_CheckFifoParam+0xe8>
        break;
 8003dbe:	bf00      	nop
 8003dc0:	e008      	b.n	8003dd4 <DMA_CheckFifoParam+0xe8>
        break;
 8003dc2:	bf00      	nop
 8003dc4:	e006      	b.n	8003dd4 <DMA_CheckFifoParam+0xe8>
        break;
 8003dc6:	bf00      	nop
 8003dc8:	e004      	b.n	8003dd4 <DMA_CheckFifoParam+0xe8>
        break;
 8003dca:	bf00      	nop
 8003dcc:	e002      	b.n	8003dd4 <DMA_CheckFifoParam+0xe8>
        break;
 8003dce:	bf00      	nop
 8003dd0:	e000      	b.n	8003dd4 <DMA_CheckFifoParam+0xe8>
    break;
 8003dd2:	bf00      	nop
    }
  }

  return status;
 8003dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3714      	adds	r7, #20
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop

08003de4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a38      	ldr	r2, [pc, #224]	@ (8003ed8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d022      	beq.n	8003e42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a36      	ldr	r2, [pc, #216]	@ (8003edc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d01d      	beq.n	8003e42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a35      	ldr	r2, [pc, #212]	@ (8003ee0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d018      	beq.n	8003e42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a33      	ldr	r2, [pc, #204]	@ (8003ee4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d013      	beq.n	8003e42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a32      	ldr	r2, [pc, #200]	@ (8003ee8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d00e      	beq.n	8003e42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a30      	ldr	r2, [pc, #192]	@ (8003eec <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d009      	beq.n	8003e42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a2f      	ldr	r2, [pc, #188]	@ (8003ef0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d004      	beq.n	8003e42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a2d      	ldr	r2, [pc, #180]	@ (8003ef4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d101      	bne.n	8003e46 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003e42:	2301      	movs	r3, #1
 8003e44:	e000      	b.n	8003e48 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003e46:	2300      	movs	r3, #0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d01a      	beq.n	8003e82 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	3b08      	subs	r3, #8
 8003e54:	4a28      	ldr	r2, [pc, #160]	@ (8003ef8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003e56:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5a:	091b      	lsrs	r3, r3, #4
 8003e5c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	4b26      	ldr	r3, [pc, #152]	@ (8003efc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003e62:	4413      	add	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	461a      	mov	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a24      	ldr	r2, [pc, #144]	@ (8003f00 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003e70:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f003 031f 	and.w	r3, r3, #31
 8003e78:	2201      	movs	r2, #1
 8003e7a:	409a      	lsls	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003e80:	e024      	b.n	8003ecc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	3b10      	subs	r3, #16
 8003e8a:	4a1e      	ldr	r2, [pc, #120]	@ (8003f04 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e90:	091b      	lsrs	r3, r3, #4
 8003e92:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	4a1c      	ldr	r2, [pc, #112]	@ (8003f08 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d806      	bhi.n	8003eaa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	4a1b      	ldr	r2, [pc, #108]	@ (8003f0c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d902      	bls.n	8003eaa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	3308      	adds	r3, #8
 8003ea8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	4b18      	ldr	r3, [pc, #96]	@ (8003f10 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003eae:	4413      	add	r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a16      	ldr	r2, [pc, #88]	@ (8003f14 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003ebc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f003 031f 	and.w	r3, r3, #31
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	409a      	lsls	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003ecc:	bf00      	nop
 8003ece:	3714      	adds	r7, #20
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	58025408 	.word	0x58025408
 8003edc:	5802541c 	.word	0x5802541c
 8003ee0:	58025430 	.word	0x58025430
 8003ee4:	58025444 	.word	0x58025444
 8003ee8:	58025458 	.word	0x58025458
 8003eec:	5802546c 	.word	0x5802546c
 8003ef0:	58025480 	.word	0x58025480
 8003ef4:	58025494 	.word	0x58025494
 8003ef8:	cccccccd 	.word	0xcccccccd
 8003efc:	16009600 	.word	0x16009600
 8003f00:	58025880 	.word	0x58025880
 8003f04:	aaaaaaab 	.word	0xaaaaaaab
 8003f08:	400204b8 	.word	0x400204b8
 8003f0c:	4002040f 	.word	0x4002040f
 8003f10:	10008200 	.word	0x10008200
 8003f14:	40020880 	.word	0x40020880

08003f18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d04a      	beq.n	8003fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2b08      	cmp	r3, #8
 8003f32:	d847      	bhi.n	8003fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a25      	ldr	r2, [pc, #148]	@ (8003fd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d022      	beq.n	8003f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a24      	ldr	r2, [pc, #144]	@ (8003fd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d01d      	beq.n	8003f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a22      	ldr	r2, [pc, #136]	@ (8003fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d018      	beq.n	8003f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a21      	ldr	r2, [pc, #132]	@ (8003fdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d013      	beq.n	8003f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a1f      	ldr	r2, [pc, #124]	@ (8003fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d00e      	beq.n	8003f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a1e      	ldr	r2, [pc, #120]	@ (8003fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d009      	beq.n	8003f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a1c      	ldr	r2, [pc, #112]	@ (8003fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d004      	beq.n	8003f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a1b      	ldr	r2, [pc, #108]	@ (8003fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d101      	bne.n	8003f88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003f84:	2301      	movs	r3, #1
 8003f86:	e000      	b.n	8003f8a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003f88:	2300      	movs	r3, #0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00a      	beq.n	8003fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	4b17      	ldr	r3, [pc, #92]	@ (8003ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003f92:	4413      	add	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	461a      	mov	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a15      	ldr	r2, [pc, #84]	@ (8003ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003fa0:	671a      	str	r2, [r3, #112]	@ 0x70
 8003fa2:	e009      	b.n	8003fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	4b14      	ldr	r3, [pc, #80]	@ (8003ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003fa8:	4413      	add	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	461a      	mov	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a11      	ldr	r2, [pc, #68]	@ (8003ffc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003fb6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	409a      	lsls	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8003fc4:	bf00      	nop
 8003fc6:	3714      	adds	r7, #20
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr
 8003fd0:	58025408 	.word	0x58025408
 8003fd4:	5802541c 	.word	0x5802541c
 8003fd8:	58025430 	.word	0x58025430
 8003fdc:	58025444 	.word	0x58025444
 8003fe0:	58025458 	.word	0x58025458
 8003fe4:	5802546c 	.word	0x5802546c
 8003fe8:	58025480 	.word	0x58025480
 8003fec:	58025494 	.word	0x58025494
 8003ff0:	1600963f 	.word	0x1600963f
 8003ff4:	58025940 	.word	0x58025940
 8003ff8:	1000823f 	.word	0x1000823f
 8003ffc:	40020940 	.word	0x40020940

08004000 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004000:	b480      	push	{r7}
 8004002:	b089      	sub	sp, #36	@ 0x24
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800400a:	2300      	movs	r3, #0
 800400c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800400e:	4b89      	ldr	r3, [pc, #548]	@ (8004234 <HAL_GPIO_Init+0x234>)
 8004010:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004012:	e194      	b.n	800433e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	2101      	movs	r1, #1
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	fa01 f303 	lsl.w	r3, r1, r3
 8004020:	4013      	ands	r3, r2
 8004022:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	2b00      	cmp	r3, #0
 8004028:	f000 8186 	beq.w	8004338 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f003 0303 	and.w	r3, r3, #3
 8004034:	2b01      	cmp	r3, #1
 8004036:	d005      	beq.n	8004044 <HAL_GPIO_Init+0x44>
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f003 0303 	and.w	r3, r3, #3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d130      	bne.n	80040a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	2203      	movs	r2, #3
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	43db      	mvns	r3, r3
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	4013      	ands	r3, r2
 800405a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	68da      	ldr	r2, [r3, #12]
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	fa02 f303 	lsl.w	r3, r2, r3
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	4313      	orrs	r3, r2
 800406c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800407a:	2201      	movs	r2, #1
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	fa02 f303 	lsl.w	r3, r2, r3
 8004082:	43db      	mvns	r3, r3
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	4013      	ands	r3, r2
 8004088:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	091b      	lsrs	r3, r3, #4
 8004090:	f003 0201 	and.w	r2, r3, #1
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	fa02 f303 	lsl.w	r3, r2, r3
 800409a:	69ba      	ldr	r2, [r7, #24]
 800409c:	4313      	orrs	r3, r2
 800409e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f003 0303 	and.w	r3, r3, #3
 80040ae:	2b03      	cmp	r3, #3
 80040b0:	d017      	beq.n	80040e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	005b      	lsls	r3, r3, #1
 80040bc:	2203      	movs	r2, #3
 80040be:	fa02 f303 	lsl.w	r3, r2, r3
 80040c2:	43db      	mvns	r3, r3
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	4013      	ands	r3, r2
 80040c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	689a      	ldr	r2, [r3, #8]
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	fa02 f303 	lsl.w	r3, r2, r3
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	4313      	orrs	r3, r2
 80040da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f003 0303 	and.w	r3, r3, #3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d123      	bne.n	8004136 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	08da      	lsrs	r2, r3, #3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	3208      	adds	r2, #8
 80040f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	f003 0307 	and.w	r3, r3, #7
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	220f      	movs	r2, #15
 8004106:	fa02 f303 	lsl.w	r3, r2, r3
 800410a:	43db      	mvns	r3, r3
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	4013      	ands	r3, r2
 8004110:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	691a      	ldr	r2, [r3, #16]
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	fa02 f303 	lsl.w	r3, r2, r3
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	4313      	orrs	r3, r2
 8004126:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	08da      	lsrs	r2, r3, #3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3208      	adds	r2, #8
 8004130:	69b9      	ldr	r1, [r7, #24]
 8004132:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	2203      	movs	r2, #3
 8004142:	fa02 f303 	lsl.w	r3, r2, r3
 8004146:	43db      	mvns	r3, r3
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	4013      	ands	r3, r2
 800414c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f003 0203 	and.w	r2, r3, #3
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	005b      	lsls	r3, r3, #1
 800415a:	fa02 f303 	lsl.w	r3, r2, r3
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	4313      	orrs	r3, r2
 8004162:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004172:	2b00      	cmp	r3, #0
 8004174:	f000 80e0 	beq.w	8004338 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004178:	4b2f      	ldr	r3, [pc, #188]	@ (8004238 <HAL_GPIO_Init+0x238>)
 800417a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800417e:	4a2e      	ldr	r2, [pc, #184]	@ (8004238 <HAL_GPIO_Init+0x238>)
 8004180:	f043 0302 	orr.w	r3, r3, #2
 8004184:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004188:	4b2b      	ldr	r3, [pc, #172]	@ (8004238 <HAL_GPIO_Init+0x238>)
 800418a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004196:	4a29      	ldr	r2, [pc, #164]	@ (800423c <HAL_GPIO_Init+0x23c>)
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	089b      	lsrs	r3, r3, #2
 800419c:	3302      	adds	r3, #2
 800419e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	f003 0303 	and.w	r3, r3, #3
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	220f      	movs	r2, #15
 80041ae:	fa02 f303 	lsl.w	r3, r2, r3
 80041b2:	43db      	mvns	r3, r3
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	4013      	ands	r3, r2
 80041b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a20      	ldr	r2, [pc, #128]	@ (8004240 <HAL_GPIO_Init+0x240>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d052      	beq.n	8004268 <HAL_GPIO_Init+0x268>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a1f      	ldr	r2, [pc, #124]	@ (8004244 <HAL_GPIO_Init+0x244>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d031      	beq.n	800422e <HAL_GPIO_Init+0x22e>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a1e      	ldr	r2, [pc, #120]	@ (8004248 <HAL_GPIO_Init+0x248>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d02b      	beq.n	800422a <HAL_GPIO_Init+0x22a>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a1d      	ldr	r2, [pc, #116]	@ (800424c <HAL_GPIO_Init+0x24c>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d025      	beq.n	8004226 <HAL_GPIO_Init+0x226>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a1c      	ldr	r2, [pc, #112]	@ (8004250 <HAL_GPIO_Init+0x250>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d01f      	beq.n	8004222 <HAL_GPIO_Init+0x222>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a1b      	ldr	r2, [pc, #108]	@ (8004254 <HAL_GPIO_Init+0x254>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d019      	beq.n	800421e <HAL_GPIO_Init+0x21e>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a1a      	ldr	r2, [pc, #104]	@ (8004258 <HAL_GPIO_Init+0x258>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d013      	beq.n	800421a <HAL_GPIO_Init+0x21a>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a19      	ldr	r2, [pc, #100]	@ (800425c <HAL_GPIO_Init+0x25c>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d00d      	beq.n	8004216 <HAL_GPIO_Init+0x216>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a18      	ldr	r2, [pc, #96]	@ (8004260 <HAL_GPIO_Init+0x260>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d007      	beq.n	8004212 <HAL_GPIO_Init+0x212>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a17      	ldr	r2, [pc, #92]	@ (8004264 <HAL_GPIO_Init+0x264>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d101      	bne.n	800420e <HAL_GPIO_Init+0x20e>
 800420a:	2309      	movs	r3, #9
 800420c:	e02d      	b.n	800426a <HAL_GPIO_Init+0x26a>
 800420e:	230a      	movs	r3, #10
 8004210:	e02b      	b.n	800426a <HAL_GPIO_Init+0x26a>
 8004212:	2308      	movs	r3, #8
 8004214:	e029      	b.n	800426a <HAL_GPIO_Init+0x26a>
 8004216:	2307      	movs	r3, #7
 8004218:	e027      	b.n	800426a <HAL_GPIO_Init+0x26a>
 800421a:	2306      	movs	r3, #6
 800421c:	e025      	b.n	800426a <HAL_GPIO_Init+0x26a>
 800421e:	2305      	movs	r3, #5
 8004220:	e023      	b.n	800426a <HAL_GPIO_Init+0x26a>
 8004222:	2304      	movs	r3, #4
 8004224:	e021      	b.n	800426a <HAL_GPIO_Init+0x26a>
 8004226:	2303      	movs	r3, #3
 8004228:	e01f      	b.n	800426a <HAL_GPIO_Init+0x26a>
 800422a:	2302      	movs	r3, #2
 800422c:	e01d      	b.n	800426a <HAL_GPIO_Init+0x26a>
 800422e:	2301      	movs	r3, #1
 8004230:	e01b      	b.n	800426a <HAL_GPIO_Init+0x26a>
 8004232:	bf00      	nop
 8004234:	58000080 	.word	0x58000080
 8004238:	58024400 	.word	0x58024400
 800423c:	58000400 	.word	0x58000400
 8004240:	58020000 	.word	0x58020000
 8004244:	58020400 	.word	0x58020400
 8004248:	58020800 	.word	0x58020800
 800424c:	58020c00 	.word	0x58020c00
 8004250:	58021000 	.word	0x58021000
 8004254:	58021400 	.word	0x58021400
 8004258:	58021800 	.word	0x58021800
 800425c:	58021c00 	.word	0x58021c00
 8004260:	58022000 	.word	0x58022000
 8004264:	58022400 	.word	0x58022400
 8004268:	2300      	movs	r3, #0
 800426a:	69fa      	ldr	r2, [r7, #28]
 800426c:	f002 0203 	and.w	r2, r2, #3
 8004270:	0092      	lsls	r2, r2, #2
 8004272:	4093      	lsls	r3, r2
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	4313      	orrs	r3, r2
 8004278:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800427a:	4938      	ldr	r1, [pc, #224]	@ (800435c <HAL_GPIO_Init+0x35c>)
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	089b      	lsrs	r3, r3, #2
 8004280:	3302      	adds	r3, #2
 8004282:	69ba      	ldr	r2, [r7, #24]
 8004284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004288:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	43db      	mvns	r3, r3
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	4013      	ands	r3, r2
 8004298:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80042ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80042b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	43db      	mvns	r3, r3
 80042c2:	69ba      	ldr	r2, [r7, #24]
 80042c4:	4013      	ands	r3, r2
 80042c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d003      	beq.n	80042dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80042d4:	69ba      	ldr	r2, [r7, #24]
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	4313      	orrs	r3, r2
 80042da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80042dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	43db      	mvns	r3, r3
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	4013      	ands	r3, r2
 80042f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d003      	beq.n	8004308 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004300:	69ba      	ldr	r2, [r7, #24]
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	4313      	orrs	r3, r2
 8004306:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	69ba      	ldr	r2, [r7, #24]
 800430c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	43db      	mvns	r3, r3
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	4013      	ands	r3, r2
 800431c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	4313      	orrs	r3, r2
 8004330:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	3301      	adds	r3, #1
 800433c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	fa22 f303 	lsr.w	r3, r2, r3
 8004348:	2b00      	cmp	r3, #0
 800434a:	f47f ae63 	bne.w	8004014 <HAL_GPIO_Init+0x14>
  }
}
 800434e:	bf00      	nop
 8004350:	bf00      	nop
 8004352:	3724      	adds	r7, #36	@ 0x24
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	58000400 	.word	0x58000400

08004360 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	460b      	mov	r3, r1
 800436a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	691a      	ldr	r2, [r3, #16]
 8004370:	887b      	ldrh	r3, [r7, #2]
 8004372:	4013      	ands	r3, r2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d002      	beq.n	800437e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004378:	2301      	movs	r3, #1
 800437a:	73fb      	strb	r3, [r7, #15]
 800437c:	e001      	b.n	8004382 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800437e:	2300      	movs	r3, #0
 8004380:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004382:	7bfb      	ldrb	r3, [r7, #15]
}
 8004384:	4618      	mov	r0, r3
 8004386:	3714      	adds	r7, #20
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	460b      	mov	r3, r1
 800439a:	807b      	strh	r3, [r7, #2]
 800439c:	4613      	mov	r3, r2
 800439e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043a0:	787b      	ldrb	r3, [r7, #1]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043a6:	887a      	ldrh	r2, [r7, #2]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80043ac:	e003      	b.n	80043b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80043ae:	887b      	ldrh	r3, [r7, #2]
 80043b0:	041a      	lsls	r2, r3, #16
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	619a      	str	r2, [r3, #24]
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b085      	sub	sp, #20
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
 80043ca:	460b      	mov	r3, r1
 80043cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80043d4:	887a      	ldrh	r2, [r7, #2]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	4013      	ands	r3, r2
 80043da:	041a      	lsls	r2, r3, #16
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	43d9      	mvns	r1, r3
 80043e0:	887b      	ldrh	r3, [r7, #2]
 80043e2:	400b      	ands	r3, r1
 80043e4:	431a      	orrs	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	619a      	str	r2, [r3, #24]
}
 80043ea:	bf00      	nop
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b082      	sub	sp, #8
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	4603      	mov	r3, r0
 80043fe:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004400:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004404:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004408:	88fb      	ldrh	r3, [r7, #6]
 800440a:	4013      	ands	r3, r2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d008      	beq.n	8004422 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004410:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004414:	88fb      	ldrh	r3, [r7, #6]
 8004416:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800441a:	88fb      	ldrh	r3, [r7, #6]
 800441c:	4618      	mov	r0, r3
 800441e:	f7fc fabd 	bl	800099c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004422:	bf00      	nop
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
	...

0800442c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004434:	4b19      	ldr	r3, [pc, #100]	@ (800449c <HAL_PWREx_ConfigSupply+0x70>)
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	f003 0304 	and.w	r3, r3, #4
 800443c:	2b04      	cmp	r3, #4
 800443e:	d00a      	beq.n	8004456 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004440:	4b16      	ldr	r3, [pc, #88]	@ (800449c <HAL_PWREx_ConfigSupply+0x70>)
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	429a      	cmp	r2, r3
 800444c:	d001      	beq.n	8004452 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e01f      	b.n	8004492 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004452:	2300      	movs	r3, #0
 8004454:	e01d      	b.n	8004492 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004456:	4b11      	ldr	r3, [pc, #68]	@ (800449c <HAL_PWREx_ConfigSupply+0x70>)
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f023 0207 	bic.w	r2, r3, #7
 800445e:	490f      	ldr	r1, [pc, #60]	@ (800449c <HAL_PWREx_ConfigSupply+0x70>)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4313      	orrs	r3, r2
 8004464:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004466:	f7fd fb2f 	bl	8001ac8 <HAL_GetTick>
 800446a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800446c:	e009      	b.n	8004482 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800446e:	f7fd fb2b 	bl	8001ac8 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800447c:	d901      	bls.n	8004482 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e007      	b.n	8004492 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004482:	4b06      	ldr	r3, [pc, #24]	@ (800449c <HAL_PWREx_ConfigSupply+0x70>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800448a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800448e:	d1ee      	bne.n	800446e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	58024800 	.word	0x58024800

080044a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b08c      	sub	sp, #48	@ 0x30
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d102      	bne.n	80044b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	f000 bc48 	b.w	8004d44 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0301 	and.w	r3, r3, #1
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f000 8088 	beq.w	80045d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044c2:	4b99      	ldr	r3, [pc, #612]	@ (8004728 <HAL_RCC_OscConfig+0x288>)
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80044cc:	4b96      	ldr	r3, [pc, #600]	@ (8004728 <HAL_RCC_OscConfig+0x288>)
 80044ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80044d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044d4:	2b10      	cmp	r3, #16
 80044d6:	d007      	beq.n	80044e8 <HAL_RCC_OscConfig+0x48>
 80044d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044da:	2b18      	cmp	r3, #24
 80044dc:	d111      	bne.n	8004502 <HAL_RCC_OscConfig+0x62>
 80044de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e0:	f003 0303 	and.w	r3, r3, #3
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d10c      	bne.n	8004502 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044e8:	4b8f      	ldr	r3, [pc, #572]	@ (8004728 <HAL_RCC_OscConfig+0x288>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d06d      	beq.n	80045d0 <HAL_RCC_OscConfig+0x130>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d169      	bne.n	80045d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	f000 bc21 	b.w	8004d44 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800450a:	d106      	bne.n	800451a <HAL_RCC_OscConfig+0x7a>
 800450c:	4b86      	ldr	r3, [pc, #536]	@ (8004728 <HAL_RCC_OscConfig+0x288>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a85      	ldr	r2, [pc, #532]	@ (8004728 <HAL_RCC_OscConfig+0x288>)
 8004512:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004516:	6013      	str	r3, [r2, #0]
 8004518:	e02e      	b.n	8004578 <HAL_RCC_OscConfig+0xd8>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10c      	bne.n	800453c <HAL_RCC_OscConfig+0x9c>
 8004522:	4b81      	ldr	r3, [pc, #516]	@ (8004728 <HAL_RCC_OscConfig+0x288>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a80      	ldr	r2, [pc, #512]	@ (8004728 <HAL_RCC_OscConfig+0x288>)
 8004528:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800452c:	6013      	str	r3, [r2, #0]
 800452e:	4b7e      	ldr	r3, [pc, #504]	@ (8004728 <HAL_RCC_OscConfig+0x288>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a7d      	ldr	r2, [pc, #500]	@ (8004728 <HAL_RCC_OscConfig+0x288>)
 8004534:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004538:	6013      	str	r3, [r2, #0]
 800453a:	e01d      	b.n	8004578 <HAL_RCC_OscConfig+0xd8>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004544:	d10c      	bne.n	8004560 <HAL_RCC_OscConfig+0xc0>
 8004546:	4b78      	ldr	r3, [pc, #480]	@ (8004728 <HAL_RCC_OscConfig+0x288>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a77      	ldr	r2, [pc, #476]	@ (8004728 <HAL_RCC_OscConfig+0x288>)
 800454c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004550:	6013      	str	r3, [r2, #0]
 8004552:	4b75      	ldr	r3, [pc, #468]	@ (8004728 <HAL_RCC_OscConfig+0x288>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a74      	ldr	r2, [pc, #464]	@ (8004728 <HAL_RCC_OscConfig+0x288>)
 8004558:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800455c:	6013      	str	r3, [r2, #0]
 800455e:	e00b      	b.n	8004578 <HAL_RCC_OscConfig+0xd8>
 8004560:	4b71      	ldr	r3, [pc, #452]	@ (8004728 <HAL_RCC_OscConfig+0x288>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a70      	ldr	r2, [pc, #448]	@ (8004728 <HAL_RCC_OscConfig+0x288>)
 8004566:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800456a:	6013      	str	r3, [r2, #0]
 800456c:	4b6e      	ldr	r3, [pc, #440]	@ (8004728 <HAL_RCC_OscConfig+0x288>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a6d      	ldr	r2, [pc, #436]	@ (8004728 <HAL_RCC_OscConfig+0x288>)
 8004572:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004576:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d013      	beq.n	80045a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004580:	f7fd faa2 	bl	8001ac8 <HAL_GetTick>
 8004584:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004586:	e008      	b.n	800459a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004588:	f7fd fa9e 	bl	8001ac8 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b64      	cmp	r3, #100	@ 0x64
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e3d4      	b.n	8004d44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800459a:	4b63      	ldr	r3, [pc, #396]	@ (8004728 <HAL_RCC_OscConfig+0x288>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d0f0      	beq.n	8004588 <HAL_RCC_OscConfig+0xe8>
 80045a6:	e014      	b.n	80045d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a8:	f7fd fa8e 	bl	8001ac8 <HAL_GetTick>
 80045ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045b0:	f7fd fa8a 	bl	8001ac8 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b64      	cmp	r3, #100	@ 0x64
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e3c0      	b.n	8004d44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80045c2:	4b59      	ldr	r3, [pc, #356]	@ (8004728 <HAL_RCC_OscConfig+0x288>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1f0      	bne.n	80045b0 <HAL_RCC_OscConfig+0x110>
 80045ce:	e000      	b.n	80045d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f000 80ca 	beq.w	8004774 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045e0:	4b51      	ldr	r3, [pc, #324]	@ (8004728 <HAL_RCC_OscConfig+0x288>)
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045e8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80045ea:	4b4f      	ldr	r3, [pc, #316]	@ (8004728 <HAL_RCC_OscConfig+0x288>)
 80045ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80045f0:	6a3b      	ldr	r3, [r7, #32]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d007      	beq.n	8004606 <HAL_RCC_OscConfig+0x166>
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	2b18      	cmp	r3, #24
 80045fa:	d156      	bne.n	80046aa <HAL_RCC_OscConfig+0x20a>
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	f003 0303 	and.w	r3, r3, #3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d151      	bne.n	80046aa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004606:	4b48      	ldr	r3, [pc, #288]	@ (8004728 <HAL_RCC_OscConfig+0x288>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0304 	and.w	r3, r3, #4
 800460e:	2b00      	cmp	r3, #0
 8004610:	d005      	beq.n	800461e <HAL_RCC_OscConfig+0x17e>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e392      	b.n	8004d44 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800461e:	4b42      	ldr	r3, [pc, #264]	@ (8004728 <HAL_RCC_OscConfig+0x288>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f023 0219 	bic.w	r2, r3, #25
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	493f      	ldr	r1, [pc, #252]	@ (8004728 <HAL_RCC_OscConfig+0x288>)
 800462c:	4313      	orrs	r3, r2
 800462e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004630:	f7fd fa4a 	bl	8001ac8 <HAL_GetTick>
 8004634:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004636:	e008      	b.n	800464a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004638:	f7fd fa46 	bl	8001ac8 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e37c      	b.n	8004d44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800464a:	4b37      	ldr	r3, [pc, #220]	@ (8004728 <HAL_RCC_OscConfig+0x288>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0304 	and.w	r3, r3, #4
 8004652:	2b00      	cmp	r3, #0
 8004654:	d0f0      	beq.n	8004638 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004656:	f7fd fa67 	bl	8001b28 <HAL_GetREVID>
 800465a:	4603      	mov	r3, r0
 800465c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004660:	4293      	cmp	r3, r2
 8004662:	d817      	bhi.n	8004694 <HAL_RCC_OscConfig+0x1f4>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	2b40      	cmp	r3, #64	@ 0x40
 800466a:	d108      	bne.n	800467e <HAL_RCC_OscConfig+0x1de>
 800466c:	4b2e      	ldr	r3, [pc, #184]	@ (8004728 <HAL_RCC_OscConfig+0x288>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004674:	4a2c      	ldr	r2, [pc, #176]	@ (8004728 <HAL_RCC_OscConfig+0x288>)
 8004676:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800467a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800467c:	e07a      	b.n	8004774 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800467e:	4b2a      	ldr	r3, [pc, #168]	@ (8004728 <HAL_RCC_OscConfig+0x288>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	031b      	lsls	r3, r3, #12
 800468c:	4926      	ldr	r1, [pc, #152]	@ (8004728 <HAL_RCC_OscConfig+0x288>)
 800468e:	4313      	orrs	r3, r2
 8004690:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004692:	e06f      	b.n	8004774 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004694:	4b24      	ldr	r3, [pc, #144]	@ (8004728 <HAL_RCC_OscConfig+0x288>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	061b      	lsls	r3, r3, #24
 80046a2:	4921      	ldr	r1, [pc, #132]	@ (8004728 <HAL_RCC_OscConfig+0x288>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046a8:	e064      	b.n	8004774 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d047      	beq.n	8004742 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80046b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004728 <HAL_RCC_OscConfig+0x288>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f023 0219 	bic.w	r2, r3, #25
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	491a      	ldr	r1, [pc, #104]	@ (8004728 <HAL_RCC_OscConfig+0x288>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c4:	f7fd fa00 	bl	8001ac8 <HAL_GetTick>
 80046c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046ca:	e008      	b.n	80046de <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046cc:	f7fd f9fc 	bl	8001ac8 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e332      	b.n	8004d44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046de:	4b12      	ldr	r3, [pc, #72]	@ (8004728 <HAL_RCC_OscConfig+0x288>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0304 	and.w	r3, r3, #4
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0f0      	beq.n	80046cc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ea:	f7fd fa1d 	bl	8001b28 <HAL_GetREVID>
 80046ee:	4603      	mov	r3, r0
 80046f0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d819      	bhi.n	800472c <HAL_RCC_OscConfig+0x28c>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	2b40      	cmp	r3, #64	@ 0x40
 80046fe:	d108      	bne.n	8004712 <HAL_RCC_OscConfig+0x272>
 8004700:	4b09      	ldr	r3, [pc, #36]	@ (8004728 <HAL_RCC_OscConfig+0x288>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004708:	4a07      	ldr	r2, [pc, #28]	@ (8004728 <HAL_RCC_OscConfig+0x288>)
 800470a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800470e:	6053      	str	r3, [r2, #4]
 8004710:	e030      	b.n	8004774 <HAL_RCC_OscConfig+0x2d4>
 8004712:	4b05      	ldr	r3, [pc, #20]	@ (8004728 <HAL_RCC_OscConfig+0x288>)
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	031b      	lsls	r3, r3, #12
 8004720:	4901      	ldr	r1, [pc, #4]	@ (8004728 <HAL_RCC_OscConfig+0x288>)
 8004722:	4313      	orrs	r3, r2
 8004724:	604b      	str	r3, [r1, #4]
 8004726:	e025      	b.n	8004774 <HAL_RCC_OscConfig+0x2d4>
 8004728:	58024400 	.word	0x58024400
 800472c:	4b9a      	ldr	r3, [pc, #616]	@ (8004998 <HAL_RCC_OscConfig+0x4f8>)
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	061b      	lsls	r3, r3, #24
 800473a:	4997      	ldr	r1, [pc, #604]	@ (8004998 <HAL_RCC_OscConfig+0x4f8>)
 800473c:	4313      	orrs	r3, r2
 800473e:	604b      	str	r3, [r1, #4]
 8004740:	e018      	b.n	8004774 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004742:	4b95      	ldr	r3, [pc, #596]	@ (8004998 <HAL_RCC_OscConfig+0x4f8>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a94      	ldr	r2, [pc, #592]	@ (8004998 <HAL_RCC_OscConfig+0x4f8>)
 8004748:	f023 0301 	bic.w	r3, r3, #1
 800474c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474e:	f7fd f9bb 	bl	8001ac8 <HAL_GetTick>
 8004752:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004754:	e008      	b.n	8004768 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004756:	f7fd f9b7 	bl	8001ac8 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	2b02      	cmp	r3, #2
 8004762:	d901      	bls.n	8004768 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e2ed      	b.n	8004d44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004768:	4b8b      	ldr	r3, [pc, #556]	@ (8004998 <HAL_RCC_OscConfig+0x4f8>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1f0      	bne.n	8004756 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0310 	and.w	r3, r3, #16
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 80a9 	beq.w	80048d4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004782:	4b85      	ldr	r3, [pc, #532]	@ (8004998 <HAL_RCC_OscConfig+0x4f8>)
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800478a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800478c:	4b82      	ldr	r3, [pc, #520]	@ (8004998 <HAL_RCC_OscConfig+0x4f8>)
 800478e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004790:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	2b08      	cmp	r3, #8
 8004796:	d007      	beq.n	80047a8 <HAL_RCC_OscConfig+0x308>
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	2b18      	cmp	r3, #24
 800479c:	d13a      	bne.n	8004814 <HAL_RCC_OscConfig+0x374>
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f003 0303 	and.w	r3, r3, #3
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d135      	bne.n	8004814 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80047a8:	4b7b      	ldr	r3, [pc, #492]	@ (8004998 <HAL_RCC_OscConfig+0x4f8>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d005      	beq.n	80047c0 <HAL_RCC_OscConfig+0x320>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	69db      	ldr	r3, [r3, #28]
 80047b8:	2b80      	cmp	r3, #128	@ 0x80
 80047ba:	d001      	beq.n	80047c0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e2c1      	b.n	8004d44 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80047c0:	f7fd f9b2 	bl	8001b28 <HAL_GetREVID>
 80047c4:	4603      	mov	r3, r0
 80047c6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d817      	bhi.n	80047fe <HAL_RCC_OscConfig+0x35e>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	2b20      	cmp	r3, #32
 80047d4:	d108      	bne.n	80047e8 <HAL_RCC_OscConfig+0x348>
 80047d6:	4b70      	ldr	r3, [pc, #448]	@ (8004998 <HAL_RCC_OscConfig+0x4f8>)
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80047de:	4a6e      	ldr	r2, [pc, #440]	@ (8004998 <HAL_RCC_OscConfig+0x4f8>)
 80047e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80047e4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80047e6:	e075      	b.n	80048d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80047e8:	4b6b      	ldr	r3, [pc, #428]	@ (8004998 <HAL_RCC_OscConfig+0x4f8>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	069b      	lsls	r3, r3, #26
 80047f6:	4968      	ldr	r1, [pc, #416]	@ (8004998 <HAL_RCC_OscConfig+0x4f8>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80047fc:	e06a      	b.n	80048d4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80047fe:	4b66      	ldr	r3, [pc, #408]	@ (8004998 <HAL_RCC_OscConfig+0x4f8>)
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	061b      	lsls	r3, r3, #24
 800480c:	4962      	ldr	r1, [pc, #392]	@ (8004998 <HAL_RCC_OscConfig+0x4f8>)
 800480e:	4313      	orrs	r3, r2
 8004810:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004812:	e05f      	b.n	80048d4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	69db      	ldr	r3, [r3, #28]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d042      	beq.n	80048a2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800481c:	4b5e      	ldr	r3, [pc, #376]	@ (8004998 <HAL_RCC_OscConfig+0x4f8>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a5d      	ldr	r2, [pc, #372]	@ (8004998 <HAL_RCC_OscConfig+0x4f8>)
 8004822:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004826:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004828:	f7fd f94e 	bl	8001ac8 <HAL_GetTick>
 800482c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800482e:	e008      	b.n	8004842 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004830:	f7fd f94a 	bl	8001ac8 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b02      	cmp	r3, #2
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e280      	b.n	8004d44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004842:	4b55      	ldr	r3, [pc, #340]	@ (8004998 <HAL_RCC_OscConfig+0x4f8>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800484a:	2b00      	cmp	r3, #0
 800484c:	d0f0      	beq.n	8004830 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800484e:	f7fd f96b 	bl	8001b28 <HAL_GetREVID>
 8004852:	4603      	mov	r3, r0
 8004854:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004858:	4293      	cmp	r3, r2
 800485a:	d817      	bhi.n	800488c <HAL_RCC_OscConfig+0x3ec>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	2b20      	cmp	r3, #32
 8004862:	d108      	bne.n	8004876 <HAL_RCC_OscConfig+0x3d6>
 8004864:	4b4c      	ldr	r3, [pc, #304]	@ (8004998 <HAL_RCC_OscConfig+0x4f8>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800486c:	4a4a      	ldr	r2, [pc, #296]	@ (8004998 <HAL_RCC_OscConfig+0x4f8>)
 800486e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004872:	6053      	str	r3, [r2, #4]
 8004874:	e02e      	b.n	80048d4 <HAL_RCC_OscConfig+0x434>
 8004876:	4b48      	ldr	r3, [pc, #288]	@ (8004998 <HAL_RCC_OscConfig+0x4f8>)
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	069b      	lsls	r3, r3, #26
 8004884:	4944      	ldr	r1, [pc, #272]	@ (8004998 <HAL_RCC_OscConfig+0x4f8>)
 8004886:	4313      	orrs	r3, r2
 8004888:	604b      	str	r3, [r1, #4]
 800488a:	e023      	b.n	80048d4 <HAL_RCC_OscConfig+0x434>
 800488c:	4b42      	ldr	r3, [pc, #264]	@ (8004998 <HAL_RCC_OscConfig+0x4f8>)
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	061b      	lsls	r3, r3, #24
 800489a:	493f      	ldr	r1, [pc, #252]	@ (8004998 <HAL_RCC_OscConfig+0x4f8>)
 800489c:	4313      	orrs	r3, r2
 800489e:	60cb      	str	r3, [r1, #12]
 80048a0:	e018      	b.n	80048d4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80048a2:	4b3d      	ldr	r3, [pc, #244]	@ (8004998 <HAL_RCC_OscConfig+0x4f8>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a3c      	ldr	r2, [pc, #240]	@ (8004998 <HAL_RCC_OscConfig+0x4f8>)
 80048a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ae:	f7fd f90b 	bl	8001ac8 <HAL_GetTick>
 80048b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80048b4:	e008      	b.n	80048c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80048b6:	f7fd f907 	bl	8001ac8 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d901      	bls.n	80048c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e23d      	b.n	8004d44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80048c8:	4b33      	ldr	r3, [pc, #204]	@ (8004998 <HAL_RCC_OscConfig+0x4f8>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1f0      	bne.n	80048b6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0308 	and.w	r3, r3, #8
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d036      	beq.n	800494e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	695b      	ldr	r3, [r3, #20]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d019      	beq.n	800491c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048e8:	4b2b      	ldr	r3, [pc, #172]	@ (8004998 <HAL_RCC_OscConfig+0x4f8>)
 80048ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048ec:	4a2a      	ldr	r2, [pc, #168]	@ (8004998 <HAL_RCC_OscConfig+0x4f8>)
 80048ee:	f043 0301 	orr.w	r3, r3, #1
 80048f2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f4:	f7fd f8e8 	bl	8001ac8 <HAL_GetTick>
 80048f8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80048fa:	e008      	b.n	800490e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048fc:	f7fd f8e4 	bl	8001ac8 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b02      	cmp	r3, #2
 8004908:	d901      	bls.n	800490e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e21a      	b.n	8004d44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800490e:	4b22      	ldr	r3, [pc, #136]	@ (8004998 <HAL_RCC_OscConfig+0x4f8>)
 8004910:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d0f0      	beq.n	80048fc <HAL_RCC_OscConfig+0x45c>
 800491a:	e018      	b.n	800494e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800491c:	4b1e      	ldr	r3, [pc, #120]	@ (8004998 <HAL_RCC_OscConfig+0x4f8>)
 800491e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004920:	4a1d      	ldr	r2, [pc, #116]	@ (8004998 <HAL_RCC_OscConfig+0x4f8>)
 8004922:	f023 0301 	bic.w	r3, r3, #1
 8004926:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004928:	f7fd f8ce 	bl	8001ac8 <HAL_GetTick>
 800492c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800492e:	e008      	b.n	8004942 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004930:	f7fd f8ca 	bl	8001ac8 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b02      	cmp	r3, #2
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e200      	b.n	8004d44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004942:	4b15      	ldr	r3, [pc, #84]	@ (8004998 <HAL_RCC_OscConfig+0x4f8>)
 8004944:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1f0      	bne.n	8004930 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0320 	and.w	r3, r3, #32
 8004956:	2b00      	cmp	r3, #0
 8004958:	d039      	beq.n	80049ce <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d01c      	beq.n	800499c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004962:	4b0d      	ldr	r3, [pc, #52]	@ (8004998 <HAL_RCC_OscConfig+0x4f8>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a0c      	ldr	r2, [pc, #48]	@ (8004998 <HAL_RCC_OscConfig+0x4f8>)
 8004968:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800496c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800496e:	f7fd f8ab 	bl	8001ac8 <HAL_GetTick>
 8004972:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004974:	e008      	b.n	8004988 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004976:	f7fd f8a7 	bl	8001ac8 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	2b02      	cmp	r3, #2
 8004982:	d901      	bls.n	8004988 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e1dd      	b.n	8004d44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004988:	4b03      	ldr	r3, [pc, #12]	@ (8004998 <HAL_RCC_OscConfig+0x4f8>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d0f0      	beq.n	8004976 <HAL_RCC_OscConfig+0x4d6>
 8004994:	e01b      	b.n	80049ce <HAL_RCC_OscConfig+0x52e>
 8004996:	bf00      	nop
 8004998:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800499c:	4b9b      	ldr	r3, [pc, #620]	@ (8004c0c <HAL_RCC_OscConfig+0x76c>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a9a      	ldr	r2, [pc, #616]	@ (8004c0c <HAL_RCC_OscConfig+0x76c>)
 80049a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80049a6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80049a8:	f7fd f88e 	bl	8001ac8 <HAL_GetTick>
 80049ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049b0:	f7fd f88a 	bl	8001ac8 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e1c0      	b.n	8004d44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80049c2:	4b92      	ldr	r3, [pc, #584]	@ (8004c0c <HAL_RCC_OscConfig+0x76c>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1f0      	bne.n	80049b0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0304 	and.w	r3, r3, #4
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f000 8081 	beq.w	8004ade <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80049dc:	4b8c      	ldr	r3, [pc, #560]	@ (8004c10 <HAL_RCC_OscConfig+0x770>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a8b      	ldr	r2, [pc, #556]	@ (8004c10 <HAL_RCC_OscConfig+0x770>)
 80049e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049e8:	f7fd f86e 	bl	8001ac8 <HAL_GetTick>
 80049ec:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049ee:	e008      	b.n	8004a02 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049f0:	f7fd f86a 	bl	8001ac8 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b64      	cmp	r3, #100	@ 0x64
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e1a0      	b.n	8004d44 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a02:	4b83      	ldr	r3, [pc, #524]	@ (8004c10 <HAL_RCC_OscConfig+0x770>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0f0      	beq.n	80049f0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d106      	bne.n	8004a24 <HAL_RCC_OscConfig+0x584>
 8004a16:	4b7d      	ldr	r3, [pc, #500]	@ (8004c0c <HAL_RCC_OscConfig+0x76c>)
 8004a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a1a:	4a7c      	ldr	r2, [pc, #496]	@ (8004c0c <HAL_RCC_OscConfig+0x76c>)
 8004a1c:	f043 0301 	orr.w	r3, r3, #1
 8004a20:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a22:	e02d      	b.n	8004a80 <HAL_RCC_OscConfig+0x5e0>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10c      	bne.n	8004a46 <HAL_RCC_OscConfig+0x5a6>
 8004a2c:	4b77      	ldr	r3, [pc, #476]	@ (8004c0c <HAL_RCC_OscConfig+0x76c>)
 8004a2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a30:	4a76      	ldr	r2, [pc, #472]	@ (8004c0c <HAL_RCC_OscConfig+0x76c>)
 8004a32:	f023 0301 	bic.w	r3, r3, #1
 8004a36:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a38:	4b74      	ldr	r3, [pc, #464]	@ (8004c0c <HAL_RCC_OscConfig+0x76c>)
 8004a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a3c:	4a73      	ldr	r2, [pc, #460]	@ (8004c0c <HAL_RCC_OscConfig+0x76c>)
 8004a3e:	f023 0304 	bic.w	r3, r3, #4
 8004a42:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a44:	e01c      	b.n	8004a80 <HAL_RCC_OscConfig+0x5e0>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	2b05      	cmp	r3, #5
 8004a4c:	d10c      	bne.n	8004a68 <HAL_RCC_OscConfig+0x5c8>
 8004a4e:	4b6f      	ldr	r3, [pc, #444]	@ (8004c0c <HAL_RCC_OscConfig+0x76c>)
 8004a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a52:	4a6e      	ldr	r2, [pc, #440]	@ (8004c0c <HAL_RCC_OscConfig+0x76c>)
 8004a54:	f043 0304 	orr.w	r3, r3, #4
 8004a58:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a5a:	4b6c      	ldr	r3, [pc, #432]	@ (8004c0c <HAL_RCC_OscConfig+0x76c>)
 8004a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a5e:	4a6b      	ldr	r2, [pc, #428]	@ (8004c0c <HAL_RCC_OscConfig+0x76c>)
 8004a60:	f043 0301 	orr.w	r3, r3, #1
 8004a64:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a66:	e00b      	b.n	8004a80 <HAL_RCC_OscConfig+0x5e0>
 8004a68:	4b68      	ldr	r3, [pc, #416]	@ (8004c0c <HAL_RCC_OscConfig+0x76c>)
 8004a6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a6c:	4a67      	ldr	r2, [pc, #412]	@ (8004c0c <HAL_RCC_OscConfig+0x76c>)
 8004a6e:	f023 0301 	bic.w	r3, r3, #1
 8004a72:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a74:	4b65      	ldr	r3, [pc, #404]	@ (8004c0c <HAL_RCC_OscConfig+0x76c>)
 8004a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a78:	4a64      	ldr	r2, [pc, #400]	@ (8004c0c <HAL_RCC_OscConfig+0x76c>)
 8004a7a:	f023 0304 	bic.w	r3, r3, #4
 8004a7e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d015      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a88:	f7fd f81e 	bl	8001ac8 <HAL_GetTick>
 8004a8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a8e:	e00a      	b.n	8004aa6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a90:	f7fd f81a 	bl	8001ac8 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e14e      	b.n	8004d44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004aa6:	4b59      	ldr	r3, [pc, #356]	@ (8004c0c <HAL_RCC_OscConfig+0x76c>)
 8004aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d0ee      	beq.n	8004a90 <HAL_RCC_OscConfig+0x5f0>
 8004ab2:	e014      	b.n	8004ade <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ab4:	f7fd f808 	bl	8001ac8 <HAL_GetTick>
 8004ab8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004aba:	e00a      	b.n	8004ad2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004abc:	f7fd f804 	bl	8001ac8 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e138      	b.n	8004d44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004ad2:	4b4e      	ldr	r3, [pc, #312]	@ (8004c0c <HAL_RCC_OscConfig+0x76c>)
 8004ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1ee      	bne.n	8004abc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	f000 812d 	beq.w	8004d42 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004ae8:	4b48      	ldr	r3, [pc, #288]	@ (8004c0c <HAL_RCC_OscConfig+0x76c>)
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004af0:	2b18      	cmp	r3, #24
 8004af2:	f000 80bd 	beq.w	8004c70 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	f040 809e 	bne.w	8004c3c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b00:	4b42      	ldr	r3, [pc, #264]	@ (8004c0c <HAL_RCC_OscConfig+0x76c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a41      	ldr	r2, [pc, #260]	@ (8004c0c <HAL_RCC_OscConfig+0x76c>)
 8004b06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b0c:	f7fc ffdc 	bl	8001ac8 <HAL_GetTick>
 8004b10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b12:	e008      	b.n	8004b26 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b14:	f7fc ffd8 	bl	8001ac8 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e10e      	b.n	8004d44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b26:	4b39      	ldr	r3, [pc, #228]	@ (8004c0c <HAL_RCC_OscConfig+0x76c>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1f0      	bne.n	8004b14 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b32:	4b36      	ldr	r3, [pc, #216]	@ (8004c0c <HAL_RCC_OscConfig+0x76c>)
 8004b34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b36:	4b37      	ldr	r3, [pc, #220]	@ (8004c14 <HAL_RCC_OscConfig+0x774>)
 8004b38:	4013      	ands	r3, r2
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004b42:	0112      	lsls	r2, r2, #4
 8004b44:	430a      	orrs	r2, r1
 8004b46:	4931      	ldr	r1, [pc, #196]	@ (8004c0c <HAL_RCC_OscConfig+0x76c>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b50:	3b01      	subs	r3, #1
 8004b52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	025b      	lsls	r3, r3, #9
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	431a      	orrs	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b66:	3b01      	subs	r3, #1
 8004b68:	041b      	lsls	r3, r3, #16
 8004b6a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004b6e:	431a      	orrs	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b74:	3b01      	subs	r3, #1
 8004b76:	061b      	lsls	r3, r3, #24
 8004b78:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004b7c:	4923      	ldr	r1, [pc, #140]	@ (8004c0c <HAL_RCC_OscConfig+0x76c>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004b82:	4b22      	ldr	r3, [pc, #136]	@ (8004c0c <HAL_RCC_OscConfig+0x76c>)
 8004b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b86:	4a21      	ldr	r2, [pc, #132]	@ (8004c0c <HAL_RCC_OscConfig+0x76c>)
 8004b88:	f023 0301 	bic.w	r3, r3, #1
 8004b8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004b8e:	4b1f      	ldr	r3, [pc, #124]	@ (8004c0c <HAL_RCC_OscConfig+0x76c>)
 8004b90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b92:	4b21      	ldr	r3, [pc, #132]	@ (8004c18 <HAL_RCC_OscConfig+0x778>)
 8004b94:	4013      	ands	r3, r2
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004b9a:	00d2      	lsls	r2, r2, #3
 8004b9c:	491b      	ldr	r1, [pc, #108]	@ (8004c0c <HAL_RCC_OscConfig+0x76c>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004ba2:	4b1a      	ldr	r3, [pc, #104]	@ (8004c0c <HAL_RCC_OscConfig+0x76c>)
 8004ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba6:	f023 020c 	bic.w	r2, r3, #12
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bae:	4917      	ldr	r1, [pc, #92]	@ (8004c0c <HAL_RCC_OscConfig+0x76c>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004bb4:	4b15      	ldr	r3, [pc, #84]	@ (8004c0c <HAL_RCC_OscConfig+0x76c>)
 8004bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb8:	f023 0202 	bic.w	r2, r3, #2
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bc0:	4912      	ldr	r1, [pc, #72]	@ (8004c0c <HAL_RCC_OscConfig+0x76c>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004bc6:	4b11      	ldr	r3, [pc, #68]	@ (8004c0c <HAL_RCC_OscConfig+0x76c>)
 8004bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bca:	4a10      	ldr	r2, [pc, #64]	@ (8004c0c <HAL_RCC_OscConfig+0x76c>)
 8004bcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8004c0c <HAL_RCC_OscConfig+0x76c>)
 8004bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd6:	4a0d      	ldr	r2, [pc, #52]	@ (8004c0c <HAL_RCC_OscConfig+0x76c>)
 8004bd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bdc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004bde:	4b0b      	ldr	r3, [pc, #44]	@ (8004c0c <HAL_RCC_OscConfig+0x76c>)
 8004be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004be2:	4a0a      	ldr	r2, [pc, #40]	@ (8004c0c <HAL_RCC_OscConfig+0x76c>)
 8004be4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004be8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004bea:	4b08      	ldr	r3, [pc, #32]	@ (8004c0c <HAL_RCC_OscConfig+0x76c>)
 8004bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bee:	4a07      	ldr	r2, [pc, #28]	@ (8004c0c <HAL_RCC_OscConfig+0x76c>)
 8004bf0:	f043 0301 	orr.w	r3, r3, #1
 8004bf4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bf6:	4b05      	ldr	r3, [pc, #20]	@ (8004c0c <HAL_RCC_OscConfig+0x76c>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a04      	ldr	r2, [pc, #16]	@ (8004c0c <HAL_RCC_OscConfig+0x76c>)
 8004bfc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c02:	f7fc ff61 	bl	8001ac8 <HAL_GetTick>
 8004c06:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c08:	e011      	b.n	8004c2e <HAL_RCC_OscConfig+0x78e>
 8004c0a:	bf00      	nop
 8004c0c:	58024400 	.word	0x58024400
 8004c10:	58024800 	.word	0x58024800
 8004c14:	fffffc0c 	.word	0xfffffc0c
 8004c18:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c1c:	f7fc ff54 	bl	8001ac8 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e08a      	b.n	8004d44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c2e:	4b47      	ldr	r3, [pc, #284]	@ (8004d4c <HAL_RCC_OscConfig+0x8ac>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d0f0      	beq.n	8004c1c <HAL_RCC_OscConfig+0x77c>
 8004c3a:	e082      	b.n	8004d42 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c3c:	4b43      	ldr	r3, [pc, #268]	@ (8004d4c <HAL_RCC_OscConfig+0x8ac>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a42      	ldr	r2, [pc, #264]	@ (8004d4c <HAL_RCC_OscConfig+0x8ac>)
 8004c42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c48:	f7fc ff3e 	bl	8001ac8 <HAL_GetTick>
 8004c4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c50:	f7fc ff3a 	bl	8001ac8 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e070      	b.n	8004d44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c62:	4b3a      	ldr	r3, [pc, #232]	@ (8004d4c <HAL_RCC_OscConfig+0x8ac>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1f0      	bne.n	8004c50 <HAL_RCC_OscConfig+0x7b0>
 8004c6e:	e068      	b.n	8004d42 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004c70:	4b36      	ldr	r3, [pc, #216]	@ (8004d4c <HAL_RCC_OscConfig+0x8ac>)
 8004c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c74:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004c76:	4b35      	ldr	r3, [pc, #212]	@ (8004d4c <HAL_RCC_OscConfig+0x8ac>)
 8004c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c7a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d031      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	f003 0203 	and.w	r2, r3, #3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d12a      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	091b      	lsrs	r3, r3, #4
 8004c96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d122      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d11a      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	0a5b      	lsrs	r3, r3, #9
 8004cb6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cbe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d111      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	0c1b      	lsrs	r3, r3, #16
 8004cc8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cd0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d108      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	0e1b      	lsrs	r3, r3, #24
 8004cda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ce2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d001      	beq.n	8004cec <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e02b      	b.n	8004d44 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004cec:	4b17      	ldr	r3, [pc, #92]	@ (8004d4c <HAL_RCC_OscConfig+0x8ac>)
 8004cee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cf0:	08db      	lsrs	r3, r3, #3
 8004cf2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004cf6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d01f      	beq.n	8004d42 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004d02:	4b12      	ldr	r3, [pc, #72]	@ (8004d4c <HAL_RCC_OscConfig+0x8ac>)
 8004d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d06:	4a11      	ldr	r2, [pc, #68]	@ (8004d4c <HAL_RCC_OscConfig+0x8ac>)
 8004d08:	f023 0301 	bic.w	r3, r3, #1
 8004d0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d0e:	f7fc fedb 	bl	8001ac8 <HAL_GetTick>
 8004d12:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004d14:	bf00      	nop
 8004d16:	f7fc fed7 	bl	8001ac8 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d0f9      	beq.n	8004d16 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004d22:	4b0a      	ldr	r3, [pc, #40]	@ (8004d4c <HAL_RCC_OscConfig+0x8ac>)
 8004d24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d26:	4b0a      	ldr	r3, [pc, #40]	@ (8004d50 <HAL_RCC_OscConfig+0x8b0>)
 8004d28:	4013      	ands	r3, r2
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004d2e:	00d2      	lsls	r2, r2, #3
 8004d30:	4906      	ldr	r1, [pc, #24]	@ (8004d4c <HAL_RCC_OscConfig+0x8ac>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004d36:	4b05      	ldr	r3, [pc, #20]	@ (8004d4c <HAL_RCC_OscConfig+0x8ac>)
 8004d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d3a:	4a04      	ldr	r2, [pc, #16]	@ (8004d4c <HAL_RCC_OscConfig+0x8ac>)
 8004d3c:	f043 0301 	orr.w	r3, r3, #1
 8004d40:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3730      	adds	r7, #48	@ 0x30
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	58024400 	.word	0x58024400
 8004d50:	ffff0007 	.word	0xffff0007

08004d54 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d101      	bne.n	8004d68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e19c      	b.n	80050a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d68:	4b8a      	ldr	r3, [pc, #552]	@ (8004f94 <HAL_RCC_ClockConfig+0x240>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 030f 	and.w	r3, r3, #15
 8004d70:	683a      	ldr	r2, [r7, #0]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d910      	bls.n	8004d98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d76:	4b87      	ldr	r3, [pc, #540]	@ (8004f94 <HAL_RCC_ClockConfig+0x240>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f023 020f 	bic.w	r2, r3, #15
 8004d7e:	4985      	ldr	r1, [pc, #532]	@ (8004f94 <HAL_RCC_ClockConfig+0x240>)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d86:	4b83      	ldr	r3, [pc, #524]	@ (8004f94 <HAL_RCC_ClockConfig+0x240>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 030f 	and.w	r3, r3, #15
 8004d8e:	683a      	ldr	r2, [r7, #0]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d001      	beq.n	8004d98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e184      	b.n	80050a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 0304 	and.w	r3, r3, #4
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d010      	beq.n	8004dc6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	691a      	ldr	r2, [r3, #16]
 8004da8:	4b7b      	ldr	r3, [pc, #492]	@ (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d908      	bls.n	8004dc6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004db4:	4b78      	ldr	r3, [pc, #480]	@ (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	4975      	ldr	r1, [pc, #468]	@ (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0308 	and.w	r3, r3, #8
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d010      	beq.n	8004df4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	695a      	ldr	r2, [r3, #20]
 8004dd6:	4b70      	ldr	r3, [pc, #448]	@ (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d908      	bls.n	8004df4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004de2:	4b6d      	ldr	r3, [pc, #436]	@ (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	496a      	ldr	r1, [pc, #424]	@ (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0310 	and.w	r3, r3, #16
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d010      	beq.n	8004e22 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	699a      	ldr	r2, [r3, #24]
 8004e04:	4b64      	ldr	r3, [pc, #400]	@ (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004e06:	69db      	ldr	r3, [r3, #28]
 8004e08:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d908      	bls.n	8004e22 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e10:	4b61      	ldr	r3, [pc, #388]	@ (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004e12:	69db      	ldr	r3, [r3, #28]
 8004e14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	495e      	ldr	r1, [pc, #376]	@ (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0320 	and.w	r3, r3, #32
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d010      	beq.n	8004e50 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	69da      	ldr	r2, [r3, #28]
 8004e32:	4b59      	ldr	r3, [pc, #356]	@ (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d908      	bls.n	8004e50 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004e3e:	4b56      	ldr	r3, [pc, #344]	@ (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	4953      	ldr	r1, [pc, #332]	@ (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0302 	and.w	r3, r3, #2
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d010      	beq.n	8004e7e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68da      	ldr	r2, [r3, #12]
 8004e60:	4b4d      	ldr	r3, [pc, #308]	@ (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	f003 030f 	and.w	r3, r3, #15
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d908      	bls.n	8004e7e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e6c:	4b4a      	ldr	r3, [pc, #296]	@ (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	f023 020f 	bic.w	r2, r3, #15
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	4947      	ldr	r1, [pc, #284]	@ (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d055      	beq.n	8004f36 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004e8a:	4b43      	ldr	r3, [pc, #268]	@ (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	4940      	ldr	r1, [pc, #256]	@ (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d107      	bne.n	8004eb4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ea4:	4b3c      	ldr	r3, [pc, #240]	@ (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d121      	bne.n	8004ef4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e0f6      	b.n	80050a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	2b03      	cmp	r3, #3
 8004eba:	d107      	bne.n	8004ecc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ebc:	4b36      	ldr	r3, [pc, #216]	@ (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d115      	bne.n	8004ef4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e0ea      	b.n	80050a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d107      	bne.n	8004ee4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ed4:	4b30      	ldr	r3, [pc, #192]	@ (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d109      	bne.n	8004ef4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e0de      	b.n	80050a2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ee4:	4b2c      	ldr	r3, [pc, #176]	@ (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e0d6      	b.n	80050a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ef4:	4b28      	ldr	r3, [pc, #160]	@ (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	f023 0207 	bic.w	r2, r3, #7
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	4925      	ldr	r1, [pc, #148]	@ (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f06:	f7fc fddf 	bl	8001ac8 <HAL_GetTick>
 8004f0a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f0c:	e00a      	b.n	8004f24 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f0e:	f7fc fddb 	bl	8001ac8 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d901      	bls.n	8004f24 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e0be      	b.n	80050a2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f24:	4b1c      	ldr	r3, [pc, #112]	@ (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	00db      	lsls	r3, r3, #3
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d1eb      	bne.n	8004f0e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d010      	beq.n	8004f64 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68da      	ldr	r2, [r3, #12]
 8004f46:	4b14      	ldr	r3, [pc, #80]	@ (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	f003 030f 	and.w	r3, r3, #15
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d208      	bcs.n	8004f64 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f52:	4b11      	ldr	r3, [pc, #68]	@ (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	f023 020f 	bic.w	r2, r3, #15
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	490e      	ldr	r1, [pc, #56]	@ (8004f98 <HAL_RCC_ClockConfig+0x244>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f64:	4b0b      	ldr	r3, [pc, #44]	@ (8004f94 <HAL_RCC_ClockConfig+0x240>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 030f 	and.w	r3, r3, #15
 8004f6c:	683a      	ldr	r2, [r7, #0]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d214      	bcs.n	8004f9c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f72:	4b08      	ldr	r3, [pc, #32]	@ (8004f94 <HAL_RCC_ClockConfig+0x240>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f023 020f 	bic.w	r2, r3, #15
 8004f7a:	4906      	ldr	r1, [pc, #24]	@ (8004f94 <HAL_RCC_ClockConfig+0x240>)
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f82:	4b04      	ldr	r3, [pc, #16]	@ (8004f94 <HAL_RCC_ClockConfig+0x240>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 030f 	and.w	r3, r3, #15
 8004f8a:	683a      	ldr	r2, [r7, #0]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d005      	beq.n	8004f9c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e086      	b.n	80050a2 <HAL_RCC_ClockConfig+0x34e>
 8004f94:	52002000 	.word	0x52002000
 8004f98:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0304 	and.w	r3, r3, #4
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d010      	beq.n	8004fca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	691a      	ldr	r2, [r3, #16]
 8004fac:	4b3f      	ldr	r3, [pc, #252]	@ (80050ac <HAL_RCC_ClockConfig+0x358>)
 8004fae:	699b      	ldr	r3, [r3, #24]
 8004fb0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d208      	bcs.n	8004fca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004fb8:	4b3c      	ldr	r3, [pc, #240]	@ (80050ac <HAL_RCC_ClockConfig+0x358>)
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	4939      	ldr	r1, [pc, #228]	@ (80050ac <HAL_RCC_ClockConfig+0x358>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0308 	and.w	r3, r3, #8
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d010      	beq.n	8004ff8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	695a      	ldr	r2, [r3, #20]
 8004fda:	4b34      	ldr	r3, [pc, #208]	@ (80050ac <HAL_RCC_ClockConfig+0x358>)
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d208      	bcs.n	8004ff8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004fe6:	4b31      	ldr	r3, [pc, #196]	@ (80050ac <HAL_RCC_ClockConfig+0x358>)
 8004fe8:	69db      	ldr	r3, [r3, #28]
 8004fea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	492e      	ldr	r1, [pc, #184]	@ (80050ac <HAL_RCC_ClockConfig+0x358>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0310 	and.w	r3, r3, #16
 8005000:	2b00      	cmp	r3, #0
 8005002:	d010      	beq.n	8005026 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	699a      	ldr	r2, [r3, #24]
 8005008:	4b28      	ldr	r3, [pc, #160]	@ (80050ac <HAL_RCC_ClockConfig+0x358>)
 800500a:	69db      	ldr	r3, [r3, #28]
 800500c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005010:	429a      	cmp	r2, r3
 8005012:	d208      	bcs.n	8005026 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005014:	4b25      	ldr	r3, [pc, #148]	@ (80050ac <HAL_RCC_ClockConfig+0x358>)
 8005016:	69db      	ldr	r3, [r3, #28]
 8005018:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	4922      	ldr	r1, [pc, #136]	@ (80050ac <HAL_RCC_ClockConfig+0x358>)
 8005022:	4313      	orrs	r3, r2
 8005024:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0320 	and.w	r3, r3, #32
 800502e:	2b00      	cmp	r3, #0
 8005030:	d010      	beq.n	8005054 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	69da      	ldr	r2, [r3, #28]
 8005036:	4b1d      	ldr	r3, [pc, #116]	@ (80050ac <HAL_RCC_ClockConfig+0x358>)
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800503e:	429a      	cmp	r2, r3
 8005040:	d208      	bcs.n	8005054 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005042:	4b1a      	ldr	r3, [pc, #104]	@ (80050ac <HAL_RCC_ClockConfig+0x358>)
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	4917      	ldr	r1, [pc, #92]	@ (80050ac <HAL_RCC_ClockConfig+0x358>)
 8005050:	4313      	orrs	r3, r2
 8005052:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005054:	f000 f834 	bl	80050c0 <HAL_RCC_GetSysClockFreq>
 8005058:	4602      	mov	r2, r0
 800505a:	4b14      	ldr	r3, [pc, #80]	@ (80050ac <HAL_RCC_ClockConfig+0x358>)
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	0a1b      	lsrs	r3, r3, #8
 8005060:	f003 030f 	and.w	r3, r3, #15
 8005064:	4912      	ldr	r1, [pc, #72]	@ (80050b0 <HAL_RCC_ClockConfig+0x35c>)
 8005066:	5ccb      	ldrb	r3, [r1, r3]
 8005068:	f003 031f 	and.w	r3, r3, #31
 800506c:	fa22 f303 	lsr.w	r3, r2, r3
 8005070:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005072:	4b0e      	ldr	r3, [pc, #56]	@ (80050ac <HAL_RCC_ClockConfig+0x358>)
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	f003 030f 	and.w	r3, r3, #15
 800507a:	4a0d      	ldr	r2, [pc, #52]	@ (80050b0 <HAL_RCC_ClockConfig+0x35c>)
 800507c:	5cd3      	ldrb	r3, [r2, r3]
 800507e:	f003 031f 	and.w	r3, r3, #31
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	fa22 f303 	lsr.w	r3, r2, r3
 8005088:	4a0a      	ldr	r2, [pc, #40]	@ (80050b4 <HAL_RCC_ClockConfig+0x360>)
 800508a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800508c:	4a0a      	ldr	r2, [pc, #40]	@ (80050b8 <HAL_RCC_ClockConfig+0x364>)
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005092:	4b0a      	ldr	r3, [pc, #40]	@ (80050bc <HAL_RCC_ClockConfig+0x368>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4618      	mov	r0, r3
 8005098:	f7fc fccc 	bl	8001a34 <HAL_InitTick>
 800509c:	4603      	mov	r3, r0
 800509e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80050a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3718      	adds	r7, #24
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	58024400 	.word	0x58024400
 80050b0:	08009850 	.word	0x08009850
 80050b4:	24000004 	.word	0x24000004
 80050b8:	24000000 	.word	0x24000000
 80050bc:	24000008 	.word	0x24000008

080050c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b089      	sub	sp, #36	@ 0x24
 80050c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050c6:	4bb3      	ldr	r3, [pc, #716]	@ (8005394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050ce:	2b18      	cmp	r3, #24
 80050d0:	f200 8155 	bhi.w	800537e <HAL_RCC_GetSysClockFreq+0x2be>
 80050d4:	a201      	add	r2, pc, #4	@ (adr r2, 80050dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80050d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050da:	bf00      	nop
 80050dc:	08005141 	.word	0x08005141
 80050e0:	0800537f 	.word	0x0800537f
 80050e4:	0800537f 	.word	0x0800537f
 80050e8:	0800537f 	.word	0x0800537f
 80050ec:	0800537f 	.word	0x0800537f
 80050f0:	0800537f 	.word	0x0800537f
 80050f4:	0800537f 	.word	0x0800537f
 80050f8:	0800537f 	.word	0x0800537f
 80050fc:	08005167 	.word	0x08005167
 8005100:	0800537f 	.word	0x0800537f
 8005104:	0800537f 	.word	0x0800537f
 8005108:	0800537f 	.word	0x0800537f
 800510c:	0800537f 	.word	0x0800537f
 8005110:	0800537f 	.word	0x0800537f
 8005114:	0800537f 	.word	0x0800537f
 8005118:	0800537f 	.word	0x0800537f
 800511c:	0800516d 	.word	0x0800516d
 8005120:	0800537f 	.word	0x0800537f
 8005124:	0800537f 	.word	0x0800537f
 8005128:	0800537f 	.word	0x0800537f
 800512c:	0800537f 	.word	0x0800537f
 8005130:	0800537f 	.word	0x0800537f
 8005134:	0800537f 	.word	0x0800537f
 8005138:	0800537f 	.word	0x0800537f
 800513c:	08005173 	.word	0x08005173
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005140:	4b94      	ldr	r3, [pc, #592]	@ (8005394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0320 	and.w	r3, r3, #32
 8005148:	2b00      	cmp	r3, #0
 800514a:	d009      	beq.n	8005160 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800514c:	4b91      	ldr	r3, [pc, #580]	@ (8005394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	08db      	lsrs	r3, r3, #3
 8005152:	f003 0303 	and.w	r3, r3, #3
 8005156:	4a90      	ldr	r2, [pc, #576]	@ (8005398 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005158:	fa22 f303 	lsr.w	r3, r2, r3
 800515c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800515e:	e111      	b.n	8005384 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005160:	4b8d      	ldr	r3, [pc, #564]	@ (8005398 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005162:	61bb      	str	r3, [r7, #24]
      break;
 8005164:	e10e      	b.n	8005384 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005166:	4b8d      	ldr	r3, [pc, #564]	@ (800539c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005168:	61bb      	str	r3, [r7, #24]
      break;
 800516a:	e10b      	b.n	8005384 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800516c:	4b8c      	ldr	r3, [pc, #560]	@ (80053a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800516e:	61bb      	str	r3, [r7, #24]
      break;
 8005170:	e108      	b.n	8005384 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005172:	4b88      	ldr	r3, [pc, #544]	@ (8005394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005176:	f003 0303 	and.w	r3, r3, #3
 800517a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800517c:	4b85      	ldr	r3, [pc, #532]	@ (8005394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800517e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005180:	091b      	lsrs	r3, r3, #4
 8005182:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005186:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005188:	4b82      	ldr	r3, [pc, #520]	@ (8005394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800518a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005192:	4b80      	ldr	r3, [pc, #512]	@ (8005394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005194:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005196:	08db      	lsrs	r3, r3, #3
 8005198:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	fb02 f303 	mul.w	r3, r2, r3
 80051a2:	ee07 3a90 	vmov	s15, r3
 80051a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051aa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f000 80e1 	beq.w	8005378 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	f000 8083 	beq.w	80052c4 <HAL_RCC_GetSysClockFreq+0x204>
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	f200 80a1 	bhi.w	8005308 <HAL_RCC_GetSysClockFreq+0x248>
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d003      	beq.n	80051d4 <HAL_RCC_GetSysClockFreq+0x114>
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d056      	beq.n	8005280 <HAL_RCC_GetSysClockFreq+0x1c0>
 80051d2:	e099      	b.n	8005308 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051d4:	4b6f      	ldr	r3, [pc, #444]	@ (8005394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0320 	and.w	r3, r3, #32
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d02d      	beq.n	800523c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051e0:	4b6c      	ldr	r3, [pc, #432]	@ (8005394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	08db      	lsrs	r3, r3, #3
 80051e6:	f003 0303 	and.w	r3, r3, #3
 80051ea:	4a6b      	ldr	r2, [pc, #428]	@ (8005398 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80051ec:	fa22 f303 	lsr.w	r3, r2, r3
 80051f0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	ee07 3a90 	vmov	s15, r3
 80051f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	ee07 3a90 	vmov	s15, r3
 8005202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800520a:	4b62      	ldr	r3, [pc, #392]	@ (8005394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800520c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800520e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005212:	ee07 3a90 	vmov	s15, r3
 8005216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800521a:	ed97 6a02 	vldr	s12, [r7, #8]
 800521e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80053a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800522a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800522e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005236:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800523a:	e087      	b.n	800534c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	ee07 3a90 	vmov	s15, r3
 8005242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005246:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80053a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800524a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800524e:	4b51      	ldr	r3, [pc, #324]	@ (8005394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005256:	ee07 3a90 	vmov	s15, r3
 800525a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800525e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005262:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80053a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800526a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800526e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800527a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800527e:	e065      	b.n	800534c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	ee07 3a90 	vmov	s15, r3
 8005286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800528a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80053ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800528e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005292:	4b40      	ldr	r3, [pc, #256]	@ (8005394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800529a:	ee07 3a90 	vmov	s15, r3
 800529e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80052a6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80053a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80052aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80052c2:	e043      	b.n	800534c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	ee07 3a90 	vmov	s15, r3
 80052ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ce:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80053b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80052d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052d6:	4b2f      	ldr	r3, [pc, #188]	@ (8005394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052de:	ee07 3a90 	vmov	s15, r3
 80052e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80052ea:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80053a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80052ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005302:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005306:	e021      	b.n	800534c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	ee07 3a90 	vmov	s15, r3
 800530e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005312:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80053ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8005316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800531a:	4b1e      	ldr	r3, [pc, #120]	@ (8005394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800531c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800531e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005322:	ee07 3a90 	vmov	s15, r3
 8005326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800532a:	ed97 6a02 	vldr	s12, [r7, #8]
 800532e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80053a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800533a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800533e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005346:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800534a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800534c:	4b11      	ldr	r3, [pc, #68]	@ (8005394 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800534e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005350:	0a5b      	lsrs	r3, r3, #9
 8005352:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005356:	3301      	adds	r3, #1
 8005358:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	ee07 3a90 	vmov	s15, r3
 8005360:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005364:	edd7 6a07 	vldr	s13, [r7, #28]
 8005368:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800536c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005370:	ee17 3a90 	vmov	r3, s15
 8005374:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005376:	e005      	b.n	8005384 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005378:	2300      	movs	r3, #0
 800537a:	61bb      	str	r3, [r7, #24]
      break;
 800537c:	e002      	b.n	8005384 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800537e:	4b07      	ldr	r3, [pc, #28]	@ (800539c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005380:	61bb      	str	r3, [r7, #24]
      break;
 8005382:	bf00      	nop
  }

  return sysclockfreq;
 8005384:	69bb      	ldr	r3, [r7, #24]
}
 8005386:	4618      	mov	r0, r3
 8005388:	3724      	adds	r7, #36	@ 0x24
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	58024400 	.word	0x58024400
 8005398:	03d09000 	.word	0x03d09000
 800539c:	003d0900 	.word	0x003d0900
 80053a0:	017d7840 	.word	0x017d7840
 80053a4:	46000000 	.word	0x46000000
 80053a8:	4c742400 	.word	0x4c742400
 80053ac:	4a742400 	.word	0x4a742400
 80053b0:	4bbebc20 	.word	0x4bbebc20

080053b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80053ba:	f7ff fe81 	bl	80050c0 <HAL_RCC_GetSysClockFreq>
 80053be:	4602      	mov	r2, r0
 80053c0:	4b10      	ldr	r3, [pc, #64]	@ (8005404 <HAL_RCC_GetHCLKFreq+0x50>)
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	0a1b      	lsrs	r3, r3, #8
 80053c6:	f003 030f 	and.w	r3, r3, #15
 80053ca:	490f      	ldr	r1, [pc, #60]	@ (8005408 <HAL_RCC_GetHCLKFreq+0x54>)
 80053cc:	5ccb      	ldrb	r3, [r1, r3]
 80053ce:	f003 031f 	and.w	r3, r3, #31
 80053d2:	fa22 f303 	lsr.w	r3, r2, r3
 80053d6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80053d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005404 <HAL_RCC_GetHCLKFreq+0x50>)
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	f003 030f 	and.w	r3, r3, #15
 80053e0:	4a09      	ldr	r2, [pc, #36]	@ (8005408 <HAL_RCC_GetHCLKFreq+0x54>)
 80053e2:	5cd3      	ldrb	r3, [r2, r3]
 80053e4:	f003 031f 	and.w	r3, r3, #31
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	fa22 f303 	lsr.w	r3, r2, r3
 80053ee:	4a07      	ldr	r2, [pc, #28]	@ (800540c <HAL_RCC_GetHCLKFreq+0x58>)
 80053f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80053f2:	4a07      	ldr	r2, [pc, #28]	@ (8005410 <HAL_RCC_GetHCLKFreq+0x5c>)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80053f8:	4b04      	ldr	r3, [pc, #16]	@ (800540c <HAL_RCC_GetHCLKFreq+0x58>)
 80053fa:	681b      	ldr	r3, [r3, #0]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3708      	adds	r7, #8
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	58024400 	.word	0x58024400
 8005408:	08009850 	.word	0x08009850
 800540c:	24000004 	.word	0x24000004
 8005410:	24000000 	.word	0x24000000

08005414 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005418:	f7ff ffcc 	bl	80053b4 <HAL_RCC_GetHCLKFreq>
 800541c:	4602      	mov	r2, r0
 800541e:	4b06      	ldr	r3, [pc, #24]	@ (8005438 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005420:	69db      	ldr	r3, [r3, #28]
 8005422:	091b      	lsrs	r3, r3, #4
 8005424:	f003 0307 	and.w	r3, r3, #7
 8005428:	4904      	ldr	r1, [pc, #16]	@ (800543c <HAL_RCC_GetPCLK1Freq+0x28>)
 800542a:	5ccb      	ldrb	r3, [r1, r3]
 800542c:	f003 031f 	and.w	r3, r3, #31
 8005430:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005434:	4618      	mov	r0, r3
 8005436:	bd80      	pop	{r7, pc}
 8005438:	58024400 	.word	0x58024400
 800543c:	08009850 	.word	0x08009850

08005440 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005444:	f7ff ffb6 	bl	80053b4 <HAL_RCC_GetHCLKFreq>
 8005448:	4602      	mov	r2, r0
 800544a:	4b06      	ldr	r3, [pc, #24]	@ (8005464 <HAL_RCC_GetPCLK2Freq+0x24>)
 800544c:	69db      	ldr	r3, [r3, #28]
 800544e:	0a1b      	lsrs	r3, r3, #8
 8005450:	f003 0307 	and.w	r3, r3, #7
 8005454:	4904      	ldr	r1, [pc, #16]	@ (8005468 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005456:	5ccb      	ldrb	r3, [r1, r3]
 8005458:	f003 031f 	and.w	r3, r3, #31
 800545c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005460:	4618      	mov	r0, r3
 8005462:	bd80      	pop	{r7, pc}
 8005464:	58024400 	.word	0x58024400
 8005468:	08009850 	.word	0x08009850

0800546c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800546c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005470:	b0ca      	sub	sp, #296	@ 0x128
 8005472:	af00      	add	r7, sp, #0
 8005474:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005478:	2300      	movs	r3, #0
 800547a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800547e:	2300      	movs	r3, #0
 8005480:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005490:	2500      	movs	r5, #0
 8005492:	ea54 0305 	orrs.w	r3, r4, r5
 8005496:	d049      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800549c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800549e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80054a2:	d02f      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80054a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80054a8:	d828      	bhi.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80054aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80054ae:	d01a      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80054b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80054b4:	d822      	bhi.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d003      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80054ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054be:	d007      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80054c0:	e01c      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054c2:	4bb8      	ldr	r3, [pc, #736]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c6:	4ab7      	ldr	r2, [pc, #732]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80054ce:	e01a      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80054d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054d4:	3308      	adds	r3, #8
 80054d6:	2102      	movs	r1, #2
 80054d8:	4618      	mov	r0, r3
 80054da:	f001 fc8f 	bl	8006dfc <RCCEx_PLL2_Config>
 80054de:	4603      	mov	r3, r0
 80054e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80054e4:	e00f      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80054e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ea:	3328      	adds	r3, #40	@ 0x28
 80054ec:	2102      	movs	r1, #2
 80054ee:	4618      	mov	r0, r3
 80054f0:	f001 fd36 	bl	8006f60 <RCCEx_PLL3_Config>
 80054f4:	4603      	mov	r3, r0
 80054f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80054fa:	e004      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005502:	e000      	b.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005504:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005506:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10a      	bne.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800550e:	4ba5      	ldr	r3, [pc, #660]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005510:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005512:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800551a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800551c:	4aa1      	ldr	r2, [pc, #644]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800551e:	430b      	orrs	r3, r1
 8005520:	6513      	str	r3, [r2, #80]	@ 0x50
 8005522:	e003      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005524:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005528:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800552c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005534:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005538:	f04f 0900 	mov.w	r9, #0
 800553c:	ea58 0309 	orrs.w	r3, r8, r9
 8005540:	d047      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005548:	2b04      	cmp	r3, #4
 800554a:	d82a      	bhi.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800554c:	a201      	add	r2, pc, #4	@ (adr r2, 8005554 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800554e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005552:	bf00      	nop
 8005554:	08005569 	.word	0x08005569
 8005558:	08005577 	.word	0x08005577
 800555c:	0800558d 	.word	0x0800558d
 8005560:	080055ab 	.word	0x080055ab
 8005564:	080055ab 	.word	0x080055ab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005568:	4b8e      	ldr	r3, [pc, #568]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800556a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800556c:	4a8d      	ldr	r2, [pc, #564]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800556e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005572:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005574:	e01a      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800557a:	3308      	adds	r3, #8
 800557c:	2100      	movs	r1, #0
 800557e:	4618      	mov	r0, r3
 8005580:	f001 fc3c 	bl	8006dfc <RCCEx_PLL2_Config>
 8005584:	4603      	mov	r3, r0
 8005586:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800558a:	e00f      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800558c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005590:	3328      	adds	r3, #40	@ 0x28
 8005592:	2100      	movs	r1, #0
 8005594:	4618      	mov	r0, r3
 8005596:	f001 fce3 	bl	8006f60 <RCCEx_PLL3_Config>
 800559a:	4603      	mov	r3, r0
 800559c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055a0:	e004      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80055a8:	e000      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80055aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d10a      	bne.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055b4:	4b7b      	ldr	r3, [pc, #492]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055b8:	f023 0107 	bic.w	r1, r3, #7
 80055bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055c2:	4a78      	ldr	r2, [pc, #480]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055c4:	430b      	orrs	r3, r1
 80055c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80055c8:	e003      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80055d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055da:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80055de:	f04f 0b00 	mov.w	fp, #0
 80055e2:	ea5a 030b 	orrs.w	r3, sl, fp
 80055e6:	d04c      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80055e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055f2:	d030      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80055f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055f8:	d829      	bhi.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80055fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80055fc:	d02d      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80055fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8005600:	d825      	bhi.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005602:	2b80      	cmp	r3, #128	@ 0x80
 8005604:	d018      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005606:	2b80      	cmp	r3, #128	@ 0x80
 8005608:	d821      	bhi.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800560a:	2b00      	cmp	r3, #0
 800560c:	d002      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800560e:	2b40      	cmp	r3, #64	@ 0x40
 8005610:	d007      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005612:	e01c      	b.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005614:	4b63      	ldr	r3, [pc, #396]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005618:	4a62      	ldr	r2, [pc, #392]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800561a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800561e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005620:	e01c      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005626:	3308      	adds	r3, #8
 8005628:	2100      	movs	r1, #0
 800562a:	4618      	mov	r0, r3
 800562c:	f001 fbe6 	bl	8006dfc <RCCEx_PLL2_Config>
 8005630:	4603      	mov	r3, r0
 8005632:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005636:	e011      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800563c:	3328      	adds	r3, #40	@ 0x28
 800563e:	2100      	movs	r1, #0
 8005640:	4618      	mov	r0, r3
 8005642:	f001 fc8d 	bl	8006f60 <RCCEx_PLL3_Config>
 8005646:	4603      	mov	r3, r0
 8005648:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800564c:	e006      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005654:	e002      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005656:	bf00      	nop
 8005658:	e000      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800565a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800565c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10a      	bne.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005664:	4b4f      	ldr	r3, [pc, #316]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005666:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005668:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800566c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005670:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005672:	4a4c      	ldr	r2, [pc, #304]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005674:	430b      	orrs	r3, r1
 8005676:	6513      	str	r3, [r2, #80]	@ 0x50
 8005678:	e003      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800567a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800567e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800568e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005692:	2300      	movs	r3, #0
 8005694:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005698:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800569c:	460b      	mov	r3, r1
 800569e:	4313      	orrs	r3, r2
 80056a0:	d053      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80056a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80056aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80056ae:	d035      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80056b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80056b4:	d82e      	bhi.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80056b6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80056ba:	d031      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80056bc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80056c0:	d828      	bhi.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80056c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056c6:	d01a      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x292>
 80056c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056cc:	d822      	bhi.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d003      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80056d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056d6:	d007      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80056d8:	e01c      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056da:	4b32      	ldr	r3, [pc, #200]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056de:	4a31      	ldr	r2, [pc, #196]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056e6:	e01c      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ec:	3308      	adds	r3, #8
 80056ee:	2100      	movs	r1, #0
 80056f0:	4618      	mov	r0, r3
 80056f2:	f001 fb83 	bl	8006dfc <RCCEx_PLL2_Config>
 80056f6:	4603      	mov	r3, r0
 80056f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80056fc:	e011      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80056fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005702:	3328      	adds	r3, #40	@ 0x28
 8005704:	2100      	movs	r1, #0
 8005706:	4618      	mov	r0, r3
 8005708:	f001 fc2a 	bl	8006f60 <RCCEx_PLL3_Config>
 800570c:	4603      	mov	r3, r0
 800570e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005712:	e006      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800571a:	e002      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800571c:	bf00      	nop
 800571e:	e000      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005720:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005722:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005726:	2b00      	cmp	r3, #0
 8005728:	d10b      	bne.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800572a:	4b1e      	ldr	r3, [pc, #120]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800572c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800572e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005736:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800573a:	4a1a      	ldr	r2, [pc, #104]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800573c:	430b      	orrs	r3, r1
 800573e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005740:	e003      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005742:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005746:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800574a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800574e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005752:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005756:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800575a:	2300      	movs	r3, #0
 800575c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005760:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005764:	460b      	mov	r3, r1
 8005766:	4313      	orrs	r3, r2
 8005768:	d056      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800576a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800576e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005772:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005776:	d038      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005778:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800577c:	d831      	bhi.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800577e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005782:	d034      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005784:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005788:	d82b      	bhi.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800578a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800578e:	d01d      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005790:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005794:	d825      	bhi.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005796:	2b00      	cmp	r3, #0
 8005798:	d006      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800579a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800579e:	d00a      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80057a0:	e01f      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80057a2:	bf00      	nop
 80057a4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057a8:	4ba2      	ldr	r3, [pc, #648]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ac:	4aa1      	ldr	r2, [pc, #644]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80057b4:	e01c      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ba:	3308      	adds	r3, #8
 80057bc:	2100      	movs	r1, #0
 80057be:	4618      	mov	r0, r3
 80057c0:	f001 fb1c 	bl	8006dfc <RCCEx_PLL2_Config>
 80057c4:	4603      	mov	r3, r0
 80057c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80057ca:	e011      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057d0:	3328      	adds	r3, #40	@ 0x28
 80057d2:	2100      	movs	r1, #0
 80057d4:	4618      	mov	r0, r3
 80057d6:	f001 fbc3 	bl	8006f60 <RCCEx_PLL3_Config>
 80057da:	4603      	mov	r3, r0
 80057dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80057e0:	e006      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057e8:	e002      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80057ea:	bf00      	nop
 80057ec:	e000      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80057ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10b      	bne.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80057f8:	4b8e      	ldr	r3, [pc, #568]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057fc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005804:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005808:	4a8a      	ldr	r2, [pc, #552]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800580a:	430b      	orrs	r3, r1
 800580c:	6593      	str	r3, [r2, #88]	@ 0x58
 800580e:	e003      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005810:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005814:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800581c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005820:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005824:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005828:	2300      	movs	r3, #0
 800582a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800582e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005832:	460b      	mov	r3, r1
 8005834:	4313      	orrs	r3, r2
 8005836:	d03a      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800583c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800583e:	2b30      	cmp	r3, #48	@ 0x30
 8005840:	d01f      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005842:	2b30      	cmp	r3, #48	@ 0x30
 8005844:	d819      	bhi.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005846:	2b20      	cmp	r3, #32
 8005848:	d00c      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800584a:	2b20      	cmp	r3, #32
 800584c:	d815      	bhi.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800584e:	2b00      	cmp	r3, #0
 8005850:	d019      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005852:	2b10      	cmp	r3, #16
 8005854:	d111      	bne.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005856:	4b77      	ldr	r3, [pc, #476]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800585a:	4a76      	ldr	r2, [pc, #472]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800585c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005860:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005862:	e011      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005868:	3308      	adds	r3, #8
 800586a:	2102      	movs	r1, #2
 800586c:	4618      	mov	r0, r3
 800586e:	f001 fac5 	bl	8006dfc <RCCEx_PLL2_Config>
 8005872:	4603      	mov	r3, r0
 8005874:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005878:	e006      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005880:	e002      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005882:	bf00      	nop
 8005884:	e000      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005886:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005888:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10a      	bne.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005890:	4b68      	ldr	r3, [pc, #416]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005892:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005894:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800589c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800589e:	4a65      	ldr	r2, [pc, #404]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058a0:	430b      	orrs	r3, r1
 80058a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80058a4:	e003      	b.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80058ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80058ba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80058be:	2300      	movs	r3, #0
 80058c0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80058c4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80058c8:	460b      	mov	r3, r1
 80058ca:	4313      	orrs	r3, r2
 80058cc:	d051      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80058ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058d8:	d035      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80058da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058de:	d82e      	bhi.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80058e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80058e4:	d031      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80058e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80058ea:	d828      	bhi.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80058ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058f0:	d01a      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80058f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058f6:	d822      	bhi.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d003      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80058fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005900:	d007      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005902:	e01c      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005904:	4b4b      	ldr	r3, [pc, #300]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005908:	4a4a      	ldr	r2, [pc, #296]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800590a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800590e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005910:	e01c      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005916:	3308      	adds	r3, #8
 8005918:	2100      	movs	r1, #0
 800591a:	4618      	mov	r0, r3
 800591c:	f001 fa6e 	bl	8006dfc <RCCEx_PLL2_Config>
 8005920:	4603      	mov	r3, r0
 8005922:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005926:	e011      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800592c:	3328      	adds	r3, #40	@ 0x28
 800592e:	2100      	movs	r1, #0
 8005930:	4618      	mov	r0, r3
 8005932:	f001 fb15 	bl	8006f60 <RCCEx_PLL3_Config>
 8005936:	4603      	mov	r3, r0
 8005938:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800593c:	e006      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005944:	e002      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005946:	bf00      	nop
 8005948:	e000      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800594a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800594c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10a      	bne.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005954:	4b37      	ldr	r3, [pc, #220]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005956:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005958:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800595c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005962:	4a34      	ldr	r2, [pc, #208]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005964:	430b      	orrs	r3, r1
 8005966:	6513      	str	r3, [r2, #80]	@ 0x50
 8005968:	e003      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800596a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800596e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800597e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005982:	2300      	movs	r3, #0
 8005984:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005988:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800598c:	460b      	mov	r3, r1
 800598e:	4313      	orrs	r3, r2
 8005990:	d056      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005996:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005998:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800599c:	d033      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800599e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059a2:	d82c      	bhi.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80059a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80059a8:	d02f      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80059aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80059ae:	d826      	bhi.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80059b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80059b4:	d02b      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80059b6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80059ba:	d820      	bhi.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80059bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059c0:	d012      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80059c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059c6:	d81a      	bhi.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d022      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80059cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059d0:	d115      	bne.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d6:	3308      	adds	r3, #8
 80059d8:	2101      	movs	r1, #1
 80059da:	4618      	mov	r0, r3
 80059dc:	f001 fa0e 	bl	8006dfc <RCCEx_PLL2_Config>
 80059e0:	4603      	mov	r3, r0
 80059e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80059e6:	e015      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ec:	3328      	adds	r3, #40	@ 0x28
 80059ee:	2101      	movs	r1, #1
 80059f0:	4618      	mov	r0, r3
 80059f2:	f001 fab5 	bl	8006f60 <RCCEx_PLL3_Config>
 80059f6:	4603      	mov	r3, r0
 80059f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80059fc:	e00a      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a04:	e006      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005a06:	bf00      	nop
 8005a08:	e004      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005a0a:	bf00      	nop
 8005a0c:	e002      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005a0e:	bf00      	nop
 8005a10:	e000      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005a12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d10d      	bne.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005a1c:	4b05      	ldr	r3, [pc, #20]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a20:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a2a:	4a02      	ldr	r2, [pc, #8]	@ (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a2c:	430b      	orrs	r3, r1
 8005a2e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a30:	e006      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005a32:	bf00      	nop
 8005a34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a48:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005a4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a50:	2300      	movs	r3, #0
 8005a52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a56:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	d055      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005a68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a6c:	d033      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005a6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a72:	d82c      	bhi.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005a74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a78:	d02f      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a7e:	d826      	bhi.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005a80:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005a84:	d02b      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005a86:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005a8a:	d820      	bhi.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005a8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a90:	d012      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005a92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a96:	d81a      	bhi.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d022      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005a9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005aa0:	d115      	bne.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aa6:	3308      	adds	r3, #8
 8005aa8:	2101      	movs	r1, #1
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f001 f9a6 	bl	8006dfc <RCCEx_PLL2_Config>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005ab6:	e015      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005abc:	3328      	adds	r3, #40	@ 0x28
 8005abe:	2101      	movs	r1, #1
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f001 fa4d 	bl	8006f60 <RCCEx_PLL3_Config>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005acc:	e00a      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ad4:	e006      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005ad6:	bf00      	nop
 8005ad8:	e004      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005ada:	bf00      	nop
 8005adc:	e002      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005ade:	bf00      	nop
 8005ae0:	e000      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005ae2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ae4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d10b      	bne.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005aec:	4ba3      	ldr	r3, [pc, #652]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005af0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005afc:	4a9f      	ldr	r2, [pc, #636]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005afe:	430b      	orrs	r3, r1
 8005b00:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b02:	e003      	b.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b14:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005b18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005b22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005b26:	460b      	mov	r3, r1
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	d037      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b36:	d00e      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005b38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b3c:	d816      	bhi.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d018      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005b42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b46:	d111      	bne.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b48:	4b8c      	ldr	r3, [pc, #560]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b4c:	4a8b      	ldr	r2, [pc, #556]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005b54:	e00f      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b5a:	3308      	adds	r3, #8
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f001 f94c 	bl	8006dfc <RCCEx_PLL2_Config>
 8005b64:	4603      	mov	r3, r0
 8005b66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005b6a:	e004      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b72:	e000      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005b74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10a      	bne.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005b7e:	4b7f      	ldr	r3, [pc, #508]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b82:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b8c:	4a7b      	ldr	r2, [pc, #492]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b8e:	430b      	orrs	r3, r1
 8005b90:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b92:	e003      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005ba8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005bac:	2300      	movs	r3, #0
 8005bae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005bb2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	d039      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bc2:	2b03      	cmp	r3, #3
 8005bc4:	d81c      	bhi.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005bc6:	a201      	add	r2, pc, #4	@ (adr r2, 8005bcc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bcc:	08005c09 	.word	0x08005c09
 8005bd0:	08005bdd 	.word	0x08005bdd
 8005bd4:	08005beb 	.word	0x08005beb
 8005bd8:	08005c09 	.word	0x08005c09
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bdc:	4b67      	ldr	r3, [pc, #412]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be0:	4a66      	ldr	r2, [pc, #408]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005be2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005be6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005be8:	e00f      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bee:	3308      	adds	r3, #8
 8005bf0:	2102      	movs	r1, #2
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f001 f902 	bl	8006dfc <RCCEx_PLL2_Config>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005bfe:	e004      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c06:	e000      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005c08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10a      	bne.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005c12:	4b5a      	ldr	r3, [pc, #360]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c16:	f023 0103 	bic.w	r1, r3, #3
 8005c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c20:	4a56      	ldr	r2, [pc, #344]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c22:	430b      	orrs	r3, r1
 8005c24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005c26:	e003      	b.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c38:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005c3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c40:	2300      	movs	r3, #0
 8005c42:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005c46:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	f000 809f 	beq.w	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c52:	4b4b      	ldr	r3, [pc, #300]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a4a      	ldr	r2, [pc, #296]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005c58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c5e:	f7fb ff33 	bl	8001ac8 <HAL_GetTick>
 8005c62:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c66:	e00b      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c68:	f7fb ff2e 	bl	8001ac8 <HAL_GetTick>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	2b64      	cmp	r3, #100	@ 0x64
 8005c76:	d903      	bls.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c7e:	e005      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c80:	4b3f      	ldr	r3, [pc, #252]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d0ed      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005c8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d179      	bne.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005c94:	4b39      	ldr	r3, [pc, #228]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c96:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c9c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005ca0:	4053      	eors	r3, r2
 8005ca2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d015      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005caa:	4b34      	ldr	r3, [pc, #208]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cb2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005cb6:	4b31      	ldr	r3, [pc, #196]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cba:	4a30      	ldr	r2, [pc, #192]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cc0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005cc2:	4b2e      	ldr	r3, [pc, #184]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cc6:	4a2d      	ldr	r2, [pc, #180]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ccc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005cce:	4a2b      	ldr	r2, [pc, #172]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cd4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cda:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005cde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ce2:	d118      	bne.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce4:	f7fb fef0 	bl	8001ac8 <HAL_GetTick>
 8005ce8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005cec:	e00d      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cee:	f7fb feeb 	bl	8001ac8 <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005cf8:	1ad2      	subs	r2, r2, r3
 8005cfa:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d903      	bls.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005d08:	e005      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d0e:	f003 0302 	and.w	r3, r3, #2
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d0eb      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005d16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d129      	bne.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d2e:	d10e      	bne.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005d30:	4b12      	ldr	r3, [pc, #72]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d40:	091a      	lsrs	r2, r3, #4
 8005d42:	4b10      	ldr	r3, [pc, #64]	@ (8005d84 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005d44:	4013      	ands	r3, r2
 8005d46:	4a0d      	ldr	r2, [pc, #52]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d48:	430b      	orrs	r3, r1
 8005d4a:	6113      	str	r3, [r2, #16]
 8005d4c:	e005      	b.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	4a0a      	ldr	r2, [pc, #40]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d54:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005d58:	6113      	str	r3, [r2, #16]
 8005d5a:	4b08      	ldr	r3, [pc, #32]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d5c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d6a:	4a04      	ldr	r2, [pc, #16]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d6c:	430b      	orrs	r3, r1
 8005d6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d70:	e00e      	b.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005d7a:	e009      	b.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005d7c:	58024400 	.word	0x58024400
 8005d80:	58024800 	.word	0x58024800
 8005d84:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d98:	f002 0301 	and.w	r3, r2, #1
 8005d9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005da0:	2300      	movs	r3, #0
 8005da2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005da6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005daa:	460b      	mov	r3, r1
 8005dac:	4313      	orrs	r3, r2
 8005dae:	f000 8089 	beq.w	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005db6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005db8:	2b28      	cmp	r3, #40	@ 0x28
 8005dba:	d86b      	bhi.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc2:	bf00      	nop
 8005dc4:	08005e9d 	.word	0x08005e9d
 8005dc8:	08005e95 	.word	0x08005e95
 8005dcc:	08005e95 	.word	0x08005e95
 8005dd0:	08005e95 	.word	0x08005e95
 8005dd4:	08005e95 	.word	0x08005e95
 8005dd8:	08005e95 	.word	0x08005e95
 8005ddc:	08005e95 	.word	0x08005e95
 8005de0:	08005e95 	.word	0x08005e95
 8005de4:	08005e69 	.word	0x08005e69
 8005de8:	08005e95 	.word	0x08005e95
 8005dec:	08005e95 	.word	0x08005e95
 8005df0:	08005e95 	.word	0x08005e95
 8005df4:	08005e95 	.word	0x08005e95
 8005df8:	08005e95 	.word	0x08005e95
 8005dfc:	08005e95 	.word	0x08005e95
 8005e00:	08005e95 	.word	0x08005e95
 8005e04:	08005e7f 	.word	0x08005e7f
 8005e08:	08005e95 	.word	0x08005e95
 8005e0c:	08005e95 	.word	0x08005e95
 8005e10:	08005e95 	.word	0x08005e95
 8005e14:	08005e95 	.word	0x08005e95
 8005e18:	08005e95 	.word	0x08005e95
 8005e1c:	08005e95 	.word	0x08005e95
 8005e20:	08005e95 	.word	0x08005e95
 8005e24:	08005e9d 	.word	0x08005e9d
 8005e28:	08005e95 	.word	0x08005e95
 8005e2c:	08005e95 	.word	0x08005e95
 8005e30:	08005e95 	.word	0x08005e95
 8005e34:	08005e95 	.word	0x08005e95
 8005e38:	08005e95 	.word	0x08005e95
 8005e3c:	08005e95 	.word	0x08005e95
 8005e40:	08005e95 	.word	0x08005e95
 8005e44:	08005e9d 	.word	0x08005e9d
 8005e48:	08005e95 	.word	0x08005e95
 8005e4c:	08005e95 	.word	0x08005e95
 8005e50:	08005e95 	.word	0x08005e95
 8005e54:	08005e95 	.word	0x08005e95
 8005e58:	08005e95 	.word	0x08005e95
 8005e5c:	08005e95 	.word	0x08005e95
 8005e60:	08005e95 	.word	0x08005e95
 8005e64:	08005e9d 	.word	0x08005e9d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e6c:	3308      	adds	r3, #8
 8005e6e:	2101      	movs	r1, #1
 8005e70:	4618      	mov	r0, r3
 8005e72:	f000 ffc3 	bl	8006dfc <RCCEx_PLL2_Config>
 8005e76:	4603      	mov	r3, r0
 8005e78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005e7c:	e00f      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e82:	3328      	adds	r3, #40	@ 0x28
 8005e84:	2101      	movs	r1, #1
 8005e86:	4618      	mov	r0, r3
 8005e88:	f001 f86a 	bl	8006f60 <RCCEx_PLL3_Config>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005e92:	e004      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e9a:	e000      	b.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005e9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10a      	bne.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005ea6:	4bbf      	ldr	r3, [pc, #764]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eaa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eb2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005eb4:	4abb      	ldr	r2, [pc, #748]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005eb6:	430b      	orrs	r3, r1
 8005eb8:	6553      	str	r3, [r2, #84]	@ 0x54
 8005eba:	e003      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ebc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ec0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ecc:	f002 0302 	and.w	r3, r2, #2
 8005ed0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005eda:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005ede:	460b      	mov	r3, r1
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	d041      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ee8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005eea:	2b05      	cmp	r3, #5
 8005eec:	d824      	bhi.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005eee:	a201      	add	r2, pc, #4	@ (adr r2, 8005ef4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef4:	08005f41 	.word	0x08005f41
 8005ef8:	08005f0d 	.word	0x08005f0d
 8005efc:	08005f23 	.word	0x08005f23
 8005f00:	08005f41 	.word	0x08005f41
 8005f04:	08005f41 	.word	0x08005f41
 8005f08:	08005f41 	.word	0x08005f41
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f10:	3308      	adds	r3, #8
 8005f12:	2101      	movs	r1, #1
 8005f14:	4618      	mov	r0, r3
 8005f16:	f000 ff71 	bl	8006dfc <RCCEx_PLL2_Config>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005f20:	e00f      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f26:	3328      	adds	r3, #40	@ 0x28
 8005f28:	2101      	movs	r1, #1
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f001 f818 	bl	8006f60 <RCCEx_PLL3_Config>
 8005f30:	4603      	mov	r3, r0
 8005f32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005f36:	e004      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f3e:	e000      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005f40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d10a      	bne.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005f4a:	4b96      	ldr	r3, [pc, #600]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f4e:	f023 0107 	bic.w	r1, r3, #7
 8005f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f56:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005f58:	4a92      	ldr	r2, [pc, #584]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f5a:	430b      	orrs	r3, r1
 8005f5c:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f5e:	e003      	b.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f70:	f002 0304 	and.w	r3, r2, #4
 8005f74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f78:	2300      	movs	r3, #0
 8005f7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f7e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005f82:	460b      	mov	r3, r1
 8005f84:	4313      	orrs	r3, r2
 8005f86:	d044      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f90:	2b05      	cmp	r3, #5
 8005f92:	d825      	bhi.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005f94:	a201      	add	r2, pc, #4	@ (adr r2, 8005f9c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f9a:	bf00      	nop
 8005f9c:	08005fe9 	.word	0x08005fe9
 8005fa0:	08005fb5 	.word	0x08005fb5
 8005fa4:	08005fcb 	.word	0x08005fcb
 8005fa8:	08005fe9 	.word	0x08005fe9
 8005fac:	08005fe9 	.word	0x08005fe9
 8005fb0:	08005fe9 	.word	0x08005fe9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fb8:	3308      	adds	r3, #8
 8005fba:	2101      	movs	r1, #1
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f000 ff1d 	bl	8006dfc <RCCEx_PLL2_Config>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005fc8:	e00f      	b.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fce:	3328      	adds	r3, #40	@ 0x28
 8005fd0:	2101      	movs	r1, #1
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f000 ffc4 	bl	8006f60 <RCCEx_PLL3_Config>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005fde:	e004      	b.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005fe6:	e000      	b.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005fe8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10b      	bne.n	800600a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ff2:	4b6c      	ldr	r3, [pc, #432]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ff6:	f023 0107 	bic.w	r1, r3, #7
 8005ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006002:	4a68      	ldr	r2, [pc, #416]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006004:	430b      	orrs	r3, r1
 8006006:	6593      	str	r3, [r2, #88]	@ 0x58
 8006008:	e003      	b.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800600a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800600e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601a:	f002 0320 	and.w	r3, r2, #32
 800601e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006022:	2300      	movs	r3, #0
 8006024:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006028:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800602c:	460b      	mov	r3, r1
 800602e:	4313      	orrs	r3, r2
 8006030:	d055      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800603a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800603e:	d033      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006040:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006044:	d82c      	bhi.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006046:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800604a:	d02f      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800604c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006050:	d826      	bhi.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006052:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006056:	d02b      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006058:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800605c:	d820      	bhi.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800605e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006062:	d012      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006064:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006068:	d81a      	bhi.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800606a:	2b00      	cmp	r3, #0
 800606c:	d022      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800606e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006072:	d115      	bne.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006074:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006078:	3308      	adds	r3, #8
 800607a:	2100      	movs	r1, #0
 800607c:	4618      	mov	r0, r3
 800607e:	f000 febd 	bl	8006dfc <RCCEx_PLL2_Config>
 8006082:	4603      	mov	r3, r0
 8006084:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006088:	e015      	b.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800608a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800608e:	3328      	adds	r3, #40	@ 0x28
 8006090:	2102      	movs	r1, #2
 8006092:	4618      	mov	r0, r3
 8006094:	f000 ff64 	bl	8006f60 <RCCEx_PLL3_Config>
 8006098:	4603      	mov	r3, r0
 800609a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800609e:	e00a      	b.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060a6:	e006      	b.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80060a8:	bf00      	nop
 80060aa:	e004      	b.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80060ac:	bf00      	nop
 80060ae:	e002      	b.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80060b0:	bf00      	nop
 80060b2:	e000      	b.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80060b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d10b      	bne.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060be:	4b39      	ldr	r3, [pc, #228]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80060c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060c2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80060c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ce:	4a35      	ldr	r2, [pc, #212]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80060d0:	430b      	orrs	r3, r1
 80060d2:	6553      	str	r3, [r2, #84]	@ 0x54
 80060d4:	e003      	b.n	80060de <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80060de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80060ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80060ee:	2300      	movs	r3, #0
 80060f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80060f4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80060f8:	460b      	mov	r3, r1
 80060fa:	4313      	orrs	r3, r2
 80060fc:	d058      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80060fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006102:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006106:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800610a:	d033      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800610c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006110:	d82c      	bhi.n	800616c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006112:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006116:	d02f      	beq.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006118:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800611c:	d826      	bhi.n	800616c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800611e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006122:	d02b      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006124:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006128:	d820      	bhi.n	800616c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800612a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800612e:	d012      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006130:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006134:	d81a      	bhi.n	800616c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006136:	2b00      	cmp	r3, #0
 8006138:	d022      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800613a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800613e:	d115      	bne.n	800616c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006144:	3308      	adds	r3, #8
 8006146:	2100      	movs	r1, #0
 8006148:	4618      	mov	r0, r3
 800614a:	f000 fe57 	bl	8006dfc <RCCEx_PLL2_Config>
 800614e:	4603      	mov	r3, r0
 8006150:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006154:	e015      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800615a:	3328      	adds	r3, #40	@ 0x28
 800615c:	2102      	movs	r1, #2
 800615e:	4618      	mov	r0, r3
 8006160:	f000 fefe 	bl	8006f60 <RCCEx_PLL3_Config>
 8006164:	4603      	mov	r3, r0
 8006166:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800616a:	e00a      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006172:	e006      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006174:	bf00      	nop
 8006176:	e004      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006178:	bf00      	nop
 800617a:	e002      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800617c:	bf00      	nop
 800617e:	e000      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006180:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006182:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10e      	bne.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800618a:	4b06      	ldr	r3, [pc, #24]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800618c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800618e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006196:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800619a:	4a02      	ldr	r2, [pc, #8]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800619c:	430b      	orrs	r3, r1
 800619e:	6593      	str	r3, [r2, #88]	@ 0x58
 80061a0:	e006      	b.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80061a2:	bf00      	nop
 80061a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80061b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80061bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80061c0:	2300      	movs	r3, #0
 80061c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80061c6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80061ca:	460b      	mov	r3, r1
 80061cc:	4313      	orrs	r3, r2
 80061ce:	d055      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80061d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80061d8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80061dc:	d033      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80061de:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80061e2:	d82c      	bhi.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80061e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061e8:	d02f      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80061ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061ee:	d826      	bhi.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80061f0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80061f4:	d02b      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80061f6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80061fa:	d820      	bhi.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80061fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006200:	d012      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006202:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006206:	d81a      	bhi.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006208:	2b00      	cmp	r3, #0
 800620a:	d022      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800620c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006210:	d115      	bne.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006216:	3308      	adds	r3, #8
 8006218:	2100      	movs	r1, #0
 800621a:	4618      	mov	r0, r3
 800621c:	f000 fdee 	bl	8006dfc <RCCEx_PLL2_Config>
 8006220:	4603      	mov	r3, r0
 8006222:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006226:	e015      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800622c:	3328      	adds	r3, #40	@ 0x28
 800622e:	2102      	movs	r1, #2
 8006230:	4618      	mov	r0, r3
 8006232:	f000 fe95 	bl	8006f60 <RCCEx_PLL3_Config>
 8006236:	4603      	mov	r3, r0
 8006238:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800623c:	e00a      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006244:	e006      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006246:	bf00      	nop
 8006248:	e004      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800624a:	bf00      	nop
 800624c:	e002      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800624e:	bf00      	nop
 8006250:	e000      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006252:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006254:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006258:	2b00      	cmp	r3, #0
 800625a:	d10b      	bne.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800625c:	4ba1      	ldr	r3, [pc, #644]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800625e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006260:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006268:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800626c:	4a9d      	ldr	r2, [pc, #628]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800626e:	430b      	orrs	r3, r1
 8006270:	6593      	str	r3, [r2, #88]	@ 0x58
 8006272:	e003      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006274:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006278:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800627c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006284:	f002 0308 	and.w	r3, r2, #8
 8006288:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800628c:	2300      	movs	r3, #0
 800628e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006292:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006296:	460b      	mov	r3, r1
 8006298:	4313      	orrs	r3, r2
 800629a:	d01e      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800629c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062a8:	d10c      	bne.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80062aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ae:	3328      	adds	r3, #40	@ 0x28
 80062b0:	2102      	movs	r1, #2
 80062b2:	4618      	mov	r0, r3
 80062b4:	f000 fe54 	bl	8006f60 <RCCEx_PLL3_Config>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d002      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80062c4:	4b87      	ldr	r3, [pc, #540]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062c8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80062cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062d4:	4a83      	ldr	r2, [pc, #524]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062d6:	430b      	orrs	r3, r1
 80062d8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80062da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e2:	f002 0310 	and.w	r3, r2, #16
 80062e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80062ea:	2300      	movs	r3, #0
 80062ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80062f0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80062f4:	460b      	mov	r3, r1
 80062f6:	4313      	orrs	r3, r2
 80062f8:	d01e      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80062fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006302:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006306:	d10c      	bne.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800630c:	3328      	adds	r3, #40	@ 0x28
 800630e:	2102      	movs	r1, #2
 8006310:	4618      	mov	r0, r3
 8006312:	f000 fe25 	bl	8006f60 <RCCEx_PLL3_Config>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d002      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006322:	4b70      	ldr	r3, [pc, #448]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006326:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800632a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800632e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006332:	4a6c      	ldr	r2, [pc, #432]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006334:	430b      	orrs	r3, r1
 8006336:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800633c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006340:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006344:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006348:	2300      	movs	r3, #0
 800634a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800634e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006352:	460b      	mov	r3, r1
 8006354:	4313      	orrs	r3, r2
 8006356:	d03e      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800635c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006360:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006364:	d022      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006366:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800636a:	d81b      	bhi.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800636c:	2b00      	cmp	r3, #0
 800636e:	d003      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006370:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006374:	d00b      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006376:	e015      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800637c:	3308      	adds	r3, #8
 800637e:	2100      	movs	r1, #0
 8006380:	4618      	mov	r0, r3
 8006382:	f000 fd3b 	bl	8006dfc <RCCEx_PLL2_Config>
 8006386:	4603      	mov	r3, r0
 8006388:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800638c:	e00f      	b.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800638e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006392:	3328      	adds	r3, #40	@ 0x28
 8006394:	2102      	movs	r1, #2
 8006396:	4618      	mov	r0, r3
 8006398:	f000 fde2 	bl	8006f60 <RCCEx_PLL3_Config>
 800639c:	4603      	mov	r3, r0
 800639e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80063a2:	e004      	b.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063aa:	e000      	b.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80063ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d10b      	bne.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80063b6:	4b4b      	ldr	r3, [pc, #300]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063ba:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80063be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80063c6:	4a47      	ldr	r2, [pc, #284]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063c8:	430b      	orrs	r3, r1
 80063ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80063cc:	e003      	b.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80063d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063de:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80063e2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80063e4:	2300      	movs	r3, #0
 80063e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80063e8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80063ec:	460b      	mov	r3, r1
 80063ee:	4313      	orrs	r3, r2
 80063f0:	d03b      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80063f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80063fe:	d01f      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006400:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006404:	d818      	bhi.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006406:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800640a:	d003      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800640c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006410:	d007      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006412:	e011      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006414:	4b33      	ldr	r3, [pc, #204]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006418:	4a32      	ldr	r2, [pc, #200]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800641a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800641e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006420:	e00f      	b.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006426:	3328      	adds	r3, #40	@ 0x28
 8006428:	2101      	movs	r1, #1
 800642a:	4618      	mov	r0, r3
 800642c:	f000 fd98 	bl	8006f60 <RCCEx_PLL3_Config>
 8006430:	4603      	mov	r3, r0
 8006432:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006436:	e004      	b.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800643e:	e000      	b.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006440:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006442:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10b      	bne.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800644a:	4b26      	ldr	r3, [pc, #152]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800644c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800644e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006456:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800645a:	4a22      	ldr	r2, [pc, #136]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800645c:	430b      	orrs	r3, r1
 800645e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006460:	e003      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006462:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006466:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800646a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800646e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006472:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006476:	673b      	str	r3, [r7, #112]	@ 0x70
 8006478:	2300      	movs	r3, #0
 800647a:	677b      	str	r3, [r7, #116]	@ 0x74
 800647c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006480:	460b      	mov	r3, r1
 8006482:	4313      	orrs	r3, r2
 8006484:	d034      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800648a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800648c:	2b00      	cmp	r3, #0
 800648e:	d003      	beq.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006490:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006494:	d007      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006496:	e011      	b.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006498:	4b12      	ldr	r3, [pc, #72]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800649a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800649c:	4a11      	ldr	r2, [pc, #68]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800649e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80064a4:	e00e      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80064a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064aa:	3308      	adds	r3, #8
 80064ac:	2102      	movs	r1, #2
 80064ae:	4618      	mov	r0, r3
 80064b0:	f000 fca4 	bl	8006dfc <RCCEx_PLL2_Config>
 80064b4:	4603      	mov	r3, r0
 80064b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80064ba:	e003      	b.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10d      	bne.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80064cc:	4b05      	ldr	r3, [pc, #20]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064d0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80064d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064da:	4a02      	ldr	r2, [pc, #8]	@ (80064e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064dc:	430b      	orrs	r3, r1
 80064de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80064e0:	e006      	b.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80064e2:	bf00      	nop
 80064e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80064f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80064fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064fe:	2300      	movs	r3, #0
 8006500:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006502:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006506:	460b      	mov	r3, r1
 8006508:	4313      	orrs	r3, r2
 800650a:	d00c      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800650c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006510:	3328      	adds	r3, #40	@ 0x28
 8006512:	2102      	movs	r1, #2
 8006514:	4618      	mov	r0, r3
 8006516:	f000 fd23 	bl	8006f60 <RCCEx_PLL3_Config>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d002      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800652a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006532:	663b      	str	r3, [r7, #96]	@ 0x60
 8006534:	2300      	movs	r3, #0
 8006536:	667b      	str	r3, [r7, #100]	@ 0x64
 8006538:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800653c:	460b      	mov	r3, r1
 800653e:	4313      	orrs	r3, r2
 8006540:	d038      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006546:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800654a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800654e:	d018      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006550:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006554:	d811      	bhi.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006556:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800655a:	d014      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800655c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006560:	d80b      	bhi.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006562:	2b00      	cmp	r3, #0
 8006564:	d011      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006566:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800656a:	d106      	bne.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800656c:	4bc3      	ldr	r3, [pc, #780]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800656e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006570:	4ac2      	ldr	r2, [pc, #776]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006572:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006576:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006578:	e008      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006580:	e004      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006582:	bf00      	nop
 8006584:	e002      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006586:	bf00      	nop
 8006588:	e000      	b.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800658a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800658c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006590:	2b00      	cmp	r3, #0
 8006592:	d10b      	bne.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006594:	4bb9      	ldr	r3, [pc, #740]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006598:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800659c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065a4:	4ab5      	ldr	r2, [pc, #724]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065a6:	430b      	orrs	r3, r1
 80065a8:	6553      	str	r3, [r2, #84]	@ 0x54
 80065aa:	e003      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80065b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065bc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80065c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80065c2:	2300      	movs	r3, #0
 80065c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065c6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80065ca:	460b      	mov	r3, r1
 80065cc:	4313      	orrs	r3, r2
 80065ce:	d009      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80065d0:	4baa      	ldr	r3, [pc, #680]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065d4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80065d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065de:	4aa7      	ldr	r2, [pc, #668]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065e0:	430b      	orrs	r3, r1
 80065e2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80065e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ec:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80065f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80065f2:	2300      	movs	r3, #0
 80065f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80065f6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80065fa:	460b      	mov	r3, r1
 80065fc:	4313      	orrs	r3, r2
 80065fe:	d00a      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006600:	4b9e      	ldr	r3, [pc, #632]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006602:	691b      	ldr	r3, [r3, #16]
 8006604:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800660c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006610:	4a9a      	ldr	r2, [pc, #616]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006612:	430b      	orrs	r3, r1
 8006614:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800661a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006622:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006624:	2300      	movs	r3, #0
 8006626:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006628:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800662c:	460b      	mov	r3, r1
 800662e:	4313      	orrs	r3, r2
 8006630:	d009      	beq.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006632:	4b92      	ldr	r3, [pc, #584]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006634:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006636:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800663a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800663e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006640:	4a8e      	ldr	r2, [pc, #568]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006642:	430b      	orrs	r3, r1
 8006644:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800664a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006652:	643b      	str	r3, [r7, #64]	@ 0x40
 8006654:	2300      	movs	r3, #0
 8006656:	647b      	str	r3, [r7, #68]	@ 0x44
 8006658:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800665c:	460b      	mov	r3, r1
 800665e:	4313      	orrs	r3, r2
 8006660:	d00e      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006662:	4b86      	ldr	r3, [pc, #536]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	4a85      	ldr	r2, [pc, #532]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006668:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800666c:	6113      	str	r3, [r2, #16]
 800666e:	4b83      	ldr	r3, [pc, #524]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006670:	6919      	ldr	r1, [r3, #16]
 8006672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006676:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800667a:	4a80      	ldr	r2, [pc, #512]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800667c:	430b      	orrs	r3, r1
 800667e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006688:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800668c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800668e:	2300      	movs	r3, #0
 8006690:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006692:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006696:	460b      	mov	r3, r1
 8006698:	4313      	orrs	r3, r2
 800669a:	d009      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800669c:	4b77      	ldr	r3, [pc, #476]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800669e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066a0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80066a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066aa:	4a74      	ldr	r2, [pc, #464]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066ac:	430b      	orrs	r3, r1
 80066ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80066b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80066bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80066be:	2300      	movs	r3, #0
 80066c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80066c2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80066c6:	460b      	mov	r3, r1
 80066c8:	4313      	orrs	r3, r2
 80066ca:	d00a      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80066cc:	4b6b      	ldr	r3, [pc, #428]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066d0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80066d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066dc:	4a67      	ldr	r2, [pc, #412]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066de:	430b      	orrs	r3, r1
 80066e0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80066e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ea:	2100      	movs	r1, #0
 80066ec:	62b9      	str	r1, [r7, #40]	@ 0x28
 80066ee:	f003 0301 	and.w	r3, r3, #1
 80066f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066f4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80066f8:	460b      	mov	r3, r1
 80066fa:	4313      	orrs	r3, r2
 80066fc:	d011      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006702:	3308      	adds	r3, #8
 8006704:	2100      	movs	r1, #0
 8006706:	4618      	mov	r0, r3
 8006708:	f000 fb78 	bl	8006dfc <RCCEx_PLL2_Config>
 800670c:	4603      	mov	r3, r0
 800670e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006712:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006716:	2b00      	cmp	r3, #0
 8006718:	d003      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800671a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800671e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672a:	2100      	movs	r1, #0
 800672c:	6239      	str	r1, [r7, #32]
 800672e:	f003 0302 	and.w	r3, r3, #2
 8006732:	627b      	str	r3, [r7, #36]	@ 0x24
 8006734:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006738:	460b      	mov	r3, r1
 800673a:	4313      	orrs	r3, r2
 800673c:	d011      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800673e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006742:	3308      	adds	r3, #8
 8006744:	2101      	movs	r1, #1
 8006746:	4618      	mov	r0, r3
 8006748:	f000 fb58 	bl	8006dfc <RCCEx_PLL2_Config>
 800674c:	4603      	mov	r3, r0
 800674e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006752:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006756:	2b00      	cmp	r3, #0
 8006758:	d003      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800675a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800675e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676a:	2100      	movs	r1, #0
 800676c:	61b9      	str	r1, [r7, #24]
 800676e:	f003 0304 	and.w	r3, r3, #4
 8006772:	61fb      	str	r3, [r7, #28]
 8006774:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006778:	460b      	mov	r3, r1
 800677a:	4313      	orrs	r3, r2
 800677c:	d011      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800677e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006782:	3308      	adds	r3, #8
 8006784:	2102      	movs	r1, #2
 8006786:	4618      	mov	r0, r3
 8006788:	f000 fb38 	bl	8006dfc <RCCEx_PLL2_Config>
 800678c:	4603      	mov	r3, r0
 800678e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006792:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006796:	2b00      	cmp	r3, #0
 8006798:	d003      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800679a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800679e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80067a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067aa:	2100      	movs	r1, #0
 80067ac:	6139      	str	r1, [r7, #16]
 80067ae:	f003 0308 	and.w	r3, r3, #8
 80067b2:	617b      	str	r3, [r7, #20]
 80067b4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80067b8:	460b      	mov	r3, r1
 80067ba:	4313      	orrs	r3, r2
 80067bc:	d011      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80067be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067c2:	3328      	adds	r3, #40	@ 0x28
 80067c4:	2100      	movs	r1, #0
 80067c6:	4618      	mov	r0, r3
 80067c8:	f000 fbca 	bl	8006f60 <RCCEx_PLL3_Config>
 80067cc:	4603      	mov	r3, r0
 80067ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80067d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d003      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80067e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ea:	2100      	movs	r1, #0
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	f003 0310 	and.w	r3, r3, #16
 80067f2:	60fb      	str	r3, [r7, #12]
 80067f4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80067f8:	460b      	mov	r3, r1
 80067fa:	4313      	orrs	r3, r2
 80067fc:	d011      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006802:	3328      	adds	r3, #40	@ 0x28
 8006804:	2101      	movs	r1, #1
 8006806:	4618      	mov	r0, r3
 8006808:	f000 fbaa 	bl	8006f60 <RCCEx_PLL3_Config>
 800680c:	4603      	mov	r3, r0
 800680e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006812:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006816:	2b00      	cmp	r3, #0
 8006818:	d003      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800681a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800681e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682a:	2100      	movs	r1, #0
 800682c:	6039      	str	r1, [r7, #0]
 800682e:	f003 0320 	and.w	r3, r3, #32
 8006832:	607b      	str	r3, [r7, #4]
 8006834:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006838:	460b      	mov	r3, r1
 800683a:	4313      	orrs	r3, r2
 800683c:	d011      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800683e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006842:	3328      	adds	r3, #40	@ 0x28
 8006844:	2102      	movs	r1, #2
 8006846:	4618      	mov	r0, r3
 8006848:	f000 fb8a 	bl	8006f60 <RCCEx_PLL3_Config>
 800684c:	4603      	mov	r3, r0
 800684e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006852:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006856:	2b00      	cmp	r3, #0
 8006858:	d003      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800685a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800685e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006862:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006866:	2b00      	cmp	r3, #0
 8006868:	d101      	bne.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800686a:	2300      	movs	r3, #0
 800686c:	e000      	b.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
}
 8006870:	4618      	mov	r0, r3
 8006872:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006876:	46bd      	mov	sp, r7
 8006878:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800687c:	58024400 	.word	0x58024400

08006880 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006884:	f7fe fd96 	bl	80053b4 <HAL_RCC_GetHCLKFreq>
 8006888:	4602      	mov	r2, r0
 800688a:	4b06      	ldr	r3, [pc, #24]	@ (80068a4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	091b      	lsrs	r3, r3, #4
 8006890:	f003 0307 	and.w	r3, r3, #7
 8006894:	4904      	ldr	r1, [pc, #16]	@ (80068a8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006896:	5ccb      	ldrb	r3, [r1, r3]
 8006898:	f003 031f 	and.w	r3, r3, #31
 800689c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	58024400 	.word	0x58024400
 80068a8:	08009850 	.word	0x08009850

080068ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b089      	sub	sp, #36	@ 0x24
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80068b4:	4ba1      	ldr	r3, [pc, #644]	@ (8006b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068b8:	f003 0303 	and.w	r3, r3, #3
 80068bc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80068be:	4b9f      	ldr	r3, [pc, #636]	@ (8006b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068c2:	0b1b      	lsrs	r3, r3, #12
 80068c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80068c8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80068ca:	4b9c      	ldr	r3, [pc, #624]	@ (8006b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ce:	091b      	lsrs	r3, r3, #4
 80068d0:	f003 0301 	and.w	r3, r3, #1
 80068d4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80068d6:	4b99      	ldr	r3, [pc, #612]	@ (8006b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068da:	08db      	lsrs	r3, r3, #3
 80068dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	fb02 f303 	mul.w	r3, r2, r3
 80068e6:	ee07 3a90 	vmov	s15, r3
 80068ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f000 8111 	beq.w	8006b1c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	f000 8083 	beq.w	8006a08 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	2b02      	cmp	r3, #2
 8006906:	f200 80a1 	bhi.w	8006a4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d003      	beq.n	8006918 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	2b01      	cmp	r3, #1
 8006914:	d056      	beq.n	80069c4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006916:	e099      	b.n	8006a4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006918:	4b88      	ldr	r3, [pc, #544]	@ (8006b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0320 	and.w	r3, r3, #32
 8006920:	2b00      	cmp	r3, #0
 8006922:	d02d      	beq.n	8006980 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006924:	4b85      	ldr	r3, [pc, #532]	@ (8006b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	08db      	lsrs	r3, r3, #3
 800692a:	f003 0303 	and.w	r3, r3, #3
 800692e:	4a84      	ldr	r2, [pc, #528]	@ (8006b40 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006930:	fa22 f303 	lsr.w	r3, r2, r3
 8006934:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	ee07 3a90 	vmov	s15, r3
 800693c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	ee07 3a90 	vmov	s15, r3
 8006946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800694a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800694e:	4b7b      	ldr	r3, [pc, #492]	@ (8006b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006956:	ee07 3a90 	vmov	s15, r3
 800695a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800695e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006962:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006b44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800696a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800696e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800697a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800697e:	e087      	b.n	8006a90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	ee07 3a90 	vmov	s15, r3
 8006986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800698a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006b48 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800698e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006992:	4b6a      	ldr	r3, [pc, #424]	@ (8006b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800699a:	ee07 3a90 	vmov	s15, r3
 800699e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80069a6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006b44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80069aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069c2:	e065      	b.n	8006a90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	ee07 3a90 	vmov	s15, r3
 80069ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006b4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80069d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069d6:	4b59      	ldr	r3, [pc, #356]	@ (8006b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069de:	ee07 3a90 	vmov	s15, r3
 80069e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80069ea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006b44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80069ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a06:	e043      	b.n	8006a90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	ee07 3a90 	vmov	s15, r3
 8006a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a12:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006b50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a1a:	4b48      	ldr	r3, [pc, #288]	@ (8006b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a22:	ee07 3a90 	vmov	s15, r3
 8006a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a2e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006b44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a4a:	e021      	b.n	8006a90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	ee07 3a90 	vmov	s15, r3
 8006a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a56:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006b4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a5e:	4b37      	ldr	r3, [pc, #220]	@ (8006b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a66:	ee07 3a90 	vmov	s15, r3
 8006a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a72:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006b44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a8e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006a90:	4b2a      	ldr	r3, [pc, #168]	@ (8006b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a94:	0a5b      	lsrs	r3, r3, #9
 8006a96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a9a:	ee07 3a90 	vmov	s15, r3
 8006a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aa2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006aa6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006aaa:	edd7 6a07 	vldr	s13, [r7, #28]
 8006aae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ab2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ab6:	ee17 2a90 	vmov	r2, s15
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006abe:	4b1f      	ldr	r3, [pc, #124]	@ (8006b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ac2:	0c1b      	lsrs	r3, r3, #16
 8006ac4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ac8:	ee07 3a90 	vmov	s15, r3
 8006acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ad0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ad4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ad8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006adc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ae0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ae4:	ee17 2a90 	vmov	r2, s15
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006aec:	4b13      	ldr	r3, [pc, #76]	@ (8006b3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006af0:	0e1b      	lsrs	r3, r3, #24
 8006af2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006af6:	ee07 3a90 	vmov	s15, r3
 8006afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006afe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b06:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b12:	ee17 2a90 	vmov	r2, s15
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006b1a:	e008      	b.n	8006b2e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	609a      	str	r2, [r3, #8]
}
 8006b2e:	bf00      	nop
 8006b30:	3724      	adds	r7, #36	@ 0x24
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	58024400 	.word	0x58024400
 8006b40:	03d09000 	.word	0x03d09000
 8006b44:	46000000 	.word	0x46000000
 8006b48:	4c742400 	.word	0x4c742400
 8006b4c:	4a742400 	.word	0x4a742400
 8006b50:	4bbebc20 	.word	0x4bbebc20

08006b54 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b089      	sub	sp, #36	@ 0x24
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b5c:	4ba1      	ldr	r3, [pc, #644]	@ (8006de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b60:	f003 0303 	and.w	r3, r3, #3
 8006b64:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006b66:	4b9f      	ldr	r3, [pc, #636]	@ (8006de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b6a:	0d1b      	lsrs	r3, r3, #20
 8006b6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b70:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006b72:	4b9c      	ldr	r3, [pc, #624]	@ (8006de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b76:	0a1b      	lsrs	r3, r3, #8
 8006b78:	f003 0301 	and.w	r3, r3, #1
 8006b7c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006b7e:	4b99      	ldr	r3, [pc, #612]	@ (8006de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b82:	08db      	lsrs	r3, r3, #3
 8006b84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	fb02 f303 	mul.w	r3, r2, r3
 8006b8e:	ee07 3a90 	vmov	s15, r3
 8006b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f000 8111 	beq.w	8006dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	f000 8083 	beq.w	8006cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	f200 80a1 	bhi.w	8006cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d003      	beq.n	8006bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d056      	beq.n	8006c6c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006bbe:	e099      	b.n	8006cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bc0:	4b88      	ldr	r3, [pc, #544]	@ (8006de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0320 	and.w	r3, r3, #32
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d02d      	beq.n	8006c28 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bcc:	4b85      	ldr	r3, [pc, #532]	@ (8006de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	08db      	lsrs	r3, r3, #3
 8006bd2:	f003 0303 	and.w	r3, r3, #3
 8006bd6:	4a84      	ldr	r2, [pc, #528]	@ (8006de8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bdc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	ee07 3a90 	vmov	s15, r3
 8006be4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	ee07 3a90 	vmov	s15, r3
 8006bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bf6:	4b7b      	ldr	r3, [pc, #492]	@ (8006de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bfe:	ee07 3a90 	vmov	s15, r3
 8006c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c06:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c0a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006dec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006c26:	e087      	b.n	8006d38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	ee07 3a90 	vmov	s15, r3
 8006c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c32:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006df0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c3a:	4b6a      	ldr	r3, [pc, #424]	@ (8006de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c42:	ee07 3a90 	vmov	s15, r3
 8006c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c4e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006dec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c6a:	e065      	b.n	8006d38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	ee07 3a90 	vmov	s15, r3
 8006c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c76:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006df4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c7e:	4b59      	ldr	r3, [pc, #356]	@ (8006de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c86:	ee07 3a90 	vmov	s15, r3
 8006c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c92:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006dec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006caa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cae:	e043      	b.n	8006d38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	ee07 3a90 	vmov	s15, r3
 8006cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006df8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cc2:	4b48      	ldr	r3, [pc, #288]	@ (8006de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cca:	ee07 3a90 	vmov	s15, r3
 8006cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cd6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006dec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ce2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cf2:	e021      	b.n	8006d38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	ee07 3a90 	vmov	s15, r3
 8006cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cfe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006df4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d06:	4b37      	ldr	r3, [pc, #220]	@ (8006de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d0e:	ee07 3a90 	vmov	s15, r3
 8006d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d16:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d1a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006dec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d36:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006d38:	4b2a      	ldr	r3, [pc, #168]	@ (8006de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d3c:	0a5b      	lsrs	r3, r3, #9
 8006d3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d42:	ee07 3a90 	vmov	s15, r3
 8006d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d52:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d5e:	ee17 2a90 	vmov	r2, s15
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006d66:	4b1f      	ldr	r3, [pc, #124]	@ (8006de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d6a:	0c1b      	lsrs	r3, r3, #16
 8006d6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d70:	ee07 3a90 	vmov	s15, r3
 8006d74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d80:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d8c:	ee17 2a90 	vmov	r2, s15
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006d94:	4b13      	ldr	r3, [pc, #76]	@ (8006de4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d98:	0e1b      	lsrs	r3, r3, #24
 8006d9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d9e:	ee07 3a90 	vmov	s15, r3
 8006da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006da6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006daa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006dae:	edd7 6a07 	vldr	s13, [r7, #28]
 8006db2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006db6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dba:	ee17 2a90 	vmov	r2, s15
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006dc2:	e008      	b.n	8006dd6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	609a      	str	r2, [r3, #8]
}
 8006dd6:	bf00      	nop
 8006dd8:	3724      	adds	r7, #36	@ 0x24
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr
 8006de2:	bf00      	nop
 8006de4:	58024400 	.word	0x58024400
 8006de8:	03d09000 	.word	0x03d09000
 8006dec:	46000000 	.word	0x46000000
 8006df0:	4c742400 	.word	0x4c742400
 8006df4:	4a742400 	.word	0x4a742400
 8006df8:	4bbebc20 	.word	0x4bbebc20

08006dfc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e06:	2300      	movs	r3, #0
 8006e08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e0a:	4b53      	ldr	r3, [pc, #332]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e0e:	f003 0303 	and.w	r3, r3, #3
 8006e12:	2b03      	cmp	r3, #3
 8006e14:	d101      	bne.n	8006e1a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e099      	b.n	8006f4e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006e1a:	4b4f      	ldr	r3, [pc, #316]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a4e      	ldr	r2, [pc, #312]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006e20:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006e24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e26:	f7fa fe4f 	bl	8001ac8 <HAL_GetTick>
 8006e2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e2c:	e008      	b.n	8006e40 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006e2e:	f7fa fe4b 	bl	8001ac8 <HAL_GetTick>
 8006e32:	4602      	mov	r2, r0
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	1ad3      	subs	r3, r2, r3
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d901      	bls.n	8006e40 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e086      	b.n	8006f4e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e40:	4b45      	ldr	r3, [pc, #276]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d1f0      	bne.n	8006e2e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006e4c:	4b42      	ldr	r3, [pc, #264]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e50:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	031b      	lsls	r3, r3, #12
 8006e5a:	493f      	ldr	r1, [pc, #252]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	3b01      	subs	r3, #1
 8006e66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	025b      	lsls	r3, r3, #9
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	431a      	orrs	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	041b      	lsls	r3, r3, #16
 8006e7e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006e82:	431a      	orrs	r2, r3
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	3b01      	subs	r3, #1
 8006e8a:	061b      	lsls	r3, r3, #24
 8006e8c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006e90:	4931      	ldr	r1, [pc, #196]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006e92:	4313      	orrs	r3, r2
 8006e94:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006e96:	4b30      	ldr	r3, [pc, #192]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e9a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	695b      	ldr	r3, [r3, #20]
 8006ea2:	492d      	ldr	r1, [pc, #180]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006ea8:	4b2b      	ldr	r3, [pc, #172]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eac:	f023 0220 	bic.w	r2, r3, #32
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	4928      	ldr	r1, [pc, #160]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006eba:	4b27      	ldr	r3, [pc, #156]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ebe:	4a26      	ldr	r2, [pc, #152]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006ec0:	f023 0310 	bic.w	r3, r3, #16
 8006ec4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006ec6:	4b24      	ldr	r3, [pc, #144]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006ec8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006eca:	4b24      	ldr	r3, [pc, #144]	@ (8006f5c <RCCEx_PLL2_Config+0x160>)
 8006ecc:	4013      	ands	r3, r2
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	69d2      	ldr	r2, [r2, #28]
 8006ed2:	00d2      	lsls	r2, r2, #3
 8006ed4:	4920      	ldr	r1, [pc, #128]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006eda:	4b1f      	ldr	r3, [pc, #124]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ede:	4a1e      	ldr	r2, [pc, #120]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006ee0:	f043 0310 	orr.w	r3, r3, #16
 8006ee4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d106      	bne.n	8006efa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006eec:	4b1a      	ldr	r3, [pc, #104]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ef0:	4a19      	ldr	r2, [pc, #100]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006ef2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006ef6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006ef8:	e00f      	b.n	8006f1a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d106      	bne.n	8006f0e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006f00:	4b15      	ldr	r3, [pc, #84]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f04:	4a14      	ldr	r2, [pc, #80]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006f06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f0a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006f0c:	e005      	b.n	8006f1a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006f0e:	4b12      	ldr	r3, [pc, #72]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f12:	4a11      	ldr	r2, [pc, #68]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006f14:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006f18:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a0e      	ldr	r2, [pc, #56]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006f20:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006f24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f26:	f7fa fdcf 	bl	8001ac8 <HAL_GetTick>
 8006f2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006f2c:	e008      	b.n	8006f40 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006f2e:	f7fa fdcb 	bl	8001ac8 <HAL_GetTick>
 8006f32:	4602      	mov	r2, r0
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d901      	bls.n	8006f40 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	e006      	b.n	8006f4e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006f40:	4b05      	ldr	r3, [pc, #20]	@ (8006f58 <RCCEx_PLL2_Config+0x15c>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d0f0      	beq.n	8006f2e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3710      	adds	r7, #16
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	58024400 	.word	0x58024400
 8006f5c:	ffff0007 	.word	0xffff0007

08006f60 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f6e:	4b53      	ldr	r3, [pc, #332]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 8006f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f72:	f003 0303 	and.w	r3, r3, #3
 8006f76:	2b03      	cmp	r3, #3
 8006f78:	d101      	bne.n	8006f7e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e099      	b.n	80070b2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006f7e:	4b4f      	ldr	r3, [pc, #316]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a4e      	ldr	r2, [pc, #312]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 8006f84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f8a:	f7fa fd9d 	bl	8001ac8 <HAL_GetTick>
 8006f8e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f90:	e008      	b.n	8006fa4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006f92:	f7fa fd99 	bl	8001ac8 <HAL_GetTick>
 8006f96:	4602      	mov	r2, r0
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	1ad3      	subs	r3, r2, r3
 8006f9c:	2b02      	cmp	r3, #2
 8006f9e:	d901      	bls.n	8006fa4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	e086      	b.n	80070b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006fa4:	4b45      	ldr	r3, [pc, #276]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d1f0      	bne.n	8006f92 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006fb0:	4b42      	ldr	r3, [pc, #264]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 8006fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fb4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	051b      	lsls	r3, r3, #20
 8006fbe:	493f      	ldr	r1, [pc, #252]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	628b      	str	r3, [r1, #40]	@ 0x28
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	025b      	lsls	r3, r3, #9
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	431a      	orrs	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	041b      	lsls	r3, r3, #16
 8006fe2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006fe6:	431a      	orrs	r2, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	3b01      	subs	r3, #1
 8006fee:	061b      	lsls	r3, r3, #24
 8006ff0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006ff4:	4931      	ldr	r1, [pc, #196]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006ffa:	4b30      	ldr	r3, [pc, #192]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 8006ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ffe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	695b      	ldr	r3, [r3, #20]
 8007006:	492d      	ldr	r1, [pc, #180]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 8007008:	4313      	orrs	r3, r2
 800700a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800700c:	4b2b      	ldr	r3, [pc, #172]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 800700e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007010:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	699b      	ldr	r3, [r3, #24]
 8007018:	4928      	ldr	r1, [pc, #160]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 800701a:	4313      	orrs	r3, r2
 800701c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800701e:	4b27      	ldr	r3, [pc, #156]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 8007020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007022:	4a26      	ldr	r2, [pc, #152]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 8007024:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007028:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800702a:	4b24      	ldr	r3, [pc, #144]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 800702c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800702e:	4b24      	ldr	r3, [pc, #144]	@ (80070c0 <RCCEx_PLL3_Config+0x160>)
 8007030:	4013      	ands	r3, r2
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	69d2      	ldr	r2, [r2, #28]
 8007036:	00d2      	lsls	r2, r2, #3
 8007038:	4920      	ldr	r1, [pc, #128]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 800703a:	4313      	orrs	r3, r2
 800703c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800703e:	4b1f      	ldr	r3, [pc, #124]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 8007040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007042:	4a1e      	ldr	r2, [pc, #120]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 8007044:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007048:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d106      	bne.n	800705e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007050:	4b1a      	ldr	r3, [pc, #104]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 8007052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007054:	4a19      	ldr	r2, [pc, #100]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 8007056:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800705a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800705c:	e00f      	b.n	800707e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	2b01      	cmp	r3, #1
 8007062:	d106      	bne.n	8007072 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007064:	4b15      	ldr	r3, [pc, #84]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 8007066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007068:	4a14      	ldr	r2, [pc, #80]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 800706a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800706e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007070:	e005      	b.n	800707e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007072:	4b12      	ldr	r3, [pc, #72]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 8007074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007076:	4a11      	ldr	r2, [pc, #68]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 8007078:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800707c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800707e:	4b0f      	ldr	r3, [pc, #60]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a0e      	ldr	r2, [pc, #56]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 8007084:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007088:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800708a:	f7fa fd1d 	bl	8001ac8 <HAL_GetTick>
 800708e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007090:	e008      	b.n	80070a4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007092:	f7fa fd19 	bl	8001ac8 <HAL_GetTick>
 8007096:	4602      	mov	r2, r0
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	2b02      	cmp	r3, #2
 800709e:	d901      	bls.n	80070a4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80070a0:	2303      	movs	r3, #3
 80070a2:	e006      	b.n	80070b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80070a4:	4b05      	ldr	r3, [pc, #20]	@ (80070bc <RCCEx_PLL3_Config+0x15c>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d0f0      	beq.n	8007092 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80070b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop
 80070bc:	58024400 	.word	0x58024400
 80070c0:	ffff0007 	.word	0xffff0007

080070c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d101      	bne.n	80070d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e042      	b.n	800715c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d106      	bne.n	80070ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f7fa f9d1 	bl	8001490 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2224      	movs	r2, #36	@ 0x24
 80070f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f022 0201 	bic.w	r2, r2, #1
 8007104:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800710a:	2b00      	cmp	r3, #0
 800710c:	d002      	beq.n	8007114 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 fe3c 	bl	8007d8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 f8d1 	bl	80072bc <UART_SetConfig>
 800711a:	4603      	mov	r3, r0
 800711c:	2b01      	cmp	r3, #1
 800711e:	d101      	bne.n	8007124 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007120:	2301      	movs	r3, #1
 8007122:	e01b      	b.n	800715c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	685a      	ldr	r2, [r3, #4]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007132:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	689a      	ldr	r2, [r3, #8]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007142:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f042 0201 	orr.w	r2, r2, #1
 8007152:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 febb 	bl	8007ed0 <UART_CheckIdleState>
 800715a:	4603      	mov	r3, r0
}
 800715c:	4618      	mov	r0, r3
 800715e:	3708      	adds	r7, #8
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b08a      	sub	sp, #40	@ 0x28
 8007168:	af02      	add	r7, sp, #8
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	603b      	str	r3, [r7, #0]
 8007170:	4613      	mov	r3, r2
 8007172:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800717a:	2b20      	cmp	r3, #32
 800717c:	d17b      	bne.n	8007276 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d002      	beq.n	800718a <HAL_UART_Transmit+0x26>
 8007184:	88fb      	ldrh	r3, [r7, #6]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d101      	bne.n	800718e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e074      	b.n	8007278 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2200      	movs	r2, #0
 8007192:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2221      	movs	r2, #33	@ 0x21
 800719a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800719e:	f7fa fc93 	bl	8001ac8 <HAL_GetTick>
 80071a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	88fa      	ldrh	r2, [r7, #6]
 80071a8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	88fa      	ldrh	r2, [r7, #6]
 80071b0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071bc:	d108      	bne.n	80071d0 <HAL_UART_Transmit+0x6c>
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d104      	bne.n	80071d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80071c6:	2300      	movs	r3, #0
 80071c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	61bb      	str	r3, [r7, #24]
 80071ce:	e003      	b.n	80071d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071d4:	2300      	movs	r3, #0
 80071d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80071d8:	e030      	b.n	800723c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	2200      	movs	r2, #0
 80071e2:	2180      	movs	r1, #128	@ 0x80
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f000 ff1d 	bl	8008024 <UART_WaitOnFlagUntilTimeout>
 80071ea:	4603      	mov	r3, r0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d005      	beq.n	80071fc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2220      	movs	r2, #32
 80071f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80071f8:	2303      	movs	r3, #3
 80071fa:	e03d      	b.n	8007278 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d10b      	bne.n	800721a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	881b      	ldrh	r3, [r3, #0]
 8007206:	461a      	mov	r2, r3
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007210:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	3302      	adds	r3, #2
 8007216:	61bb      	str	r3, [r7, #24]
 8007218:	e007      	b.n	800722a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	781a      	ldrb	r2, [r3, #0]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	3301      	adds	r3, #1
 8007228:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007230:	b29b      	uxth	r3, r3
 8007232:	3b01      	subs	r3, #1
 8007234:	b29a      	uxth	r2, r3
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007242:	b29b      	uxth	r3, r3
 8007244:	2b00      	cmp	r3, #0
 8007246:	d1c8      	bne.n	80071da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	9300      	str	r3, [sp, #0]
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	2200      	movs	r2, #0
 8007250:	2140      	movs	r1, #64	@ 0x40
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f000 fee6 	bl	8008024 <UART_WaitOnFlagUntilTimeout>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d005      	beq.n	800726a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2220      	movs	r2, #32
 8007262:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007266:	2303      	movs	r3, #3
 8007268:	e006      	b.n	8007278 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2220      	movs	r2, #32
 800726e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007272:	2300      	movs	r3, #0
 8007274:	e000      	b.n	8007278 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007276:	2302      	movs	r3, #2
  }
}
 8007278:	4618      	mov	r0, r3
 800727a:	3720      	adds	r7, #32
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007288:	bf00      	nop
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800729c:	bf00      	nop
 800729e:	370c      	adds	r7, #12
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80072b0:	bf00      	nop
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072c0:	b092      	sub	sp, #72	@ 0x48
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80072c6:	2300      	movs	r3, #0
 80072c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	689a      	ldr	r2, [r3, #8]
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	431a      	orrs	r2, r3
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	695b      	ldr	r3, [r3, #20]
 80072da:	431a      	orrs	r2, r3
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	69db      	ldr	r3, [r3, #28]
 80072e0:	4313      	orrs	r3, r2
 80072e2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	4bbe      	ldr	r3, [pc, #760]	@ (80075e4 <UART_SetConfig+0x328>)
 80072ec:	4013      	ands	r3, r2
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	6812      	ldr	r2, [r2, #0]
 80072f2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80072f4:	430b      	orrs	r3, r1
 80072f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	68da      	ldr	r2, [r3, #12]
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	430a      	orrs	r2, r1
 800730c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	699b      	ldr	r3, [r3, #24]
 8007312:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4ab3      	ldr	r2, [pc, #716]	@ (80075e8 <UART_SetConfig+0x32c>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d004      	beq.n	8007328 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	6a1b      	ldr	r3, [r3, #32]
 8007322:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007324:	4313      	orrs	r3, r2
 8007326:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	689a      	ldr	r2, [r3, #8]
 800732e:	4baf      	ldr	r3, [pc, #700]	@ (80075ec <UART_SetConfig+0x330>)
 8007330:	4013      	ands	r3, r2
 8007332:	697a      	ldr	r2, [r7, #20]
 8007334:	6812      	ldr	r2, [r2, #0]
 8007336:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007338:	430b      	orrs	r3, r1
 800733a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007342:	f023 010f 	bic.w	r1, r3, #15
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	430a      	orrs	r2, r1
 8007350:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4aa6      	ldr	r2, [pc, #664]	@ (80075f0 <UART_SetConfig+0x334>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d177      	bne.n	800744c <UART_SetConfig+0x190>
 800735c:	4ba5      	ldr	r3, [pc, #660]	@ (80075f4 <UART_SetConfig+0x338>)
 800735e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007360:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007364:	2b28      	cmp	r3, #40	@ 0x28
 8007366:	d86d      	bhi.n	8007444 <UART_SetConfig+0x188>
 8007368:	a201      	add	r2, pc, #4	@ (adr r2, 8007370 <UART_SetConfig+0xb4>)
 800736a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800736e:	bf00      	nop
 8007370:	08007415 	.word	0x08007415
 8007374:	08007445 	.word	0x08007445
 8007378:	08007445 	.word	0x08007445
 800737c:	08007445 	.word	0x08007445
 8007380:	08007445 	.word	0x08007445
 8007384:	08007445 	.word	0x08007445
 8007388:	08007445 	.word	0x08007445
 800738c:	08007445 	.word	0x08007445
 8007390:	0800741d 	.word	0x0800741d
 8007394:	08007445 	.word	0x08007445
 8007398:	08007445 	.word	0x08007445
 800739c:	08007445 	.word	0x08007445
 80073a0:	08007445 	.word	0x08007445
 80073a4:	08007445 	.word	0x08007445
 80073a8:	08007445 	.word	0x08007445
 80073ac:	08007445 	.word	0x08007445
 80073b0:	08007425 	.word	0x08007425
 80073b4:	08007445 	.word	0x08007445
 80073b8:	08007445 	.word	0x08007445
 80073bc:	08007445 	.word	0x08007445
 80073c0:	08007445 	.word	0x08007445
 80073c4:	08007445 	.word	0x08007445
 80073c8:	08007445 	.word	0x08007445
 80073cc:	08007445 	.word	0x08007445
 80073d0:	0800742d 	.word	0x0800742d
 80073d4:	08007445 	.word	0x08007445
 80073d8:	08007445 	.word	0x08007445
 80073dc:	08007445 	.word	0x08007445
 80073e0:	08007445 	.word	0x08007445
 80073e4:	08007445 	.word	0x08007445
 80073e8:	08007445 	.word	0x08007445
 80073ec:	08007445 	.word	0x08007445
 80073f0:	08007435 	.word	0x08007435
 80073f4:	08007445 	.word	0x08007445
 80073f8:	08007445 	.word	0x08007445
 80073fc:	08007445 	.word	0x08007445
 8007400:	08007445 	.word	0x08007445
 8007404:	08007445 	.word	0x08007445
 8007408:	08007445 	.word	0x08007445
 800740c:	08007445 	.word	0x08007445
 8007410:	0800743d 	.word	0x0800743d
 8007414:	2301      	movs	r3, #1
 8007416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800741a:	e222      	b.n	8007862 <UART_SetConfig+0x5a6>
 800741c:	2304      	movs	r3, #4
 800741e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007422:	e21e      	b.n	8007862 <UART_SetConfig+0x5a6>
 8007424:	2308      	movs	r3, #8
 8007426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800742a:	e21a      	b.n	8007862 <UART_SetConfig+0x5a6>
 800742c:	2310      	movs	r3, #16
 800742e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007432:	e216      	b.n	8007862 <UART_SetConfig+0x5a6>
 8007434:	2320      	movs	r3, #32
 8007436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800743a:	e212      	b.n	8007862 <UART_SetConfig+0x5a6>
 800743c:	2340      	movs	r3, #64	@ 0x40
 800743e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007442:	e20e      	b.n	8007862 <UART_SetConfig+0x5a6>
 8007444:	2380      	movs	r3, #128	@ 0x80
 8007446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800744a:	e20a      	b.n	8007862 <UART_SetConfig+0x5a6>
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a69      	ldr	r2, [pc, #420]	@ (80075f8 <UART_SetConfig+0x33c>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d130      	bne.n	80074b8 <UART_SetConfig+0x1fc>
 8007456:	4b67      	ldr	r3, [pc, #412]	@ (80075f4 <UART_SetConfig+0x338>)
 8007458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800745a:	f003 0307 	and.w	r3, r3, #7
 800745e:	2b05      	cmp	r3, #5
 8007460:	d826      	bhi.n	80074b0 <UART_SetConfig+0x1f4>
 8007462:	a201      	add	r2, pc, #4	@ (adr r2, 8007468 <UART_SetConfig+0x1ac>)
 8007464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007468:	08007481 	.word	0x08007481
 800746c:	08007489 	.word	0x08007489
 8007470:	08007491 	.word	0x08007491
 8007474:	08007499 	.word	0x08007499
 8007478:	080074a1 	.word	0x080074a1
 800747c:	080074a9 	.word	0x080074a9
 8007480:	2300      	movs	r3, #0
 8007482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007486:	e1ec      	b.n	8007862 <UART_SetConfig+0x5a6>
 8007488:	2304      	movs	r3, #4
 800748a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800748e:	e1e8      	b.n	8007862 <UART_SetConfig+0x5a6>
 8007490:	2308      	movs	r3, #8
 8007492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007496:	e1e4      	b.n	8007862 <UART_SetConfig+0x5a6>
 8007498:	2310      	movs	r3, #16
 800749a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800749e:	e1e0      	b.n	8007862 <UART_SetConfig+0x5a6>
 80074a0:	2320      	movs	r3, #32
 80074a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074a6:	e1dc      	b.n	8007862 <UART_SetConfig+0x5a6>
 80074a8:	2340      	movs	r3, #64	@ 0x40
 80074aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ae:	e1d8      	b.n	8007862 <UART_SetConfig+0x5a6>
 80074b0:	2380      	movs	r3, #128	@ 0x80
 80074b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074b6:	e1d4      	b.n	8007862 <UART_SetConfig+0x5a6>
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a4f      	ldr	r2, [pc, #316]	@ (80075fc <UART_SetConfig+0x340>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d130      	bne.n	8007524 <UART_SetConfig+0x268>
 80074c2:	4b4c      	ldr	r3, [pc, #304]	@ (80075f4 <UART_SetConfig+0x338>)
 80074c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074c6:	f003 0307 	and.w	r3, r3, #7
 80074ca:	2b05      	cmp	r3, #5
 80074cc:	d826      	bhi.n	800751c <UART_SetConfig+0x260>
 80074ce:	a201      	add	r2, pc, #4	@ (adr r2, 80074d4 <UART_SetConfig+0x218>)
 80074d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d4:	080074ed 	.word	0x080074ed
 80074d8:	080074f5 	.word	0x080074f5
 80074dc:	080074fd 	.word	0x080074fd
 80074e0:	08007505 	.word	0x08007505
 80074e4:	0800750d 	.word	0x0800750d
 80074e8:	08007515 	.word	0x08007515
 80074ec:	2300      	movs	r3, #0
 80074ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074f2:	e1b6      	b.n	8007862 <UART_SetConfig+0x5a6>
 80074f4:	2304      	movs	r3, #4
 80074f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074fa:	e1b2      	b.n	8007862 <UART_SetConfig+0x5a6>
 80074fc:	2308      	movs	r3, #8
 80074fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007502:	e1ae      	b.n	8007862 <UART_SetConfig+0x5a6>
 8007504:	2310      	movs	r3, #16
 8007506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800750a:	e1aa      	b.n	8007862 <UART_SetConfig+0x5a6>
 800750c:	2320      	movs	r3, #32
 800750e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007512:	e1a6      	b.n	8007862 <UART_SetConfig+0x5a6>
 8007514:	2340      	movs	r3, #64	@ 0x40
 8007516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800751a:	e1a2      	b.n	8007862 <UART_SetConfig+0x5a6>
 800751c:	2380      	movs	r3, #128	@ 0x80
 800751e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007522:	e19e      	b.n	8007862 <UART_SetConfig+0x5a6>
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a35      	ldr	r2, [pc, #212]	@ (8007600 <UART_SetConfig+0x344>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d130      	bne.n	8007590 <UART_SetConfig+0x2d4>
 800752e:	4b31      	ldr	r3, [pc, #196]	@ (80075f4 <UART_SetConfig+0x338>)
 8007530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007532:	f003 0307 	and.w	r3, r3, #7
 8007536:	2b05      	cmp	r3, #5
 8007538:	d826      	bhi.n	8007588 <UART_SetConfig+0x2cc>
 800753a:	a201      	add	r2, pc, #4	@ (adr r2, 8007540 <UART_SetConfig+0x284>)
 800753c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007540:	08007559 	.word	0x08007559
 8007544:	08007561 	.word	0x08007561
 8007548:	08007569 	.word	0x08007569
 800754c:	08007571 	.word	0x08007571
 8007550:	08007579 	.word	0x08007579
 8007554:	08007581 	.word	0x08007581
 8007558:	2300      	movs	r3, #0
 800755a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800755e:	e180      	b.n	8007862 <UART_SetConfig+0x5a6>
 8007560:	2304      	movs	r3, #4
 8007562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007566:	e17c      	b.n	8007862 <UART_SetConfig+0x5a6>
 8007568:	2308      	movs	r3, #8
 800756a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800756e:	e178      	b.n	8007862 <UART_SetConfig+0x5a6>
 8007570:	2310      	movs	r3, #16
 8007572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007576:	e174      	b.n	8007862 <UART_SetConfig+0x5a6>
 8007578:	2320      	movs	r3, #32
 800757a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800757e:	e170      	b.n	8007862 <UART_SetConfig+0x5a6>
 8007580:	2340      	movs	r3, #64	@ 0x40
 8007582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007586:	e16c      	b.n	8007862 <UART_SetConfig+0x5a6>
 8007588:	2380      	movs	r3, #128	@ 0x80
 800758a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800758e:	e168      	b.n	8007862 <UART_SetConfig+0x5a6>
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a1b      	ldr	r2, [pc, #108]	@ (8007604 <UART_SetConfig+0x348>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d142      	bne.n	8007620 <UART_SetConfig+0x364>
 800759a:	4b16      	ldr	r3, [pc, #88]	@ (80075f4 <UART_SetConfig+0x338>)
 800759c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800759e:	f003 0307 	and.w	r3, r3, #7
 80075a2:	2b05      	cmp	r3, #5
 80075a4:	d838      	bhi.n	8007618 <UART_SetConfig+0x35c>
 80075a6:	a201      	add	r2, pc, #4	@ (adr r2, 80075ac <UART_SetConfig+0x2f0>)
 80075a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ac:	080075c5 	.word	0x080075c5
 80075b0:	080075cd 	.word	0x080075cd
 80075b4:	080075d5 	.word	0x080075d5
 80075b8:	080075dd 	.word	0x080075dd
 80075bc:	08007609 	.word	0x08007609
 80075c0:	08007611 	.word	0x08007611
 80075c4:	2300      	movs	r3, #0
 80075c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075ca:	e14a      	b.n	8007862 <UART_SetConfig+0x5a6>
 80075cc:	2304      	movs	r3, #4
 80075ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075d2:	e146      	b.n	8007862 <UART_SetConfig+0x5a6>
 80075d4:	2308      	movs	r3, #8
 80075d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075da:	e142      	b.n	8007862 <UART_SetConfig+0x5a6>
 80075dc:	2310      	movs	r3, #16
 80075de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075e2:	e13e      	b.n	8007862 <UART_SetConfig+0x5a6>
 80075e4:	cfff69f3 	.word	0xcfff69f3
 80075e8:	58000c00 	.word	0x58000c00
 80075ec:	11fff4ff 	.word	0x11fff4ff
 80075f0:	40011000 	.word	0x40011000
 80075f4:	58024400 	.word	0x58024400
 80075f8:	40004400 	.word	0x40004400
 80075fc:	40004800 	.word	0x40004800
 8007600:	40004c00 	.word	0x40004c00
 8007604:	40005000 	.word	0x40005000
 8007608:	2320      	movs	r3, #32
 800760a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800760e:	e128      	b.n	8007862 <UART_SetConfig+0x5a6>
 8007610:	2340      	movs	r3, #64	@ 0x40
 8007612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007616:	e124      	b.n	8007862 <UART_SetConfig+0x5a6>
 8007618:	2380      	movs	r3, #128	@ 0x80
 800761a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800761e:	e120      	b.n	8007862 <UART_SetConfig+0x5a6>
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4acb      	ldr	r2, [pc, #812]	@ (8007954 <UART_SetConfig+0x698>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d176      	bne.n	8007718 <UART_SetConfig+0x45c>
 800762a:	4bcb      	ldr	r3, [pc, #812]	@ (8007958 <UART_SetConfig+0x69c>)
 800762c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800762e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007632:	2b28      	cmp	r3, #40	@ 0x28
 8007634:	d86c      	bhi.n	8007710 <UART_SetConfig+0x454>
 8007636:	a201      	add	r2, pc, #4	@ (adr r2, 800763c <UART_SetConfig+0x380>)
 8007638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763c:	080076e1 	.word	0x080076e1
 8007640:	08007711 	.word	0x08007711
 8007644:	08007711 	.word	0x08007711
 8007648:	08007711 	.word	0x08007711
 800764c:	08007711 	.word	0x08007711
 8007650:	08007711 	.word	0x08007711
 8007654:	08007711 	.word	0x08007711
 8007658:	08007711 	.word	0x08007711
 800765c:	080076e9 	.word	0x080076e9
 8007660:	08007711 	.word	0x08007711
 8007664:	08007711 	.word	0x08007711
 8007668:	08007711 	.word	0x08007711
 800766c:	08007711 	.word	0x08007711
 8007670:	08007711 	.word	0x08007711
 8007674:	08007711 	.word	0x08007711
 8007678:	08007711 	.word	0x08007711
 800767c:	080076f1 	.word	0x080076f1
 8007680:	08007711 	.word	0x08007711
 8007684:	08007711 	.word	0x08007711
 8007688:	08007711 	.word	0x08007711
 800768c:	08007711 	.word	0x08007711
 8007690:	08007711 	.word	0x08007711
 8007694:	08007711 	.word	0x08007711
 8007698:	08007711 	.word	0x08007711
 800769c:	080076f9 	.word	0x080076f9
 80076a0:	08007711 	.word	0x08007711
 80076a4:	08007711 	.word	0x08007711
 80076a8:	08007711 	.word	0x08007711
 80076ac:	08007711 	.word	0x08007711
 80076b0:	08007711 	.word	0x08007711
 80076b4:	08007711 	.word	0x08007711
 80076b8:	08007711 	.word	0x08007711
 80076bc:	08007701 	.word	0x08007701
 80076c0:	08007711 	.word	0x08007711
 80076c4:	08007711 	.word	0x08007711
 80076c8:	08007711 	.word	0x08007711
 80076cc:	08007711 	.word	0x08007711
 80076d0:	08007711 	.word	0x08007711
 80076d4:	08007711 	.word	0x08007711
 80076d8:	08007711 	.word	0x08007711
 80076dc:	08007709 	.word	0x08007709
 80076e0:	2301      	movs	r3, #1
 80076e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076e6:	e0bc      	b.n	8007862 <UART_SetConfig+0x5a6>
 80076e8:	2304      	movs	r3, #4
 80076ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ee:	e0b8      	b.n	8007862 <UART_SetConfig+0x5a6>
 80076f0:	2308      	movs	r3, #8
 80076f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076f6:	e0b4      	b.n	8007862 <UART_SetConfig+0x5a6>
 80076f8:	2310      	movs	r3, #16
 80076fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076fe:	e0b0      	b.n	8007862 <UART_SetConfig+0x5a6>
 8007700:	2320      	movs	r3, #32
 8007702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007706:	e0ac      	b.n	8007862 <UART_SetConfig+0x5a6>
 8007708:	2340      	movs	r3, #64	@ 0x40
 800770a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800770e:	e0a8      	b.n	8007862 <UART_SetConfig+0x5a6>
 8007710:	2380      	movs	r3, #128	@ 0x80
 8007712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007716:	e0a4      	b.n	8007862 <UART_SetConfig+0x5a6>
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a8f      	ldr	r2, [pc, #572]	@ (800795c <UART_SetConfig+0x6a0>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d130      	bne.n	8007784 <UART_SetConfig+0x4c8>
 8007722:	4b8d      	ldr	r3, [pc, #564]	@ (8007958 <UART_SetConfig+0x69c>)
 8007724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007726:	f003 0307 	and.w	r3, r3, #7
 800772a:	2b05      	cmp	r3, #5
 800772c:	d826      	bhi.n	800777c <UART_SetConfig+0x4c0>
 800772e:	a201      	add	r2, pc, #4	@ (adr r2, 8007734 <UART_SetConfig+0x478>)
 8007730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007734:	0800774d 	.word	0x0800774d
 8007738:	08007755 	.word	0x08007755
 800773c:	0800775d 	.word	0x0800775d
 8007740:	08007765 	.word	0x08007765
 8007744:	0800776d 	.word	0x0800776d
 8007748:	08007775 	.word	0x08007775
 800774c:	2300      	movs	r3, #0
 800774e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007752:	e086      	b.n	8007862 <UART_SetConfig+0x5a6>
 8007754:	2304      	movs	r3, #4
 8007756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800775a:	e082      	b.n	8007862 <UART_SetConfig+0x5a6>
 800775c:	2308      	movs	r3, #8
 800775e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007762:	e07e      	b.n	8007862 <UART_SetConfig+0x5a6>
 8007764:	2310      	movs	r3, #16
 8007766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800776a:	e07a      	b.n	8007862 <UART_SetConfig+0x5a6>
 800776c:	2320      	movs	r3, #32
 800776e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007772:	e076      	b.n	8007862 <UART_SetConfig+0x5a6>
 8007774:	2340      	movs	r3, #64	@ 0x40
 8007776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800777a:	e072      	b.n	8007862 <UART_SetConfig+0x5a6>
 800777c:	2380      	movs	r3, #128	@ 0x80
 800777e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007782:	e06e      	b.n	8007862 <UART_SetConfig+0x5a6>
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a75      	ldr	r2, [pc, #468]	@ (8007960 <UART_SetConfig+0x6a4>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d130      	bne.n	80077f0 <UART_SetConfig+0x534>
 800778e:	4b72      	ldr	r3, [pc, #456]	@ (8007958 <UART_SetConfig+0x69c>)
 8007790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007792:	f003 0307 	and.w	r3, r3, #7
 8007796:	2b05      	cmp	r3, #5
 8007798:	d826      	bhi.n	80077e8 <UART_SetConfig+0x52c>
 800779a:	a201      	add	r2, pc, #4	@ (adr r2, 80077a0 <UART_SetConfig+0x4e4>)
 800779c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a0:	080077b9 	.word	0x080077b9
 80077a4:	080077c1 	.word	0x080077c1
 80077a8:	080077c9 	.word	0x080077c9
 80077ac:	080077d1 	.word	0x080077d1
 80077b0:	080077d9 	.word	0x080077d9
 80077b4:	080077e1 	.word	0x080077e1
 80077b8:	2300      	movs	r3, #0
 80077ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077be:	e050      	b.n	8007862 <UART_SetConfig+0x5a6>
 80077c0:	2304      	movs	r3, #4
 80077c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077c6:	e04c      	b.n	8007862 <UART_SetConfig+0x5a6>
 80077c8:	2308      	movs	r3, #8
 80077ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ce:	e048      	b.n	8007862 <UART_SetConfig+0x5a6>
 80077d0:	2310      	movs	r3, #16
 80077d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077d6:	e044      	b.n	8007862 <UART_SetConfig+0x5a6>
 80077d8:	2320      	movs	r3, #32
 80077da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077de:	e040      	b.n	8007862 <UART_SetConfig+0x5a6>
 80077e0:	2340      	movs	r3, #64	@ 0x40
 80077e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077e6:	e03c      	b.n	8007862 <UART_SetConfig+0x5a6>
 80077e8:	2380      	movs	r3, #128	@ 0x80
 80077ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ee:	e038      	b.n	8007862 <UART_SetConfig+0x5a6>
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a5b      	ldr	r2, [pc, #364]	@ (8007964 <UART_SetConfig+0x6a8>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d130      	bne.n	800785c <UART_SetConfig+0x5a0>
 80077fa:	4b57      	ldr	r3, [pc, #348]	@ (8007958 <UART_SetConfig+0x69c>)
 80077fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077fe:	f003 0307 	and.w	r3, r3, #7
 8007802:	2b05      	cmp	r3, #5
 8007804:	d826      	bhi.n	8007854 <UART_SetConfig+0x598>
 8007806:	a201      	add	r2, pc, #4	@ (adr r2, 800780c <UART_SetConfig+0x550>)
 8007808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780c:	08007825 	.word	0x08007825
 8007810:	0800782d 	.word	0x0800782d
 8007814:	08007835 	.word	0x08007835
 8007818:	0800783d 	.word	0x0800783d
 800781c:	08007845 	.word	0x08007845
 8007820:	0800784d 	.word	0x0800784d
 8007824:	2302      	movs	r3, #2
 8007826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800782a:	e01a      	b.n	8007862 <UART_SetConfig+0x5a6>
 800782c:	2304      	movs	r3, #4
 800782e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007832:	e016      	b.n	8007862 <UART_SetConfig+0x5a6>
 8007834:	2308      	movs	r3, #8
 8007836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800783a:	e012      	b.n	8007862 <UART_SetConfig+0x5a6>
 800783c:	2310      	movs	r3, #16
 800783e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007842:	e00e      	b.n	8007862 <UART_SetConfig+0x5a6>
 8007844:	2320      	movs	r3, #32
 8007846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800784a:	e00a      	b.n	8007862 <UART_SetConfig+0x5a6>
 800784c:	2340      	movs	r3, #64	@ 0x40
 800784e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007852:	e006      	b.n	8007862 <UART_SetConfig+0x5a6>
 8007854:	2380      	movs	r3, #128	@ 0x80
 8007856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800785a:	e002      	b.n	8007862 <UART_SetConfig+0x5a6>
 800785c:	2380      	movs	r3, #128	@ 0x80
 800785e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a3f      	ldr	r2, [pc, #252]	@ (8007964 <UART_SetConfig+0x6a8>)
 8007868:	4293      	cmp	r3, r2
 800786a:	f040 80f8 	bne.w	8007a5e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800786e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007872:	2b20      	cmp	r3, #32
 8007874:	dc46      	bgt.n	8007904 <UART_SetConfig+0x648>
 8007876:	2b02      	cmp	r3, #2
 8007878:	f2c0 8082 	blt.w	8007980 <UART_SetConfig+0x6c4>
 800787c:	3b02      	subs	r3, #2
 800787e:	2b1e      	cmp	r3, #30
 8007880:	d87e      	bhi.n	8007980 <UART_SetConfig+0x6c4>
 8007882:	a201      	add	r2, pc, #4	@ (adr r2, 8007888 <UART_SetConfig+0x5cc>)
 8007884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007888:	0800790b 	.word	0x0800790b
 800788c:	08007981 	.word	0x08007981
 8007890:	08007913 	.word	0x08007913
 8007894:	08007981 	.word	0x08007981
 8007898:	08007981 	.word	0x08007981
 800789c:	08007981 	.word	0x08007981
 80078a0:	08007923 	.word	0x08007923
 80078a4:	08007981 	.word	0x08007981
 80078a8:	08007981 	.word	0x08007981
 80078ac:	08007981 	.word	0x08007981
 80078b0:	08007981 	.word	0x08007981
 80078b4:	08007981 	.word	0x08007981
 80078b8:	08007981 	.word	0x08007981
 80078bc:	08007981 	.word	0x08007981
 80078c0:	08007933 	.word	0x08007933
 80078c4:	08007981 	.word	0x08007981
 80078c8:	08007981 	.word	0x08007981
 80078cc:	08007981 	.word	0x08007981
 80078d0:	08007981 	.word	0x08007981
 80078d4:	08007981 	.word	0x08007981
 80078d8:	08007981 	.word	0x08007981
 80078dc:	08007981 	.word	0x08007981
 80078e0:	08007981 	.word	0x08007981
 80078e4:	08007981 	.word	0x08007981
 80078e8:	08007981 	.word	0x08007981
 80078ec:	08007981 	.word	0x08007981
 80078f0:	08007981 	.word	0x08007981
 80078f4:	08007981 	.word	0x08007981
 80078f8:	08007981 	.word	0x08007981
 80078fc:	08007981 	.word	0x08007981
 8007900:	08007973 	.word	0x08007973
 8007904:	2b40      	cmp	r3, #64	@ 0x40
 8007906:	d037      	beq.n	8007978 <UART_SetConfig+0x6bc>
 8007908:	e03a      	b.n	8007980 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800790a:	f7fe ffb9 	bl	8006880 <HAL_RCCEx_GetD3PCLK1Freq>
 800790e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007910:	e03c      	b.n	800798c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007912:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007916:	4618      	mov	r0, r3
 8007918:	f7fe ffc8 	bl	80068ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800791c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800791e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007920:	e034      	b.n	800798c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007922:	f107 0318 	add.w	r3, r7, #24
 8007926:	4618      	mov	r0, r3
 8007928:	f7ff f914 	bl	8006b54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007930:	e02c      	b.n	800798c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007932:	4b09      	ldr	r3, [pc, #36]	@ (8007958 <UART_SetConfig+0x69c>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 0320 	and.w	r3, r3, #32
 800793a:	2b00      	cmp	r3, #0
 800793c:	d016      	beq.n	800796c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800793e:	4b06      	ldr	r3, [pc, #24]	@ (8007958 <UART_SetConfig+0x69c>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	08db      	lsrs	r3, r3, #3
 8007944:	f003 0303 	and.w	r3, r3, #3
 8007948:	4a07      	ldr	r2, [pc, #28]	@ (8007968 <UART_SetConfig+0x6ac>)
 800794a:	fa22 f303 	lsr.w	r3, r2, r3
 800794e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007950:	e01c      	b.n	800798c <UART_SetConfig+0x6d0>
 8007952:	bf00      	nop
 8007954:	40011400 	.word	0x40011400
 8007958:	58024400 	.word	0x58024400
 800795c:	40007800 	.word	0x40007800
 8007960:	40007c00 	.word	0x40007c00
 8007964:	58000c00 	.word	0x58000c00
 8007968:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800796c:	4b9d      	ldr	r3, [pc, #628]	@ (8007be4 <UART_SetConfig+0x928>)
 800796e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007970:	e00c      	b.n	800798c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007972:	4b9d      	ldr	r3, [pc, #628]	@ (8007be8 <UART_SetConfig+0x92c>)
 8007974:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007976:	e009      	b.n	800798c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007978:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800797c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800797e:	e005      	b.n	800798c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007980:	2300      	movs	r3, #0
 8007982:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800798a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800798c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800798e:	2b00      	cmp	r3, #0
 8007990:	f000 81de 	beq.w	8007d50 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007998:	4a94      	ldr	r2, [pc, #592]	@ (8007bec <UART_SetConfig+0x930>)
 800799a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800799e:	461a      	mov	r2, r3
 80079a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80079a6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	685a      	ldr	r2, [r3, #4]
 80079ac:	4613      	mov	r3, r2
 80079ae:	005b      	lsls	r3, r3, #1
 80079b0:	4413      	add	r3, r2
 80079b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d305      	bcc.n	80079c4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80079be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d903      	bls.n	80079cc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80079ca:	e1c1      	b.n	8007d50 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079ce:	2200      	movs	r2, #0
 80079d0:	60bb      	str	r3, [r7, #8]
 80079d2:	60fa      	str	r2, [r7, #12]
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079d8:	4a84      	ldr	r2, [pc, #528]	@ (8007bec <UART_SetConfig+0x930>)
 80079da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079de:	b29b      	uxth	r3, r3
 80079e0:	2200      	movs	r2, #0
 80079e2:	603b      	str	r3, [r7, #0]
 80079e4:	607a      	str	r2, [r7, #4]
 80079e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80079ee:	f7f8 fcd7 	bl	80003a0 <__aeabi_uldivmod>
 80079f2:	4602      	mov	r2, r0
 80079f4:	460b      	mov	r3, r1
 80079f6:	4610      	mov	r0, r2
 80079f8:	4619      	mov	r1, r3
 80079fa:	f04f 0200 	mov.w	r2, #0
 80079fe:	f04f 0300 	mov.w	r3, #0
 8007a02:	020b      	lsls	r3, r1, #8
 8007a04:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007a08:	0202      	lsls	r2, r0, #8
 8007a0a:	6979      	ldr	r1, [r7, #20]
 8007a0c:	6849      	ldr	r1, [r1, #4]
 8007a0e:	0849      	lsrs	r1, r1, #1
 8007a10:	2000      	movs	r0, #0
 8007a12:	460c      	mov	r4, r1
 8007a14:	4605      	mov	r5, r0
 8007a16:	eb12 0804 	adds.w	r8, r2, r4
 8007a1a:	eb43 0905 	adc.w	r9, r3, r5
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	469a      	mov	sl, r3
 8007a26:	4693      	mov	fp, r2
 8007a28:	4652      	mov	r2, sl
 8007a2a:	465b      	mov	r3, fp
 8007a2c:	4640      	mov	r0, r8
 8007a2e:	4649      	mov	r1, r9
 8007a30:	f7f8 fcb6 	bl	80003a0 <__aeabi_uldivmod>
 8007a34:	4602      	mov	r2, r0
 8007a36:	460b      	mov	r3, r1
 8007a38:	4613      	mov	r3, r2
 8007a3a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a42:	d308      	bcc.n	8007a56 <UART_SetConfig+0x79a>
 8007a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a4a:	d204      	bcs.n	8007a56 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007a52:	60da      	str	r2, [r3, #12]
 8007a54:	e17c      	b.n	8007d50 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007a5c:	e178      	b.n	8007d50 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	69db      	ldr	r3, [r3, #28]
 8007a62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a66:	f040 80c5 	bne.w	8007bf4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007a6a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007a6e:	2b20      	cmp	r3, #32
 8007a70:	dc48      	bgt.n	8007b04 <UART_SetConfig+0x848>
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	db7b      	blt.n	8007b6e <UART_SetConfig+0x8b2>
 8007a76:	2b20      	cmp	r3, #32
 8007a78:	d879      	bhi.n	8007b6e <UART_SetConfig+0x8b2>
 8007a7a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a80 <UART_SetConfig+0x7c4>)
 8007a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a80:	08007b0b 	.word	0x08007b0b
 8007a84:	08007b13 	.word	0x08007b13
 8007a88:	08007b6f 	.word	0x08007b6f
 8007a8c:	08007b6f 	.word	0x08007b6f
 8007a90:	08007b1b 	.word	0x08007b1b
 8007a94:	08007b6f 	.word	0x08007b6f
 8007a98:	08007b6f 	.word	0x08007b6f
 8007a9c:	08007b6f 	.word	0x08007b6f
 8007aa0:	08007b2b 	.word	0x08007b2b
 8007aa4:	08007b6f 	.word	0x08007b6f
 8007aa8:	08007b6f 	.word	0x08007b6f
 8007aac:	08007b6f 	.word	0x08007b6f
 8007ab0:	08007b6f 	.word	0x08007b6f
 8007ab4:	08007b6f 	.word	0x08007b6f
 8007ab8:	08007b6f 	.word	0x08007b6f
 8007abc:	08007b6f 	.word	0x08007b6f
 8007ac0:	08007b3b 	.word	0x08007b3b
 8007ac4:	08007b6f 	.word	0x08007b6f
 8007ac8:	08007b6f 	.word	0x08007b6f
 8007acc:	08007b6f 	.word	0x08007b6f
 8007ad0:	08007b6f 	.word	0x08007b6f
 8007ad4:	08007b6f 	.word	0x08007b6f
 8007ad8:	08007b6f 	.word	0x08007b6f
 8007adc:	08007b6f 	.word	0x08007b6f
 8007ae0:	08007b6f 	.word	0x08007b6f
 8007ae4:	08007b6f 	.word	0x08007b6f
 8007ae8:	08007b6f 	.word	0x08007b6f
 8007aec:	08007b6f 	.word	0x08007b6f
 8007af0:	08007b6f 	.word	0x08007b6f
 8007af4:	08007b6f 	.word	0x08007b6f
 8007af8:	08007b6f 	.word	0x08007b6f
 8007afc:	08007b6f 	.word	0x08007b6f
 8007b00:	08007b61 	.word	0x08007b61
 8007b04:	2b40      	cmp	r3, #64	@ 0x40
 8007b06:	d02e      	beq.n	8007b66 <UART_SetConfig+0x8aa>
 8007b08:	e031      	b.n	8007b6e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b0a:	f7fd fc83 	bl	8005414 <HAL_RCC_GetPCLK1Freq>
 8007b0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007b10:	e033      	b.n	8007b7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b12:	f7fd fc95 	bl	8005440 <HAL_RCC_GetPCLK2Freq>
 8007b16:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007b18:	e02f      	b.n	8007b7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7fe fec4 	bl	80068ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b28:	e027      	b.n	8007b7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b2a:	f107 0318 	add.w	r3, r7, #24
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f7ff f810 	bl	8006b54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b38:	e01f      	b.n	8007b7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b3a:	4b2d      	ldr	r3, [pc, #180]	@ (8007bf0 <UART_SetConfig+0x934>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f003 0320 	and.w	r3, r3, #32
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d009      	beq.n	8007b5a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007b46:	4b2a      	ldr	r3, [pc, #168]	@ (8007bf0 <UART_SetConfig+0x934>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	08db      	lsrs	r3, r3, #3
 8007b4c:	f003 0303 	and.w	r3, r3, #3
 8007b50:	4a24      	ldr	r2, [pc, #144]	@ (8007be4 <UART_SetConfig+0x928>)
 8007b52:	fa22 f303 	lsr.w	r3, r2, r3
 8007b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007b58:	e00f      	b.n	8007b7a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007b5a:	4b22      	ldr	r3, [pc, #136]	@ (8007be4 <UART_SetConfig+0x928>)
 8007b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b5e:	e00c      	b.n	8007b7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007b60:	4b21      	ldr	r3, [pc, #132]	@ (8007be8 <UART_SetConfig+0x92c>)
 8007b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b64:	e009      	b.n	8007b7a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b6c:	e005      	b.n	8007b7a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007b78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f000 80e7 	beq.w	8007d50 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b86:	4a19      	ldr	r2, [pc, #100]	@ (8007bec <UART_SetConfig+0x930>)
 8007b88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b90:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b94:	005a      	lsls	r2, r3, #1
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	085b      	lsrs	r3, r3, #1
 8007b9c:	441a      	add	r2, r3
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ba6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007baa:	2b0f      	cmp	r3, #15
 8007bac:	d916      	bls.n	8007bdc <UART_SetConfig+0x920>
 8007bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bb4:	d212      	bcs.n	8007bdc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	f023 030f 	bic.w	r3, r3, #15
 8007bbe:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bc2:	085b      	lsrs	r3, r3, #1
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	f003 0307 	and.w	r3, r3, #7
 8007bca:	b29a      	uxth	r2, r3
 8007bcc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007bd8:	60da      	str	r2, [r3, #12]
 8007bda:	e0b9      	b.n	8007d50 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007be2:	e0b5      	b.n	8007d50 <UART_SetConfig+0xa94>
 8007be4:	03d09000 	.word	0x03d09000
 8007be8:	003d0900 	.word	0x003d0900
 8007bec:	08009868 	.word	0x08009868
 8007bf0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007bf4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007bf8:	2b20      	cmp	r3, #32
 8007bfa:	dc49      	bgt.n	8007c90 <UART_SetConfig+0x9d4>
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	db7c      	blt.n	8007cfa <UART_SetConfig+0xa3e>
 8007c00:	2b20      	cmp	r3, #32
 8007c02:	d87a      	bhi.n	8007cfa <UART_SetConfig+0xa3e>
 8007c04:	a201      	add	r2, pc, #4	@ (adr r2, 8007c0c <UART_SetConfig+0x950>)
 8007c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c0a:	bf00      	nop
 8007c0c:	08007c97 	.word	0x08007c97
 8007c10:	08007c9f 	.word	0x08007c9f
 8007c14:	08007cfb 	.word	0x08007cfb
 8007c18:	08007cfb 	.word	0x08007cfb
 8007c1c:	08007ca7 	.word	0x08007ca7
 8007c20:	08007cfb 	.word	0x08007cfb
 8007c24:	08007cfb 	.word	0x08007cfb
 8007c28:	08007cfb 	.word	0x08007cfb
 8007c2c:	08007cb7 	.word	0x08007cb7
 8007c30:	08007cfb 	.word	0x08007cfb
 8007c34:	08007cfb 	.word	0x08007cfb
 8007c38:	08007cfb 	.word	0x08007cfb
 8007c3c:	08007cfb 	.word	0x08007cfb
 8007c40:	08007cfb 	.word	0x08007cfb
 8007c44:	08007cfb 	.word	0x08007cfb
 8007c48:	08007cfb 	.word	0x08007cfb
 8007c4c:	08007cc7 	.word	0x08007cc7
 8007c50:	08007cfb 	.word	0x08007cfb
 8007c54:	08007cfb 	.word	0x08007cfb
 8007c58:	08007cfb 	.word	0x08007cfb
 8007c5c:	08007cfb 	.word	0x08007cfb
 8007c60:	08007cfb 	.word	0x08007cfb
 8007c64:	08007cfb 	.word	0x08007cfb
 8007c68:	08007cfb 	.word	0x08007cfb
 8007c6c:	08007cfb 	.word	0x08007cfb
 8007c70:	08007cfb 	.word	0x08007cfb
 8007c74:	08007cfb 	.word	0x08007cfb
 8007c78:	08007cfb 	.word	0x08007cfb
 8007c7c:	08007cfb 	.word	0x08007cfb
 8007c80:	08007cfb 	.word	0x08007cfb
 8007c84:	08007cfb 	.word	0x08007cfb
 8007c88:	08007cfb 	.word	0x08007cfb
 8007c8c:	08007ced 	.word	0x08007ced
 8007c90:	2b40      	cmp	r3, #64	@ 0x40
 8007c92:	d02e      	beq.n	8007cf2 <UART_SetConfig+0xa36>
 8007c94:	e031      	b.n	8007cfa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c96:	f7fd fbbd 	bl	8005414 <HAL_RCC_GetPCLK1Freq>
 8007c9a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007c9c:	e033      	b.n	8007d06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c9e:	f7fd fbcf 	bl	8005440 <HAL_RCC_GetPCLK2Freq>
 8007ca2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007ca4:	e02f      	b.n	8007d06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ca6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7fe fdfe 	bl	80068ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cb4:	e027      	b.n	8007d06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cb6:	f107 0318 	add.w	r3, r7, #24
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7fe ff4a 	bl	8006b54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cc4:	e01f      	b.n	8007d06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cc6:	4b2d      	ldr	r3, [pc, #180]	@ (8007d7c <UART_SetConfig+0xac0>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 0320 	and.w	r3, r3, #32
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d009      	beq.n	8007ce6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007cd2:	4b2a      	ldr	r3, [pc, #168]	@ (8007d7c <UART_SetConfig+0xac0>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	08db      	lsrs	r3, r3, #3
 8007cd8:	f003 0303 	and.w	r3, r3, #3
 8007cdc:	4a28      	ldr	r2, [pc, #160]	@ (8007d80 <UART_SetConfig+0xac4>)
 8007cde:	fa22 f303 	lsr.w	r3, r2, r3
 8007ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ce4:	e00f      	b.n	8007d06 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007ce6:	4b26      	ldr	r3, [pc, #152]	@ (8007d80 <UART_SetConfig+0xac4>)
 8007ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cea:	e00c      	b.n	8007d06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007cec:	4b25      	ldr	r3, [pc, #148]	@ (8007d84 <UART_SetConfig+0xac8>)
 8007cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cf0:	e009      	b.n	8007d06 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cf2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cf8:	e005      	b.n	8007d06 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007d04:	bf00      	nop
    }

    if (pclk != 0U)
 8007d06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d021      	beq.n	8007d50 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d10:	4a1d      	ldr	r2, [pc, #116]	@ (8007d88 <UART_SetConfig+0xacc>)
 8007d12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d16:	461a      	mov	r2, r3
 8007d18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d1a:	fbb3 f2f2 	udiv	r2, r3, r2
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	085b      	lsrs	r3, r3, #1
 8007d24:	441a      	add	r2, r3
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d2e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d32:	2b0f      	cmp	r3, #15
 8007d34:	d909      	bls.n	8007d4a <UART_SetConfig+0xa8e>
 8007d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d3c:	d205      	bcs.n	8007d4a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	60da      	str	r2, [r3, #12]
 8007d48:	e002      	b.n	8007d50 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	2200      	movs	r2, #0
 8007d64:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007d6c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3748      	adds	r7, #72	@ 0x48
 8007d74:	46bd      	mov	sp, r7
 8007d76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d7a:	bf00      	nop
 8007d7c:	58024400 	.word	0x58024400
 8007d80:	03d09000 	.word	0x03d09000
 8007d84:	003d0900 	.word	0x003d0900
 8007d88:	08009868 	.word	0x08009868

08007d8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d98:	f003 0308 	and.w	r3, r3, #8
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d00a      	beq.n	8007db6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	430a      	orrs	r2, r1
 8007db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dba:	f003 0301 	and.w	r3, r3, #1
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00a      	beq.n	8007dd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	430a      	orrs	r2, r1
 8007dd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ddc:	f003 0302 	and.w	r3, r3, #2
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00a      	beq.n	8007dfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	430a      	orrs	r2, r1
 8007df8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dfe:	f003 0304 	and.w	r3, r3, #4
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d00a      	beq.n	8007e1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	430a      	orrs	r2, r1
 8007e1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e20:	f003 0310 	and.w	r3, r3, #16
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d00a      	beq.n	8007e3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	430a      	orrs	r2, r1
 8007e3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e42:	f003 0320 	and.w	r3, r3, #32
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00a      	beq.n	8007e60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	430a      	orrs	r2, r1
 8007e5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d01a      	beq.n	8007ea2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	430a      	orrs	r2, r1
 8007e80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e8a:	d10a      	bne.n	8007ea2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	430a      	orrs	r2, r1
 8007ea0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d00a      	beq.n	8007ec4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	430a      	orrs	r2, r1
 8007ec2:	605a      	str	r2, [r3, #4]
  }
}
 8007ec4:	bf00      	nop
 8007ec6:	370c      	adds	r7, #12
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b098      	sub	sp, #96	@ 0x60
 8007ed4:	af02      	add	r7, sp, #8
 8007ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ee0:	f7f9 fdf2 	bl	8001ac8 <HAL_GetTick>
 8007ee4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f003 0308 	and.w	r3, r3, #8
 8007ef0:	2b08      	cmp	r3, #8
 8007ef2:	d12f      	bne.n	8007f54 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ef4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ef8:	9300      	str	r3, [sp, #0]
 8007efa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007efc:	2200      	movs	r2, #0
 8007efe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 f88e 	bl	8008024 <UART_WaitOnFlagUntilTimeout>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d022      	beq.n	8007f54 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f16:	e853 3f00 	ldrex	r3, [r3]
 8007f1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f22:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	461a      	mov	r2, r3
 8007f2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f2e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f34:	e841 2300 	strex	r3, r2, [r1]
 8007f38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007f3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d1e6      	bne.n	8007f0e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2220      	movs	r2, #32
 8007f44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f50:	2303      	movs	r3, #3
 8007f52:	e063      	b.n	800801c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 0304 	and.w	r3, r3, #4
 8007f5e:	2b04      	cmp	r3, #4
 8007f60:	d149      	bne.n	8007ff6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f62:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007f66:	9300      	str	r3, [sp, #0]
 8007f68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 f857 	bl	8008024 <UART_WaitOnFlagUntilTimeout>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d03c      	beq.n	8007ff6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f84:	e853 3f00 	ldrex	r3, [r3]
 8007f88:	623b      	str	r3, [r7, #32]
   return(result);
 8007f8a:	6a3b      	ldr	r3, [r7, #32]
 8007f8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f90:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	461a      	mov	r2, r3
 8007f98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007fa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fa2:	e841 2300 	strex	r3, r2, [r1]
 8007fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1e6      	bne.n	8007f7c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	3308      	adds	r3, #8
 8007fb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	e853 3f00 	ldrex	r3, [r3]
 8007fbc:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f023 0301 	bic.w	r3, r3, #1
 8007fc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	3308      	adds	r3, #8
 8007fcc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007fce:	61fa      	str	r2, [r7, #28]
 8007fd0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd2:	69b9      	ldr	r1, [r7, #24]
 8007fd4:	69fa      	ldr	r2, [r7, #28]
 8007fd6:	e841 2300 	strex	r3, r2, [r1]
 8007fda:	617b      	str	r3, [r7, #20]
   return(result);
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d1e5      	bne.n	8007fae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2220      	movs	r2, #32
 8007fe6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	e012      	b.n	800801c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2220      	movs	r2, #32
 8007ffa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2220      	movs	r2, #32
 8008002:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800801a:	2300      	movs	r3, #0
}
 800801c:	4618      	mov	r0, r3
 800801e:	3758      	adds	r7, #88	@ 0x58
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	603b      	str	r3, [r7, #0]
 8008030:	4613      	mov	r3, r2
 8008032:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008034:	e04f      	b.n	80080d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800803c:	d04b      	beq.n	80080d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800803e:	f7f9 fd43 	bl	8001ac8 <HAL_GetTick>
 8008042:	4602      	mov	r2, r0
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	1ad3      	subs	r3, r2, r3
 8008048:	69ba      	ldr	r2, [r7, #24]
 800804a:	429a      	cmp	r2, r3
 800804c:	d302      	bcc.n	8008054 <UART_WaitOnFlagUntilTimeout+0x30>
 800804e:	69bb      	ldr	r3, [r7, #24]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d101      	bne.n	8008058 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008054:	2303      	movs	r3, #3
 8008056:	e04e      	b.n	80080f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f003 0304 	and.w	r3, r3, #4
 8008062:	2b00      	cmp	r3, #0
 8008064:	d037      	beq.n	80080d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	2b80      	cmp	r3, #128	@ 0x80
 800806a:	d034      	beq.n	80080d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	2b40      	cmp	r3, #64	@ 0x40
 8008070:	d031      	beq.n	80080d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	69db      	ldr	r3, [r3, #28]
 8008078:	f003 0308 	and.w	r3, r3, #8
 800807c:	2b08      	cmp	r3, #8
 800807e:	d110      	bne.n	80080a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2208      	movs	r2, #8
 8008086:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008088:	68f8      	ldr	r0, [r7, #12]
 800808a:	f000 f921 	bl	80082d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2208      	movs	r2, #8
 8008092:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2200      	movs	r2, #0
 800809a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800809e:	2301      	movs	r3, #1
 80080a0:	e029      	b.n	80080f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	69db      	ldr	r3, [r3, #28]
 80080a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80080ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80080b0:	d111      	bne.n	80080d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80080ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	f000 f907 	bl	80082d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2220      	movs	r2, #32
 80080c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80080d2:	2303      	movs	r3, #3
 80080d4:	e00f      	b.n	80080f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	69da      	ldr	r2, [r3, #28]
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	4013      	ands	r3, r2
 80080e0:	68ba      	ldr	r2, [r7, #8]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	bf0c      	ite	eq
 80080e6:	2301      	moveq	r3, #1
 80080e8:	2300      	movne	r3, #0
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	461a      	mov	r2, r3
 80080ee:	79fb      	ldrb	r3, [r7, #7]
 80080f0:	429a      	cmp	r2, r3
 80080f2:	d0a0      	beq.n	8008036 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080f4:	2300      	movs	r3, #0
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3710      	adds	r7, #16
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
	...

08008100 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b096      	sub	sp, #88	@ 0x58
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	4613      	mov	r3, r2
 800810c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	68ba      	ldr	r2, [r7, #8]
 8008112:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	88fa      	ldrh	r2, [r7, #6]
 8008118:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2200      	movs	r2, #0
 8008120:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2222      	movs	r2, #34	@ 0x22
 8008128:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008132:	2b00      	cmp	r3, #0
 8008134:	d02d      	beq.n	8008192 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800813c:	4a40      	ldr	r2, [pc, #256]	@ (8008240 <UART_Start_Receive_DMA+0x140>)
 800813e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008146:	4a3f      	ldr	r2, [pc, #252]	@ (8008244 <UART_Start_Receive_DMA+0x144>)
 8008148:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008150:	4a3d      	ldr	r2, [pc, #244]	@ (8008248 <UART_Start_Receive_DMA+0x148>)
 8008152:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800815a:	2200      	movs	r2, #0
 800815c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	3324      	adds	r3, #36	@ 0x24
 800816a:	4619      	mov	r1, r3
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008170:	461a      	mov	r2, r3
 8008172:	88fb      	ldrh	r3, [r7, #6]
 8008174:	f7fa f9c8 	bl	8002508 <HAL_DMA_Start_IT>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d009      	beq.n	8008192 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2210      	movs	r2, #16
 8008182:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2220      	movs	r2, #32
 800818a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	e051      	b.n	8008236 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d018      	beq.n	80081cc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081a2:	e853 3f00 	ldrex	r3, [r3]
 80081a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80081a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	461a      	mov	r2, r3
 80081b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80081ba:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081bc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80081be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80081c0:	e841 2300 	strex	r3, r2, [r1]
 80081c4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80081c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d1e6      	bne.n	800819a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	3308      	adds	r3, #8
 80081d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081d6:	e853 3f00 	ldrex	r3, [r3]
 80081da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80081dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081de:	f043 0301 	orr.w	r3, r3, #1
 80081e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	3308      	adds	r3, #8
 80081ea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80081ec:	637a      	str	r2, [r7, #52]	@ 0x34
 80081ee:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80081f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80081f4:	e841 2300 	strex	r3, r2, [r1]
 80081f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80081fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d1e5      	bne.n	80081cc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	3308      	adds	r3, #8
 8008206:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	e853 3f00 	ldrex	r3, [r3]
 800820e:	613b      	str	r3, [r7, #16]
   return(result);
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008216:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	3308      	adds	r3, #8
 800821e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008220:	623a      	str	r2, [r7, #32]
 8008222:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008224:	69f9      	ldr	r1, [r7, #28]
 8008226:	6a3a      	ldr	r2, [r7, #32]
 8008228:	e841 2300 	strex	r3, r2, [r1]
 800822c:	61bb      	str	r3, [r7, #24]
   return(result);
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d1e5      	bne.n	8008200 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008234:	2300      	movs	r3, #0
}
 8008236:	4618      	mov	r0, r3
 8008238:	3758      	adds	r7, #88	@ 0x58
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	0800839d 	.word	0x0800839d
 8008244:	080084c5 	.word	0x080084c5
 8008248:	08008503 	.word	0x08008503

0800824c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800824c:	b480      	push	{r7}
 800824e:	b08f      	sub	sp, #60	@ 0x3c
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800825a:	6a3b      	ldr	r3, [r7, #32]
 800825c:	e853 3f00 	ldrex	r3, [r3]
 8008260:	61fb      	str	r3, [r7, #28]
   return(result);
 8008262:	69fb      	ldr	r3, [r7, #28]
 8008264:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008268:	637b      	str	r3, [r7, #52]	@ 0x34
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	461a      	mov	r2, r3
 8008270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008272:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008274:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008276:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008278:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800827a:	e841 2300 	strex	r3, r2, [r1]
 800827e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008282:	2b00      	cmp	r3, #0
 8008284:	d1e6      	bne.n	8008254 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	3308      	adds	r3, #8
 800828c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	e853 3f00 	ldrex	r3, [r3]
 8008294:	60bb      	str	r3, [r7, #8]
   return(result);
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800829c:	633b      	str	r3, [r7, #48]	@ 0x30
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	3308      	adds	r3, #8
 80082a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082a6:	61ba      	str	r2, [r7, #24]
 80082a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082aa:	6979      	ldr	r1, [r7, #20]
 80082ac:	69ba      	ldr	r2, [r7, #24]
 80082ae:	e841 2300 	strex	r3, r2, [r1]
 80082b2:	613b      	str	r3, [r7, #16]
   return(result);
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d1e5      	bne.n	8008286 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2220      	movs	r2, #32
 80082be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80082c2:	bf00      	nop
 80082c4:	373c      	adds	r7, #60	@ 0x3c
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr
	...

080082d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b095      	sub	sp, #84	@ 0x54
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082e0:	e853 3f00 	ldrex	r3, [r3]
 80082e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80082e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80082ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	461a      	mov	r2, r3
 80082f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80082f8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80082fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80082fe:	e841 2300 	strex	r3, r2, [r1]
 8008302:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008306:	2b00      	cmp	r3, #0
 8008308:	d1e6      	bne.n	80082d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	3308      	adds	r3, #8
 8008310:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008312:	6a3b      	ldr	r3, [r7, #32]
 8008314:	e853 3f00 	ldrex	r3, [r3]
 8008318:	61fb      	str	r3, [r7, #28]
   return(result);
 800831a:	69fa      	ldr	r2, [r7, #28]
 800831c:	4b1e      	ldr	r3, [pc, #120]	@ (8008398 <UART_EndRxTransfer+0xc8>)
 800831e:	4013      	ands	r3, r2
 8008320:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	3308      	adds	r3, #8
 8008328:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800832a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800832c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008330:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008332:	e841 2300 	strex	r3, r2, [r1]
 8008336:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800833a:	2b00      	cmp	r3, #0
 800833c:	d1e5      	bne.n	800830a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008342:	2b01      	cmp	r3, #1
 8008344:	d118      	bne.n	8008378 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	e853 3f00 	ldrex	r3, [r3]
 8008352:	60bb      	str	r3, [r7, #8]
   return(result);
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	f023 0310 	bic.w	r3, r3, #16
 800835a:	647b      	str	r3, [r7, #68]	@ 0x44
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	461a      	mov	r2, r3
 8008362:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008364:	61bb      	str	r3, [r7, #24]
 8008366:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008368:	6979      	ldr	r1, [r7, #20]
 800836a:	69ba      	ldr	r2, [r7, #24]
 800836c:	e841 2300 	strex	r3, r2, [r1]
 8008370:	613b      	str	r3, [r7, #16]
   return(result);
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d1e6      	bne.n	8008346 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2220      	movs	r2, #32
 800837c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800838c:	bf00      	nop
 800838e:	3754      	adds	r7, #84	@ 0x54
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr
 8008398:	effffffe 	.word	0xeffffffe

0800839c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b09c      	sub	sp, #112	@ 0x70
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083a8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	69db      	ldr	r3, [r3, #28]
 80083ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083b2:	d071      	beq.n	8008498 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80083b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80083b6:	2200      	movs	r2, #0
 80083b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083c4:	e853 3f00 	ldrex	r3, [r3]
 80083c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80083ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80083d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80083d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	461a      	mov	r2, r3
 80083d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80083da:	65bb      	str	r3, [r7, #88]	@ 0x58
 80083dc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083de:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80083e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80083e2:	e841 2300 	strex	r3, r2, [r1]
 80083e6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80083e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d1e6      	bne.n	80083bc <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	3308      	adds	r3, #8
 80083f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083f8:	e853 3f00 	ldrex	r3, [r3]
 80083fc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80083fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008400:	f023 0301 	bic.w	r3, r3, #1
 8008404:	667b      	str	r3, [r7, #100]	@ 0x64
 8008406:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	3308      	adds	r3, #8
 800840c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800840e:	647a      	str	r2, [r7, #68]	@ 0x44
 8008410:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008412:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008414:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008416:	e841 2300 	strex	r3, r2, [r1]
 800841a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800841c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800841e:	2b00      	cmp	r3, #0
 8008420:	d1e5      	bne.n	80083ee <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008422:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	3308      	adds	r3, #8
 8008428:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800842c:	e853 3f00 	ldrex	r3, [r3]
 8008430:	623b      	str	r3, [r7, #32]
   return(result);
 8008432:	6a3b      	ldr	r3, [r7, #32]
 8008434:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008438:	663b      	str	r3, [r7, #96]	@ 0x60
 800843a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	3308      	adds	r3, #8
 8008440:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008442:	633a      	str	r2, [r7, #48]	@ 0x30
 8008444:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008446:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008448:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800844a:	e841 2300 	strex	r3, r2, [r1]
 800844e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008452:	2b00      	cmp	r3, #0
 8008454:	d1e5      	bne.n	8008422 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008456:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008458:	2220      	movs	r2, #32
 800845a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800845e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008460:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008462:	2b01      	cmp	r3, #1
 8008464:	d118      	bne.n	8008498 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008466:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	e853 3f00 	ldrex	r3, [r3]
 8008472:	60fb      	str	r3, [r7, #12]
   return(result);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f023 0310 	bic.w	r3, r3, #16
 800847a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800847c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	461a      	mov	r2, r3
 8008482:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008484:	61fb      	str	r3, [r7, #28]
 8008486:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008488:	69b9      	ldr	r1, [r7, #24]
 800848a:	69fa      	ldr	r2, [r7, #28]
 800848c:	e841 2300 	strex	r3, r2, [r1]
 8008490:	617b      	str	r3, [r7, #20]
   return(result);
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d1e6      	bne.n	8008466 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008498:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800849a:	2200      	movs	r2, #0
 800849c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800849e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d107      	bne.n	80084b6 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80084ac:	4619      	mov	r1, r3
 80084ae:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80084b0:	f7f8 fab2 	bl	8000a18 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80084b4:	e002      	b.n	80084bc <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80084b6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80084b8:	f7fe fee2 	bl	8007280 <HAL_UART_RxCpltCallback>
}
 80084bc:	bf00      	nop
 80084be:	3770      	adds	r7, #112	@ 0x70
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084d0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2201      	movs	r2, #1
 80084d6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084dc:	2b01      	cmp	r3, #1
 80084de:	d109      	bne.n	80084f4 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80084e6:	085b      	lsrs	r3, r3, #1
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	4619      	mov	r1, r3
 80084ec:	68f8      	ldr	r0, [r7, #12]
 80084ee:	f7f8 fa93 	bl	8000a18 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80084f2:	e002      	b.n	80084fa <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80084f4:	68f8      	ldr	r0, [r7, #12]
 80084f6:	f7fe fecd 	bl	8007294 <HAL_UART_RxHalfCpltCallback>
}
 80084fa:	bf00      	nop
 80084fc:	3710      	adds	r7, #16
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008502:	b580      	push	{r7, lr}
 8008504:	b086      	sub	sp, #24
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800850e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008516:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800851e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800852a:	2b80      	cmp	r3, #128	@ 0x80
 800852c:	d109      	bne.n	8008542 <UART_DMAError+0x40>
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	2b21      	cmp	r3, #33	@ 0x21
 8008532:	d106      	bne.n	8008542 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	2200      	movs	r2, #0
 8008538:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800853c:	6978      	ldr	r0, [r7, #20]
 800853e:	f7ff fe85 	bl	800824c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800854c:	2b40      	cmp	r3, #64	@ 0x40
 800854e:	d109      	bne.n	8008564 <UART_DMAError+0x62>
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2b22      	cmp	r3, #34	@ 0x22
 8008554:	d106      	bne.n	8008564 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	2200      	movs	r2, #0
 800855a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800855e:	6978      	ldr	r0, [r7, #20]
 8008560:	f7ff feb6 	bl	80082d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800856a:	f043 0210 	orr.w	r2, r3, #16
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008574:	6978      	ldr	r0, [r7, #20]
 8008576:	f7fe fe97 	bl	80072a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800857a:	bf00      	nop
 800857c:	3718      	adds	r7, #24
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008582:	b480      	push	{r7}
 8008584:	b085      	sub	sp, #20
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008590:	2b01      	cmp	r3, #1
 8008592:	d101      	bne.n	8008598 <HAL_UARTEx_DisableFifoMode+0x16>
 8008594:	2302      	movs	r3, #2
 8008596:	e027      	b.n	80085e8 <HAL_UARTEx_DisableFifoMode+0x66>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2201      	movs	r2, #1
 800859c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2224      	movs	r2, #36	@ 0x24
 80085a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f022 0201 	bic.w	r2, r2, #1
 80085be:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80085c6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	68fa      	ldr	r2, [r7, #12]
 80085d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2220      	movs	r2, #32
 80085da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80085e6:	2300      	movs	r3, #0
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3714      	adds	r7, #20
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr

080085f4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b084      	sub	sp, #16
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008604:	2b01      	cmp	r3, #1
 8008606:	d101      	bne.n	800860c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008608:	2302      	movs	r3, #2
 800860a:	e02d      	b.n	8008668 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2201      	movs	r2, #1
 8008610:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2224      	movs	r2, #36	@ 0x24
 8008618:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f022 0201 	bic.w	r2, r2, #1
 8008632:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	683a      	ldr	r2, [r7, #0]
 8008644:	430a      	orrs	r2, r1
 8008646:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 f8a3 	bl	8008794 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	68fa      	ldr	r2, [r7, #12]
 8008654:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2220      	movs	r2, #32
 800865a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2200      	movs	r2, #0
 8008662:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008666:	2300      	movs	r3, #0
}
 8008668:	4618      	mov	r0, r3
 800866a:	3710      	adds	r7, #16
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008680:	2b01      	cmp	r3, #1
 8008682:	d101      	bne.n	8008688 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008684:	2302      	movs	r3, #2
 8008686:	e02d      	b.n	80086e4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2201      	movs	r2, #1
 800868c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2224      	movs	r2, #36	@ 0x24
 8008694:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f022 0201 	bic.w	r2, r2, #1
 80086ae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	683a      	ldr	r2, [r7, #0]
 80086c0:	430a      	orrs	r2, r1
 80086c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 f865 	bl	8008794 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	68fa      	ldr	r2, [r7, #12]
 80086d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2220      	movs	r2, #32
 80086d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2200      	movs	r2, #0
 80086de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80086e2:	2300      	movs	r3, #0
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3710      	adds	r7, #16
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b08c      	sub	sp, #48	@ 0x30
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	4613      	mov	r3, r2
 80086f8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008700:	2b20      	cmp	r3, #32
 8008702:	d142      	bne.n	800878a <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d002      	beq.n	8008710 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800870a:	88fb      	ldrh	r3, [r7, #6]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d101      	bne.n	8008714 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8008710:	2301      	movs	r3, #1
 8008712:	e03b      	b.n	800878c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2201      	movs	r2, #1
 8008718:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2200      	movs	r2, #0
 800871e:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008720:	88fb      	ldrh	r3, [r7, #6]
 8008722:	461a      	mov	r2, r3
 8008724:	68b9      	ldr	r1, [r7, #8]
 8008726:	68f8      	ldr	r0, [r7, #12]
 8008728:	f7ff fcea 	bl	8008100 <UART_Start_Receive_DMA>
 800872c:	4603      	mov	r3, r0
 800872e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008732:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008736:	2b00      	cmp	r3, #0
 8008738:	d124      	bne.n	8008784 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800873e:	2b01      	cmp	r3, #1
 8008740:	d11d      	bne.n	800877e <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2210      	movs	r2, #16
 8008748:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	e853 3f00 	ldrex	r3, [r3]
 8008756:	617b      	str	r3, [r7, #20]
   return(result);
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	f043 0310 	orr.w	r3, r3, #16
 800875e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	461a      	mov	r2, r3
 8008766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008768:	627b      	str	r3, [r7, #36]	@ 0x24
 800876a:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800876c:	6a39      	ldr	r1, [r7, #32]
 800876e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008770:	e841 2300 	strex	r3, r2, [r1]
 8008774:	61fb      	str	r3, [r7, #28]
   return(result);
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d1e6      	bne.n	800874a <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800877c:	e002      	b.n	8008784 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800877e:	2301      	movs	r3, #1
 8008780:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8008784:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008788:	e000      	b.n	800878c <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800878a:	2302      	movs	r3, #2
  }
}
 800878c:	4618      	mov	r0, r3
 800878e:	3730      	adds	r7, #48	@ 0x30
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008794:	b480      	push	{r7}
 8008796:	b085      	sub	sp, #20
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d108      	bne.n	80087b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80087b4:	e031      	b.n	800881a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80087b6:	2310      	movs	r3, #16
 80087b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80087ba:	2310      	movs	r3, #16
 80087bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	0e5b      	lsrs	r3, r3, #25
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	f003 0307 	and.w	r3, r3, #7
 80087cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	0f5b      	lsrs	r3, r3, #29
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	f003 0307 	and.w	r3, r3, #7
 80087dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80087de:	7bbb      	ldrb	r3, [r7, #14]
 80087e0:	7b3a      	ldrb	r2, [r7, #12]
 80087e2:	4911      	ldr	r1, [pc, #68]	@ (8008828 <UARTEx_SetNbDataToProcess+0x94>)
 80087e4:	5c8a      	ldrb	r2, [r1, r2]
 80087e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80087ea:	7b3a      	ldrb	r2, [r7, #12]
 80087ec:	490f      	ldr	r1, [pc, #60]	@ (800882c <UARTEx_SetNbDataToProcess+0x98>)
 80087ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80087f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80087f4:	b29a      	uxth	r2, r3
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80087fc:	7bfb      	ldrb	r3, [r7, #15]
 80087fe:	7b7a      	ldrb	r2, [r7, #13]
 8008800:	4909      	ldr	r1, [pc, #36]	@ (8008828 <UARTEx_SetNbDataToProcess+0x94>)
 8008802:	5c8a      	ldrb	r2, [r1, r2]
 8008804:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008808:	7b7a      	ldrb	r2, [r7, #13]
 800880a:	4908      	ldr	r1, [pc, #32]	@ (800882c <UARTEx_SetNbDataToProcess+0x98>)
 800880c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800880e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008812:	b29a      	uxth	r2, r3
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800881a:	bf00      	nop
 800881c:	3714      	adds	r7, #20
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr
 8008826:	bf00      	nop
 8008828:	08009880 	.word	0x08009880
 800882c:	08009888 	.word	0x08009888

08008830 <std>:
 8008830:	2300      	movs	r3, #0
 8008832:	b510      	push	{r4, lr}
 8008834:	4604      	mov	r4, r0
 8008836:	e9c0 3300 	strd	r3, r3, [r0]
 800883a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800883e:	6083      	str	r3, [r0, #8]
 8008840:	8181      	strh	r1, [r0, #12]
 8008842:	6643      	str	r3, [r0, #100]	@ 0x64
 8008844:	81c2      	strh	r2, [r0, #14]
 8008846:	6183      	str	r3, [r0, #24]
 8008848:	4619      	mov	r1, r3
 800884a:	2208      	movs	r2, #8
 800884c:	305c      	adds	r0, #92	@ 0x5c
 800884e:	f000 f9f9 	bl	8008c44 <memset>
 8008852:	4b0d      	ldr	r3, [pc, #52]	@ (8008888 <std+0x58>)
 8008854:	6263      	str	r3, [r4, #36]	@ 0x24
 8008856:	4b0d      	ldr	r3, [pc, #52]	@ (800888c <std+0x5c>)
 8008858:	62a3      	str	r3, [r4, #40]	@ 0x28
 800885a:	4b0d      	ldr	r3, [pc, #52]	@ (8008890 <std+0x60>)
 800885c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800885e:	4b0d      	ldr	r3, [pc, #52]	@ (8008894 <std+0x64>)
 8008860:	6323      	str	r3, [r4, #48]	@ 0x30
 8008862:	4b0d      	ldr	r3, [pc, #52]	@ (8008898 <std+0x68>)
 8008864:	6224      	str	r4, [r4, #32]
 8008866:	429c      	cmp	r4, r3
 8008868:	d006      	beq.n	8008878 <std+0x48>
 800886a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800886e:	4294      	cmp	r4, r2
 8008870:	d002      	beq.n	8008878 <std+0x48>
 8008872:	33d0      	adds	r3, #208	@ 0xd0
 8008874:	429c      	cmp	r4, r3
 8008876:	d105      	bne.n	8008884 <std+0x54>
 8008878:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800887c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008880:	f000 ba58 	b.w	8008d34 <__retarget_lock_init_recursive>
 8008884:	bd10      	pop	{r4, pc}
 8008886:	bf00      	nop
 8008888:	08008a95 	.word	0x08008a95
 800888c:	08008ab7 	.word	0x08008ab7
 8008890:	08008aef 	.word	0x08008aef
 8008894:	08008b13 	.word	0x08008b13
 8008898:	24000394 	.word	0x24000394

0800889c <stdio_exit_handler>:
 800889c:	4a02      	ldr	r2, [pc, #8]	@ (80088a8 <stdio_exit_handler+0xc>)
 800889e:	4903      	ldr	r1, [pc, #12]	@ (80088ac <stdio_exit_handler+0x10>)
 80088a0:	4803      	ldr	r0, [pc, #12]	@ (80088b0 <stdio_exit_handler+0x14>)
 80088a2:	f000 b869 	b.w	8008978 <_fwalk_sglue>
 80088a6:	bf00      	nop
 80088a8:	24000010 	.word	0x24000010
 80088ac:	080095d1 	.word	0x080095d1
 80088b0:	24000020 	.word	0x24000020

080088b4 <cleanup_stdio>:
 80088b4:	6841      	ldr	r1, [r0, #4]
 80088b6:	4b0c      	ldr	r3, [pc, #48]	@ (80088e8 <cleanup_stdio+0x34>)
 80088b8:	4299      	cmp	r1, r3
 80088ba:	b510      	push	{r4, lr}
 80088bc:	4604      	mov	r4, r0
 80088be:	d001      	beq.n	80088c4 <cleanup_stdio+0x10>
 80088c0:	f000 fe86 	bl	80095d0 <_fflush_r>
 80088c4:	68a1      	ldr	r1, [r4, #8]
 80088c6:	4b09      	ldr	r3, [pc, #36]	@ (80088ec <cleanup_stdio+0x38>)
 80088c8:	4299      	cmp	r1, r3
 80088ca:	d002      	beq.n	80088d2 <cleanup_stdio+0x1e>
 80088cc:	4620      	mov	r0, r4
 80088ce:	f000 fe7f 	bl	80095d0 <_fflush_r>
 80088d2:	68e1      	ldr	r1, [r4, #12]
 80088d4:	4b06      	ldr	r3, [pc, #24]	@ (80088f0 <cleanup_stdio+0x3c>)
 80088d6:	4299      	cmp	r1, r3
 80088d8:	d004      	beq.n	80088e4 <cleanup_stdio+0x30>
 80088da:	4620      	mov	r0, r4
 80088dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088e0:	f000 be76 	b.w	80095d0 <_fflush_r>
 80088e4:	bd10      	pop	{r4, pc}
 80088e6:	bf00      	nop
 80088e8:	24000394 	.word	0x24000394
 80088ec:	240003fc 	.word	0x240003fc
 80088f0:	24000464 	.word	0x24000464

080088f4 <global_stdio_init.part.0>:
 80088f4:	b510      	push	{r4, lr}
 80088f6:	4b0b      	ldr	r3, [pc, #44]	@ (8008924 <global_stdio_init.part.0+0x30>)
 80088f8:	4c0b      	ldr	r4, [pc, #44]	@ (8008928 <global_stdio_init.part.0+0x34>)
 80088fa:	4a0c      	ldr	r2, [pc, #48]	@ (800892c <global_stdio_init.part.0+0x38>)
 80088fc:	601a      	str	r2, [r3, #0]
 80088fe:	4620      	mov	r0, r4
 8008900:	2200      	movs	r2, #0
 8008902:	2104      	movs	r1, #4
 8008904:	f7ff ff94 	bl	8008830 <std>
 8008908:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800890c:	2201      	movs	r2, #1
 800890e:	2109      	movs	r1, #9
 8008910:	f7ff ff8e 	bl	8008830 <std>
 8008914:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008918:	2202      	movs	r2, #2
 800891a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800891e:	2112      	movs	r1, #18
 8008920:	f7ff bf86 	b.w	8008830 <std>
 8008924:	240004cc 	.word	0x240004cc
 8008928:	24000394 	.word	0x24000394
 800892c:	0800889d 	.word	0x0800889d

08008930 <__sfp_lock_acquire>:
 8008930:	4801      	ldr	r0, [pc, #4]	@ (8008938 <__sfp_lock_acquire+0x8>)
 8008932:	f000 ba00 	b.w	8008d36 <__retarget_lock_acquire_recursive>
 8008936:	bf00      	nop
 8008938:	240004d5 	.word	0x240004d5

0800893c <__sfp_lock_release>:
 800893c:	4801      	ldr	r0, [pc, #4]	@ (8008944 <__sfp_lock_release+0x8>)
 800893e:	f000 b9fb 	b.w	8008d38 <__retarget_lock_release_recursive>
 8008942:	bf00      	nop
 8008944:	240004d5 	.word	0x240004d5

08008948 <__sinit>:
 8008948:	b510      	push	{r4, lr}
 800894a:	4604      	mov	r4, r0
 800894c:	f7ff fff0 	bl	8008930 <__sfp_lock_acquire>
 8008950:	6a23      	ldr	r3, [r4, #32]
 8008952:	b11b      	cbz	r3, 800895c <__sinit+0x14>
 8008954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008958:	f7ff bff0 	b.w	800893c <__sfp_lock_release>
 800895c:	4b04      	ldr	r3, [pc, #16]	@ (8008970 <__sinit+0x28>)
 800895e:	6223      	str	r3, [r4, #32]
 8008960:	4b04      	ldr	r3, [pc, #16]	@ (8008974 <__sinit+0x2c>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d1f5      	bne.n	8008954 <__sinit+0xc>
 8008968:	f7ff ffc4 	bl	80088f4 <global_stdio_init.part.0>
 800896c:	e7f2      	b.n	8008954 <__sinit+0xc>
 800896e:	bf00      	nop
 8008970:	080088b5 	.word	0x080088b5
 8008974:	240004cc 	.word	0x240004cc

08008978 <_fwalk_sglue>:
 8008978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800897c:	4607      	mov	r7, r0
 800897e:	4688      	mov	r8, r1
 8008980:	4614      	mov	r4, r2
 8008982:	2600      	movs	r6, #0
 8008984:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008988:	f1b9 0901 	subs.w	r9, r9, #1
 800898c:	d505      	bpl.n	800899a <_fwalk_sglue+0x22>
 800898e:	6824      	ldr	r4, [r4, #0]
 8008990:	2c00      	cmp	r4, #0
 8008992:	d1f7      	bne.n	8008984 <_fwalk_sglue+0xc>
 8008994:	4630      	mov	r0, r6
 8008996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800899a:	89ab      	ldrh	r3, [r5, #12]
 800899c:	2b01      	cmp	r3, #1
 800899e:	d907      	bls.n	80089b0 <_fwalk_sglue+0x38>
 80089a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80089a4:	3301      	adds	r3, #1
 80089a6:	d003      	beq.n	80089b0 <_fwalk_sglue+0x38>
 80089a8:	4629      	mov	r1, r5
 80089aa:	4638      	mov	r0, r7
 80089ac:	47c0      	blx	r8
 80089ae:	4306      	orrs	r6, r0
 80089b0:	3568      	adds	r5, #104	@ 0x68
 80089b2:	e7e9      	b.n	8008988 <_fwalk_sglue+0x10>

080089b4 <iprintf>:
 80089b4:	b40f      	push	{r0, r1, r2, r3}
 80089b6:	b507      	push	{r0, r1, r2, lr}
 80089b8:	4906      	ldr	r1, [pc, #24]	@ (80089d4 <iprintf+0x20>)
 80089ba:	ab04      	add	r3, sp, #16
 80089bc:	6808      	ldr	r0, [r1, #0]
 80089be:	f853 2b04 	ldr.w	r2, [r3], #4
 80089c2:	6881      	ldr	r1, [r0, #8]
 80089c4:	9301      	str	r3, [sp, #4]
 80089c6:	f000 fadb 	bl	8008f80 <_vfiprintf_r>
 80089ca:	b003      	add	sp, #12
 80089cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80089d0:	b004      	add	sp, #16
 80089d2:	4770      	bx	lr
 80089d4:	2400001c 	.word	0x2400001c

080089d8 <_puts_r>:
 80089d8:	6a03      	ldr	r3, [r0, #32]
 80089da:	b570      	push	{r4, r5, r6, lr}
 80089dc:	6884      	ldr	r4, [r0, #8]
 80089de:	4605      	mov	r5, r0
 80089e0:	460e      	mov	r6, r1
 80089e2:	b90b      	cbnz	r3, 80089e8 <_puts_r+0x10>
 80089e4:	f7ff ffb0 	bl	8008948 <__sinit>
 80089e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80089ea:	07db      	lsls	r3, r3, #31
 80089ec:	d405      	bmi.n	80089fa <_puts_r+0x22>
 80089ee:	89a3      	ldrh	r3, [r4, #12]
 80089f0:	0598      	lsls	r0, r3, #22
 80089f2:	d402      	bmi.n	80089fa <_puts_r+0x22>
 80089f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089f6:	f000 f99e 	bl	8008d36 <__retarget_lock_acquire_recursive>
 80089fa:	89a3      	ldrh	r3, [r4, #12]
 80089fc:	0719      	lsls	r1, r3, #28
 80089fe:	d502      	bpl.n	8008a06 <_puts_r+0x2e>
 8008a00:	6923      	ldr	r3, [r4, #16]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d135      	bne.n	8008a72 <_puts_r+0x9a>
 8008a06:	4621      	mov	r1, r4
 8008a08:	4628      	mov	r0, r5
 8008a0a:	f000 f8c5 	bl	8008b98 <__swsetup_r>
 8008a0e:	b380      	cbz	r0, 8008a72 <_puts_r+0x9a>
 8008a10:	f04f 35ff 	mov.w	r5, #4294967295
 8008a14:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a16:	07da      	lsls	r2, r3, #31
 8008a18:	d405      	bmi.n	8008a26 <_puts_r+0x4e>
 8008a1a:	89a3      	ldrh	r3, [r4, #12]
 8008a1c:	059b      	lsls	r3, r3, #22
 8008a1e:	d402      	bmi.n	8008a26 <_puts_r+0x4e>
 8008a20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a22:	f000 f989 	bl	8008d38 <__retarget_lock_release_recursive>
 8008a26:	4628      	mov	r0, r5
 8008a28:	bd70      	pop	{r4, r5, r6, pc}
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	da04      	bge.n	8008a38 <_puts_r+0x60>
 8008a2e:	69a2      	ldr	r2, [r4, #24]
 8008a30:	429a      	cmp	r2, r3
 8008a32:	dc17      	bgt.n	8008a64 <_puts_r+0x8c>
 8008a34:	290a      	cmp	r1, #10
 8008a36:	d015      	beq.n	8008a64 <_puts_r+0x8c>
 8008a38:	6823      	ldr	r3, [r4, #0]
 8008a3a:	1c5a      	adds	r2, r3, #1
 8008a3c:	6022      	str	r2, [r4, #0]
 8008a3e:	7019      	strb	r1, [r3, #0]
 8008a40:	68a3      	ldr	r3, [r4, #8]
 8008a42:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008a46:	3b01      	subs	r3, #1
 8008a48:	60a3      	str	r3, [r4, #8]
 8008a4a:	2900      	cmp	r1, #0
 8008a4c:	d1ed      	bne.n	8008a2a <_puts_r+0x52>
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	da11      	bge.n	8008a76 <_puts_r+0x9e>
 8008a52:	4622      	mov	r2, r4
 8008a54:	210a      	movs	r1, #10
 8008a56:	4628      	mov	r0, r5
 8008a58:	f000 f85f 	bl	8008b1a <__swbuf_r>
 8008a5c:	3001      	adds	r0, #1
 8008a5e:	d0d7      	beq.n	8008a10 <_puts_r+0x38>
 8008a60:	250a      	movs	r5, #10
 8008a62:	e7d7      	b.n	8008a14 <_puts_r+0x3c>
 8008a64:	4622      	mov	r2, r4
 8008a66:	4628      	mov	r0, r5
 8008a68:	f000 f857 	bl	8008b1a <__swbuf_r>
 8008a6c:	3001      	adds	r0, #1
 8008a6e:	d1e7      	bne.n	8008a40 <_puts_r+0x68>
 8008a70:	e7ce      	b.n	8008a10 <_puts_r+0x38>
 8008a72:	3e01      	subs	r6, #1
 8008a74:	e7e4      	b.n	8008a40 <_puts_r+0x68>
 8008a76:	6823      	ldr	r3, [r4, #0]
 8008a78:	1c5a      	adds	r2, r3, #1
 8008a7a:	6022      	str	r2, [r4, #0]
 8008a7c:	220a      	movs	r2, #10
 8008a7e:	701a      	strb	r2, [r3, #0]
 8008a80:	e7ee      	b.n	8008a60 <_puts_r+0x88>
	...

08008a84 <puts>:
 8008a84:	4b02      	ldr	r3, [pc, #8]	@ (8008a90 <puts+0xc>)
 8008a86:	4601      	mov	r1, r0
 8008a88:	6818      	ldr	r0, [r3, #0]
 8008a8a:	f7ff bfa5 	b.w	80089d8 <_puts_r>
 8008a8e:	bf00      	nop
 8008a90:	2400001c 	.word	0x2400001c

08008a94 <__sread>:
 8008a94:	b510      	push	{r4, lr}
 8008a96:	460c      	mov	r4, r1
 8008a98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a9c:	f000 f8fc 	bl	8008c98 <_read_r>
 8008aa0:	2800      	cmp	r0, #0
 8008aa2:	bfab      	itete	ge
 8008aa4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008aa6:	89a3      	ldrhlt	r3, [r4, #12]
 8008aa8:	181b      	addge	r3, r3, r0
 8008aaa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008aae:	bfac      	ite	ge
 8008ab0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008ab2:	81a3      	strhlt	r3, [r4, #12]
 8008ab4:	bd10      	pop	{r4, pc}

08008ab6 <__swrite>:
 8008ab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aba:	461f      	mov	r7, r3
 8008abc:	898b      	ldrh	r3, [r1, #12]
 8008abe:	05db      	lsls	r3, r3, #23
 8008ac0:	4605      	mov	r5, r0
 8008ac2:	460c      	mov	r4, r1
 8008ac4:	4616      	mov	r6, r2
 8008ac6:	d505      	bpl.n	8008ad4 <__swrite+0x1e>
 8008ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008acc:	2302      	movs	r3, #2
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f000 f8d0 	bl	8008c74 <_lseek_r>
 8008ad4:	89a3      	ldrh	r3, [r4, #12]
 8008ad6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ada:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008ade:	81a3      	strh	r3, [r4, #12]
 8008ae0:	4632      	mov	r2, r6
 8008ae2:	463b      	mov	r3, r7
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008aea:	f000 b8e7 	b.w	8008cbc <_write_r>

08008aee <__sseek>:
 8008aee:	b510      	push	{r4, lr}
 8008af0:	460c      	mov	r4, r1
 8008af2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008af6:	f000 f8bd 	bl	8008c74 <_lseek_r>
 8008afa:	1c43      	adds	r3, r0, #1
 8008afc:	89a3      	ldrh	r3, [r4, #12]
 8008afe:	bf15      	itete	ne
 8008b00:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008b02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008b06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008b0a:	81a3      	strheq	r3, [r4, #12]
 8008b0c:	bf18      	it	ne
 8008b0e:	81a3      	strhne	r3, [r4, #12]
 8008b10:	bd10      	pop	{r4, pc}

08008b12 <__sclose>:
 8008b12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b16:	f000 b89d 	b.w	8008c54 <_close_r>

08008b1a <__swbuf_r>:
 8008b1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b1c:	460e      	mov	r6, r1
 8008b1e:	4614      	mov	r4, r2
 8008b20:	4605      	mov	r5, r0
 8008b22:	b118      	cbz	r0, 8008b2c <__swbuf_r+0x12>
 8008b24:	6a03      	ldr	r3, [r0, #32]
 8008b26:	b90b      	cbnz	r3, 8008b2c <__swbuf_r+0x12>
 8008b28:	f7ff ff0e 	bl	8008948 <__sinit>
 8008b2c:	69a3      	ldr	r3, [r4, #24]
 8008b2e:	60a3      	str	r3, [r4, #8]
 8008b30:	89a3      	ldrh	r3, [r4, #12]
 8008b32:	071a      	lsls	r2, r3, #28
 8008b34:	d501      	bpl.n	8008b3a <__swbuf_r+0x20>
 8008b36:	6923      	ldr	r3, [r4, #16]
 8008b38:	b943      	cbnz	r3, 8008b4c <__swbuf_r+0x32>
 8008b3a:	4621      	mov	r1, r4
 8008b3c:	4628      	mov	r0, r5
 8008b3e:	f000 f82b 	bl	8008b98 <__swsetup_r>
 8008b42:	b118      	cbz	r0, 8008b4c <__swbuf_r+0x32>
 8008b44:	f04f 37ff 	mov.w	r7, #4294967295
 8008b48:	4638      	mov	r0, r7
 8008b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b4c:	6823      	ldr	r3, [r4, #0]
 8008b4e:	6922      	ldr	r2, [r4, #16]
 8008b50:	1a98      	subs	r0, r3, r2
 8008b52:	6963      	ldr	r3, [r4, #20]
 8008b54:	b2f6      	uxtb	r6, r6
 8008b56:	4283      	cmp	r3, r0
 8008b58:	4637      	mov	r7, r6
 8008b5a:	dc05      	bgt.n	8008b68 <__swbuf_r+0x4e>
 8008b5c:	4621      	mov	r1, r4
 8008b5e:	4628      	mov	r0, r5
 8008b60:	f000 fd36 	bl	80095d0 <_fflush_r>
 8008b64:	2800      	cmp	r0, #0
 8008b66:	d1ed      	bne.n	8008b44 <__swbuf_r+0x2a>
 8008b68:	68a3      	ldr	r3, [r4, #8]
 8008b6a:	3b01      	subs	r3, #1
 8008b6c:	60a3      	str	r3, [r4, #8]
 8008b6e:	6823      	ldr	r3, [r4, #0]
 8008b70:	1c5a      	adds	r2, r3, #1
 8008b72:	6022      	str	r2, [r4, #0]
 8008b74:	701e      	strb	r6, [r3, #0]
 8008b76:	6962      	ldr	r2, [r4, #20]
 8008b78:	1c43      	adds	r3, r0, #1
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d004      	beq.n	8008b88 <__swbuf_r+0x6e>
 8008b7e:	89a3      	ldrh	r3, [r4, #12]
 8008b80:	07db      	lsls	r3, r3, #31
 8008b82:	d5e1      	bpl.n	8008b48 <__swbuf_r+0x2e>
 8008b84:	2e0a      	cmp	r6, #10
 8008b86:	d1df      	bne.n	8008b48 <__swbuf_r+0x2e>
 8008b88:	4621      	mov	r1, r4
 8008b8a:	4628      	mov	r0, r5
 8008b8c:	f000 fd20 	bl	80095d0 <_fflush_r>
 8008b90:	2800      	cmp	r0, #0
 8008b92:	d0d9      	beq.n	8008b48 <__swbuf_r+0x2e>
 8008b94:	e7d6      	b.n	8008b44 <__swbuf_r+0x2a>
	...

08008b98 <__swsetup_r>:
 8008b98:	b538      	push	{r3, r4, r5, lr}
 8008b9a:	4b29      	ldr	r3, [pc, #164]	@ (8008c40 <__swsetup_r+0xa8>)
 8008b9c:	4605      	mov	r5, r0
 8008b9e:	6818      	ldr	r0, [r3, #0]
 8008ba0:	460c      	mov	r4, r1
 8008ba2:	b118      	cbz	r0, 8008bac <__swsetup_r+0x14>
 8008ba4:	6a03      	ldr	r3, [r0, #32]
 8008ba6:	b90b      	cbnz	r3, 8008bac <__swsetup_r+0x14>
 8008ba8:	f7ff fece 	bl	8008948 <__sinit>
 8008bac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bb0:	0719      	lsls	r1, r3, #28
 8008bb2:	d422      	bmi.n	8008bfa <__swsetup_r+0x62>
 8008bb4:	06da      	lsls	r2, r3, #27
 8008bb6:	d407      	bmi.n	8008bc8 <__swsetup_r+0x30>
 8008bb8:	2209      	movs	r2, #9
 8008bba:	602a      	str	r2, [r5, #0]
 8008bbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008bc0:	81a3      	strh	r3, [r4, #12]
 8008bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc6:	e033      	b.n	8008c30 <__swsetup_r+0x98>
 8008bc8:	0758      	lsls	r0, r3, #29
 8008bca:	d512      	bpl.n	8008bf2 <__swsetup_r+0x5a>
 8008bcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008bce:	b141      	cbz	r1, 8008be2 <__swsetup_r+0x4a>
 8008bd0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008bd4:	4299      	cmp	r1, r3
 8008bd6:	d002      	beq.n	8008bde <__swsetup_r+0x46>
 8008bd8:	4628      	mov	r0, r5
 8008bda:	f000 f8af 	bl	8008d3c <_free_r>
 8008bde:	2300      	movs	r3, #0
 8008be0:	6363      	str	r3, [r4, #52]	@ 0x34
 8008be2:	89a3      	ldrh	r3, [r4, #12]
 8008be4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008be8:	81a3      	strh	r3, [r4, #12]
 8008bea:	2300      	movs	r3, #0
 8008bec:	6063      	str	r3, [r4, #4]
 8008bee:	6923      	ldr	r3, [r4, #16]
 8008bf0:	6023      	str	r3, [r4, #0]
 8008bf2:	89a3      	ldrh	r3, [r4, #12]
 8008bf4:	f043 0308 	orr.w	r3, r3, #8
 8008bf8:	81a3      	strh	r3, [r4, #12]
 8008bfa:	6923      	ldr	r3, [r4, #16]
 8008bfc:	b94b      	cbnz	r3, 8008c12 <__swsetup_r+0x7a>
 8008bfe:	89a3      	ldrh	r3, [r4, #12]
 8008c00:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008c04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c08:	d003      	beq.n	8008c12 <__swsetup_r+0x7a>
 8008c0a:	4621      	mov	r1, r4
 8008c0c:	4628      	mov	r0, r5
 8008c0e:	f000 fd2d 	bl	800966c <__smakebuf_r>
 8008c12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c16:	f013 0201 	ands.w	r2, r3, #1
 8008c1a:	d00a      	beq.n	8008c32 <__swsetup_r+0x9a>
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	60a2      	str	r2, [r4, #8]
 8008c20:	6962      	ldr	r2, [r4, #20]
 8008c22:	4252      	negs	r2, r2
 8008c24:	61a2      	str	r2, [r4, #24]
 8008c26:	6922      	ldr	r2, [r4, #16]
 8008c28:	b942      	cbnz	r2, 8008c3c <__swsetup_r+0xa4>
 8008c2a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008c2e:	d1c5      	bne.n	8008bbc <__swsetup_r+0x24>
 8008c30:	bd38      	pop	{r3, r4, r5, pc}
 8008c32:	0799      	lsls	r1, r3, #30
 8008c34:	bf58      	it	pl
 8008c36:	6962      	ldrpl	r2, [r4, #20]
 8008c38:	60a2      	str	r2, [r4, #8]
 8008c3a:	e7f4      	b.n	8008c26 <__swsetup_r+0x8e>
 8008c3c:	2000      	movs	r0, #0
 8008c3e:	e7f7      	b.n	8008c30 <__swsetup_r+0x98>
 8008c40:	2400001c 	.word	0x2400001c

08008c44 <memset>:
 8008c44:	4402      	add	r2, r0
 8008c46:	4603      	mov	r3, r0
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d100      	bne.n	8008c4e <memset+0xa>
 8008c4c:	4770      	bx	lr
 8008c4e:	f803 1b01 	strb.w	r1, [r3], #1
 8008c52:	e7f9      	b.n	8008c48 <memset+0x4>

08008c54 <_close_r>:
 8008c54:	b538      	push	{r3, r4, r5, lr}
 8008c56:	4d06      	ldr	r5, [pc, #24]	@ (8008c70 <_close_r+0x1c>)
 8008c58:	2300      	movs	r3, #0
 8008c5a:	4604      	mov	r4, r0
 8008c5c:	4608      	mov	r0, r1
 8008c5e:	602b      	str	r3, [r5, #0]
 8008c60:	f7f8 fd5e 	bl	8001720 <_close>
 8008c64:	1c43      	adds	r3, r0, #1
 8008c66:	d102      	bne.n	8008c6e <_close_r+0x1a>
 8008c68:	682b      	ldr	r3, [r5, #0]
 8008c6a:	b103      	cbz	r3, 8008c6e <_close_r+0x1a>
 8008c6c:	6023      	str	r3, [r4, #0]
 8008c6e:	bd38      	pop	{r3, r4, r5, pc}
 8008c70:	240004d0 	.word	0x240004d0

08008c74 <_lseek_r>:
 8008c74:	b538      	push	{r3, r4, r5, lr}
 8008c76:	4d07      	ldr	r5, [pc, #28]	@ (8008c94 <_lseek_r+0x20>)
 8008c78:	4604      	mov	r4, r0
 8008c7a:	4608      	mov	r0, r1
 8008c7c:	4611      	mov	r1, r2
 8008c7e:	2200      	movs	r2, #0
 8008c80:	602a      	str	r2, [r5, #0]
 8008c82:	461a      	mov	r2, r3
 8008c84:	f7f8 fd73 	bl	800176e <_lseek>
 8008c88:	1c43      	adds	r3, r0, #1
 8008c8a:	d102      	bne.n	8008c92 <_lseek_r+0x1e>
 8008c8c:	682b      	ldr	r3, [r5, #0]
 8008c8e:	b103      	cbz	r3, 8008c92 <_lseek_r+0x1e>
 8008c90:	6023      	str	r3, [r4, #0]
 8008c92:	bd38      	pop	{r3, r4, r5, pc}
 8008c94:	240004d0 	.word	0x240004d0

08008c98 <_read_r>:
 8008c98:	b538      	push	{r3, r4, r5, lr}
 8008c9a:	4d07      	ldr	r5, [pc, #28]	@ (8008cb8 <_read_r+0x20>)
 8008c9c:	4604      	mov	r4, r0
 8008c9e:	4608      	mov	r0, r1
 8008ca0:	4611      	mov	r1, r2
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	602a      	str	r2, [r5, #0]
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	f7f8 fd1d 	bl	80016e6 <_read>
 8008cac:	1c43      	adds	r3, r0, #1
 8008cae:	d102      	bne.n	8008cb6 <_read_r+0x1e>
 8008cb0:	682b      	ldr	r3, [r5, #0]
 8008cb2:	b103      	cbz	r3, 8008cb6 <_read_r+0x1e>
 8008cb4:	6023      	str	r3, [r4, #0]
 8008cb6:	bd38      	pop	{r3, r4, r5, pc}
 8008cb8:	240004d0 	.word	0x240004d0

08008cbc <_write_r>:
 8008cbc:	b538      	push	{r3, r4, r5, lr}
 8008cbe:	4d07      	ldr	r5, [pc, #28]	@ (8008cdc <_write_r+0x20>)
 8008cc0:	4604      	mov	r4, r0
 8008cc2:	4608      	mov	r0, r1
 8008cc4:	4611      	mov	r1, r2
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	602a      	str	r2, [r5, #0]
 8008cca:	461a      	mov	r2, r3
 8008ccc:	f7f7 fd2e 	bl	800072c <_write>
 8008cd0:	1c43      	adds	r3, r0, #1
 8008cd2:	d102      	bne.n	8008cda <_write_r+0x1e>
 8008cd4:	682b      	ldr	r3, [r5, #0]
 8008cd6:	b103      	cbz	r3, 8008cda <_write_r+0x1e>
 8008cd8:	6023      	str	r3, [r4, #0]
 8008cda:	bd38      	pop	{r3, r4, r5, pc}
 8008cdc:	240004d0 	.word	0x240004d0

08008ce0 <__errno>:
 8008ce0:	4b01      	ldr	r3, [pc, #4]	@ (8008ce8 <__errno+0x8>)
 8008ce2:	6818      	ldr	r0, [r3, #0]
 8008ce4:	4770      	bx	lr
 8008ce6:	bf00      	nop
 8008ce8:	2400001c 	.word	0x2400001c

08008cec <__libc_init_array>:
 8008cec:	b570      	push	{r4, r5, r6, lr}
 8008cee:	4d0d      	ldr	r5, [pc, #52]	@ (8008d24 <__libc_init_array+0x38>)
 8008cf0:	4c0d      	ldr	r4, [pc, #52]	@ (8008d28 <__libc_init_array+0x3c>)
 8008cf2:	1b64      	subs	r4, r4, r5
 8008cf4:	10a4      	asrs	r4, r4, #2
 8008cf6:	2600      	movs	r6, #0
 8008cf8:	42a6      	cmp	r6, r4
 8008cfa:	d109      	bne.n	8008d10 <__libc_init_array+0x24>
 8008cfc:	4d0b      	ldr	r5, [pc, #44]	@ (8008d2c <__libc_init_array+0x40>)
 8008cfe:	4c0c      	ldr	r4, [pc, #48]	@ (8008d30 <__libc_init_array+0x44>)
 8008d00:	f000 fd22 	bl	8009748 <_init>
 8008d04:	1b64      	subs	r4, r4, r5
 8008d06:	10a4      	asrs	r4, r4, #2
 8008d08:	2600      	movs	r6, #0
 8008d0a:	42a6      	cmp	r6, r4
 8008d0c:	d105      	bne.n	8008d1a <__libc_init_array+0x2e>
 8008d0e:	bd70      	pop	{r4, r5, r6, pc}
 8008d10:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d14:	4798      	blx	r3
 8008d16:	3601      	adds	r6, #1
 8008d18:	e7ee      	b.n	8008cf8 <__libc_init_array+0xc>
 8008d1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d1e:	4798      	blx	r3
 8008d20:	3601      	adds	r6, #1
 8008d22:	e7f2      	b.n	8008d0a <__libc_init_array+0x1e>
 8008d24:	080098cc 	.word	0x080098cc
 8008d28:	080098cc 	.word	0x080098cc
 8008d2c:	080098cc 	.word	0x080098cc
 8008d30:	080098d0 	.word	0x080098d0

08008d34 <__retarget_lock_init_recursive>:
 8008d34:	4770      	bx	lr

08008d36 <__retarget_lock_acquire_recursive>:
 8008d36:	4770      	bx	lr

08008d38 <__retarget_lock_release_recursive>:
 8008d38:	4770      	bx	lr
	...

08008d3c <_free_r>:
 8008d3c:	b538      	push	{r3, r4, r5, lr}
 8008d3e:	4605      	mov	r5, r0
 8008d40:	2900      	cmp	r1, #0
 8008d42:	d041      	beq.n	8008dc8 <_free_r+0x8c>
 8008d44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d48:	1f0c      	subs	r4, r1, #4
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	bfb8      	it	lt
 8008d4e:	18e4      	addlt	r4, r4, r3
 8008d50:	f000 f8e0 	bl	8008f14 <__malloc_lock>
 8008d54:	4a1d      	ldr	r2, [pc, #116]	@ (8008dcc <_free_r+0x90>)
 8008d56:	6813      	ldr	r3, [r2, #0]
 8008d58:	b933      	cbnz	r3, 8008d68 <_free_r+0x2c>
 8008d5a:	6063      	str	r3, [r4, #4]
 8008d5c:	6014      	str	r4, [r2, #0]
 8008d5e:	4628      	mov	r0, r5
 8008d60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d64:	f000 b8dc 	b.w	8008f20 <__malloc_unlock>
 8008d68:	42a3      	cmp	r3, r4
 8008d6a:	d908      	bls.n	8008d7e <_free_r+0x42>
 8008d6c:	6820      	ldr	r0, [r4, #0]
 8008d6e:	1821      	adds	r1, r4, r0
 8008d70:	428b      	cmp	r3, r1
 8008d72:	bf01      	itttt	eq
 8008d74:	6819      	ldreq	r1, [r3, #0]
 8008d76:	685b      	ldreq	r3, [r3, #4]
 8008d78:	1809      	addeq	r1, r1, r0
 8008d7a:	6021      	streq	r1, [r4, #0]
 8008d7c:	e7ed      	b.n	8008d5a <_free_r+0x1e>
 8008d7e:	461a      	mov	r2, r3
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	b10b      	cbz	r3, 8008d88 <_free_r+0x4c>
 8008d84:	42a3      	cmp	r3, r4
 8008d86:	d9fa      	bls.n	8008d7e <_free_r+0x42>
 8008d88:	6811      	ldr	r1, [r2, #0]
 8008d8a:	1850      	adds	r0, r2, r1
 8008d8c:	42a0      	cmp	r0, r4
 8008d8e:	d10b      	bne.n	8008da8 <_free_r+0x6c>
 8008d90:	6820      	ldr	r0, [r4, #0]
 8008d92:	4401      	add	r1, r0
 8008d94:	1850      	adds	r0, r2, r1
 8008d96:	4283      	cmp	r3, r0
 8008d98:	6011      	str	r1, [r2, #0]
 8008d9a:	d1e0      	bne.n	8008d5e <_free_r+0x22>
 8008d9c:	6818      	ldr	r0, [r3, #0]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	6053      	str	r3, [r2, #4]
 8008da2:	4408      	add	r0, r1
 8008da4:	6010      	str	r0, [r2, #0]
 8008da6:	e7da      	b.n	8008d5e <_free_r+0x22>
 8008da8:	d902      	bls.n	8008db0 <_free_r+0x74>
 8008daa:	230c      	movs	r3, #12
 8008dac:	602b      	str	r3, [r5, #0]
 8008dae:	e7d6      	b.n	8008d5e <_free_r+0x22>
 8008db0:	6820      	ldr	r0, [r4, #0]
 8008db2:	1821      	adds	r1, r4, r0
 8008db4:	428b      	cmp	r3, r1
 8008db6:	bf04      	itt	eq
 8008db8:	6819      	ldreq	r1, [r3, #0]
 8008dba:	685b      	ldreq	r3, [r3, #4]
 8008dbc:	6063      	str	r3, [r4, #4]
 8008dbe:	bf04      	itt	eq
 8008dc0:	1809      	addeq	r1, r1, r0
 8008dc2:	6021      	streq	r1, [r4, #0]
 8008dc4:	6054      	str	r4, [r2, #4]
 8008dc6:	e7ca      	b.n	8008d5e <_free_r+0x22>
 8008dc8:	bd38      	pop	{r3, r4, r5, pc}
 8008dca:	bf00      	nop
 8008dcc:	240004dc 	.word	0x240004dc

08008dd0 <sbrk_aligned>:
 8008dd0:	b570      	push	{r4, r5, r6, lr}
 8008dd2:	4e0f      	ldr	r6, [pc, #60]	@ (8008e10 <sbrk_aligned+0x40>)
 8008dd4:	460c      	mov	r4, r1
 8008dd6:	6831      	ldr	r1, [r6, #0]
 8008dd8:	4605      	mov	r5, r0
 8008dda:	b911      	cbnz	r1, 8008de2 <sbrk_aligned+0x12>
 8008ddc:	f000 fca4 	bl	8009728 <_sbrk_r>
 8008de0:	6030      	str	r0, [r6, #0]
 8008de2:	4621      	mov	r1, r4
 8008de4:	4628      	mov	r0, r5
 8008de6:	f000 fc9f 	bl	8009728 <_sbrk_r>
 8008dea:	1c43      	adds	r3, r0, #1
 8008dec:	d103      	bne.n	8008df6 <sbrk_aligned+0x26>
 8008dee:	f04f 34ff 	mov.w	r4, #4294967295
 8008df2:	4620      	mov	r0, r4
 8008df4:	bd70      	pop	{r4, r5, r6, pc}
 8008df6:	1cc4      	adds	r4, r0, #3
 8008df8:	f024 0403 	bic.w	r4, r4, #3
 8008dfc:	42a0      	cmp	r0, r4
 8008dfe:	d0f8      	beq.n	8008df2 <sbrk_aligned+0x22>
 8008e00:	1a21      	subs	r1, r4, r0
 8008e02:	4628      	mov	r0, r5
 8008e04:	f000 fc90 	bl	8009728 <_sbrk_r>
 8008e08:	3001      	adds	r0, #1
 8008e0a:	d1f2      	bne.n	8008df2 <sbrk_aligned+0x22>
 8008e0c:	e7ef      	b.n	8008dee <sbrk_aligned+0x1e>
 8008e0e:	bf00      	nop
 8008e10:	240004d8 	.word	0x240004d8

08008e14 <_malloc_r>:
 8008e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e18:	1ccd      	adds	r5, r1, #3
 8008e1a:	f025 0503 	bic.w	r5, r5, #3
 8008e1e:	3508      	adds	r5, #8
 8008e20:	2d0c      	cmp	r5, #12
 8008e22:	bf38      	it	cc
 8008e24:	250c      	movcc	r5, #12
 8008e26:	2d00      	cmp	r5, #0
 8008e28:	4606      	mov	r6, r0
 8008e2a:	db01      	blt.n	8008e30 <_malloc_r+0x1c>
 8008e2c:	42a9      	cmp	r1, r5
 8008e2e:	d904      	bls.n	8008e3a <_malloc_r+0x26>
 8008e30:	230c      	movs	r3, #12
 8008e32:	6033      	str	r3, [r6, #0]
 8008e34:	2000      	movs	r0, #0
 8008e36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008f10 <_malloc_r+0xfc>
 8008e3e:	f000 f869 	bl	8008f14 <__malloc_lock>
 8008e42:	f8d8 3000 	ldr.w	r3, [r8]
 8008e46:	461c      	mov	r4, r3
 8008e48:	bb44      	cbnz	r4, 8008e9c <_malloc_r+0x88>
 8008e4a:	4629      	mov	r1, r5
 8008e4c:	4630      	mov	r0, r6
 8008e4e:	f7ff ffbf 	bl	8008dd0 <sbrk_aligned>
 8008e52:	1c43      	adds	r3, r0, #1
 8008e54:	4604      	mov	r4, r0
 8008e56:	d158      	bne.n	8008f0a <_malloc_r+0xf6>
 8008e58:	f8d8 4000 	ldr.w	r4, [r8]
 8008e5c:	4627      	mov	r7, r4
 8008e5e:	2f00      	cmp	r7, #0
 8008e60:	d143      	bne.n	8008eea <_malloc_r+0xd6>
 8008e62:	2c00      	cmp	r4, #0
 8008e64:	d04b      	beq.n	8008efe <_malloc_r+0xea>
 8008e66:	6823      	ldr	r3, [r4, #0]
 8008e68:	4639      	mov	r1, r7
 8008e6a:	4630      	mov	r0, r6
 8008e6c:	eb04 0903 	add.w	r9, r4, r3
 8008e70:	f000 fc5a 	bl	8009728 <_sbrk_r>
 8008e74:	4581      	cmp	r9, r0
 8008e76:	d142      	bne.n	8008efe <_malloc_r+0xea>
 8008e78:	6821      	ldr	r1, [r4, #0]
 8008e7a:	1a6d      	subs	r5, r5, r1
 8008e7c:	4629      	mov	r1, r5
 8008e7e:	4630      	mov	r0, r6
 8008e80:	f7ff ffa6 	bl	8008dd0 <sbrk_aligned>
 8008e84:	3001      	adds	r0, #1
 8008e86:	d03a      	beq.n	8008efe <_malloc_r+0xea>
 8008e88:	6823      	ldr	r3, [r4, #0]
 8008e8a:	442b      	add	r3, r5
 8008e8c:	6023      	str	r3, [r4, #0]
 8008e8e:	f8d8 3000 	ldr.w	r3, [r8]
 8008e92:	685a      	ldr	r2, [r3, #4]
 8008e94:	bb62      	cbnz	r2, 8008ef0 <_malloc_r+0xdc>
 8008e96:	f8c8 7000 	str.w	r7, [r8]
 8008e9a:	e00f      	b.n	8008ebc <_malloc_r+0xa8>
 8008e9c:	6822      	ldr	r2, [r4, #0]
 8008e9e:	1b52      	subs	r2, r2, r5
 8008ea0:	d420      	bmi.n	8008ee4 <_malloc_r+0xd0>
 8008ea2:	2a0b      	cmp	r2, #11
 8008ea4:	d917      	bls.n	8008ed6 <_malloc_r+0xc2>
 8008ea6:	1961      	adds	r1, r4, r5
 8008ea8:	42a3      	cmp	r3, r4
 8008eaa:	6025      	str	r5, [r4, #0]
 8008eac:	bf18      	it	ne
 8008eae:	6059      	strne	r1, [r3, #4]
 8008eb0:	6863      	ldr	r3, [r4, #4]
 8008eb2:	bf08      	it	eq
 8008eb4:	f8c8 1000 	streq.w	r1, [r8]
 8008eb8:	5162      	str	r2, [r4, r5]
 8008eba:	604b      	str	r3, [r1, #4]
 8008ebc:	4630      	mov	r0, r6
 8008ebe:	f000 f82f 	bl	8008f20 <__malloc_unlock>
 8008ec2:	f104 000b 	add.w	r0, r4, #11
 8008ec6:	1d23      	adds	r3, r4, #4
 8008ec8:	f020 0007 	bic.w	r0, r0, #7
 8008ecc:	1ac2      	subs	r2, r0, r3
 8008ece:	bf1c      	itt	ne
 8008ed0:	1a1b      	subne	r3, r3, r0
 8008ed2:	50a3      	strne	r3, [r4, r2]
 8008ed4:	e7af      	b.n	8008e36 <_malloc_r+0x22>
 8008ed6:	6862      	ldr	r2, [r4, #4]
 8008ed8:	42a3      	cmp	r3, r4
 8008eda:	bf0c      	ite	eq
 8008edc:	f8c8 2000 	streq.w	r2, [r8]
 8008ee0:	605a      	strne	r2, [r3, #4]
 8008ee2:	e7eb      	b.n	8008ebc <_malloc_r+0xa8>
 8008ee4:	4623      	mov	r3, r4
 8008ee6:	6864      	ldr	r4, [r4, #4]
 8008ee8:	e7ae      	b.n	8008e48 <_malloc_r+0x34>
 8008eea:	463c      	mov	r4, r7
 8008eec:	687f      	ldr	r7, [r7, #4]
 8008eee:	e7b6      	b.n	8008e5e <_malloc_r+0x4a>
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	42a3      	cmp	r3, r4
 8008ef6:	d1fb      	bne.n	8008ef0 <_malloc_r+0xdc>
 8008ef8:	2300      	movs	r3, #0
 8008efa:	6053      	str	r3, [r2, #4]
 8008efc:	e7de      	b.n	8008ebc <_malloc_r+0xa8>
 8008efe:	230c      	movs	r3, #12
 8008f00:	6033      	str	r3, [r6, #0]
 8008f02:	4630      	mov	r0, r6
 8008f04:	f000 f80c 	bl	8008f20 <__malloc_unlock>
 8008f08:	e794      	b.n	8008e34 <_malloc_r+0x20>
 8008f0a:	6005      	str	r5, [r0, #0]
 8008f0c:	e7d6      	b.n	8008ebc <_malloc_r+0xa8>
 8008f0e:	bf00      	nop
 8008f10:	240004dc 	.word	0x240004dc

08008f14 <__malloc_lock>:
 8008f14:	4801      	ldr	r0, [pc, #4]	@ (8008f1c <__malloc_lock+0x8>)
 8008f16:	f7ff bf0e 	b.w	8008d36 <__retarget_lock_acquire_recursive>
 8008f1a:	bf00      	nop
 8008f1c:	240004d4 	.word	0x240004d4

08008f20 <__malloc_unlock>:
 8008f20:	4801      	ldr	r0, [pc, #4]	@ (8008f28 <__malloc_unlock+0x8>)
 8008f22:	f7ff bf09 	b.w	8008d38 <__retarget_lock_release_recursive>
 8008f26:	bf00      	nop
 8008f28:	240004d4 	.word	0x240004d4

08008f2c <__sfputc_r>:
 8008f2c:	6893      	ldr	r3, [r2, #8]
 8008f2e:	3b01      	subs	r3, #1
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	b410      	push	{r4}
 8008f34:	6093      	str	r3, [r2, #8]
 8008f36:	da08      	bge.n	8008f4a <__sfputc_r+0x1e>
 8008f38:	6994      	ldr	r4, [r2, #24]
 8008f3a:	42a3      	cmp	r3, r4
 8008f3c:	db01      	blt.n	8008f42 <__sfputc_r+0x16>
 8008f3e:	290a      	cmp	r1, #10
 8008f40:	d103      	bne.n	8008f4a <__sfputc_r+0x1e>
 8008f42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f46:	f7ff bde8 	b.w	8008b1a <__swbuf_r>
 8008f4a:	6813      	ldr	r3, [r2, #0]
 8008f4c:	1c58      	adds	r0, r3, #1
 8008f4e:	6010      	str	r0, [r2, #0]
 8008f50:	7019      	strb	r1, [r3, #0]
 8008f52:	4608      	mov	r0, r1
 8008f54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f58:	4770      	bx	lr

08008f5a <__sfputs_r>:
 8008f5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f5c:	4606      	mov	r6, r0
 8008f5e:	460f      	mov	r7, r1
 8008f60:	4614      	mov	r4, r2
 8008f62:	18d5      	adds	r5, r2, r3
 8008f64:	42ac      	cmp	r4, r5
 8008f66:	d101      	bne.n	8008f6c <__sfputs_r+0x12>
 8008f68:	2000      	movs	r0, #0
 8008f6a:	e007      	b.n	8008f7c <__sfputs_r+0x22>
 8008f6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f70:	463a      	mov	r2, r7
 8008f72:	4630      	mov	r0, r6
 8008f74:	f7ff ffda 	bl	8008f2c <__sfputc_r>
 8008f78:	1c43      	adds	r3, r0, #1
 8008f7a:	d1f3      	bne.n	8008f64 <__sfputs_r+0xa>
 8008f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008f80 <_vfiprintf_r>:
 8008f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f84:	460d      	mov	r5, r1
 8008f86:	b09d      	sub	sp, #116	@ 0x74
 8008f88:	4614      	mov	r4, r2
 8008f8a:	4698      	mov	r8, r3
 8008f8c:	4606      	mov	r6, r0
 8008f8e:	b118      	cbz	r0, 8008f98 <_vfiprintf_r+0x18>
 8008f90:	6a03      	ldr	r3, [r0, #32]
 8008f92:	b90b      	cbnz	r3, 8008f98 <_vfiprintf_r+0x18>
 8008f94:	f7ff fcd8 	bl	8008948 <__sinit>
 8008f98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f9a:	07d9      	lsls	r1, r3, #31
 8008f9c:	d405      	bmi.n	8008faa <_vfiprintf_r+0x2a>
 8008f9e:	89ab      	ldrh	r3, [r5, #12]
 8008fa0:	059a      	lsls	r2, r3, #22
 8008fa2:	d402      	bmi.n	8008faa <_vfiprintf_r+0x2a>
 8008fa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fa6:	f7ff fec6 	bl	8008d36 <__retarget_lock_acquire_recursive>
 8008faa:	89ab      	ldrh	r3, [r5, #12]
 8008fac:	071b      	lsls	r3, r3, #28
 8008fae:	d501      	bpl.n	8008fb4 <_vfiprintf_r+0x34>
 8008fb0:	692b      	ldr	r3, [r5, #16]
 8008fb2:	b99b      	cbnz	r3, 8008fdc <_vfiprintf_r+0x5c>
 8008fb4:	4629      	mov	r1, r5
 8008fb6:	4630      	mov	r0, r6
 8008fb8:	f7ff fdee 	bl	8008b98 <__swsetup_r>
 8008fbc:	b170      	cbz	r0, 8008fdc <_vfiprintf_r+0x5c>
 8008fbe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008fc0:	07dc      	lsls	r4, r3, #31
 8008fc2:	d504      	bpl.n	8008fce <_vfiprintf_r+0x4e>
 8008fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fc8:	b01d      	add	sp, #116	@ 0x74
 8008fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fce:	89ab      	ldrh	r3, [r5, #12]
 8008fd0:	0598      	lsls	r0, r3, #22
 8008fd2:	d4f7      	bmi.n	8008fc4 <_vfiprintf_r+0x44>
 8008fd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fd6:	f7ff feaf 	bl	8008d38 <__retarget_lock_release_recursive>
 8008fda:	e7f3      	b.n	8008fc4 <_vfiprintf_r+0x44>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fe0:	2320      	movs	r3, #32
 8008fe2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008fe6:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fea:	2330      	movs	r3, #48	@ 0x30
 8008fec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800919c <_vfiprintf_r+0x21c>
 8008ff0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ff4:	f04f 0901 	mov.w	r9, #1
 8008ff8:	4623      	mov	r3, r4
 8008ffa:	469a      	mov	sl, r3
 8008ffc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009000:	b10a      	cbz	r2, 8009006 <_vfiprintf_r+0x86>
 8009002:	2a25      	cmp	r2, #37	@ 0x25
 8009004:	d1f9      	bne.n	8008ffa <_vfiprintf_r+0x7a>
 8009006:	ebba 0b04 	subs.w	fp, sl, r4
 800900a:	d00b      	beq.n	8009024 <_vfiprintf_r+0xa4>
 800900c:	465b      	mov	r3, fp
 800900e:	4622      	mov	r2, r4
 8009010:	4629      	mov	r1, r5
 8009012:	4630      	mov	r0, r6
 8009014:	f7ff ffa1 	bl	8008f5a <__sfputs_r>
 8009018:	3001      	adds	r0, #1
 800901a:	f000 80a7 	beq.w	800916c <_vfiprintf_r+0x1ec>
 800901e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009020:	445a      	add	r2, fp
 8009022:	9209      	str	r2, [sp, #36]	@ 0x24
 8009024:	f89a 3000 	ldrb.w	r3, [sl]
 8009028:	2b00      	cmp	r3, #0
 800902a:	f000 809f 	beq.w	800916c <_vfiprintf_r+0x1ec>
 800902e:	2300      	movs	r3, #0
 8009030:	f04f 32ff 	mov.w	r2, #4294967295
 8009034:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009038:	f10a 0a01 	add.w	sl, sl, #1
 800903c:	9304      	str	r3, [sp, #16]
 800903e:	9307      	str	r3, [sp, #28]
 8009040:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009044:	931a      	str	r3, [sp, #104]	@ 0x68
 8009046:	4654      	mov	r4, sl
 8009048:	2205      	movs	r2, #5
 800904a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800904e:	4853      	ldr	r0, [pc, #332]	@ (800919c <_vfiprintf_r+0x21c>)
 8009050:	f7f7 f956 	bl	8000300 <memchr>
 8009054:	9a04      	ldr	r2, [sp, #16]
 8009056:	b9d8      	cbnz	r0, 8009090 <_vfiprintf_r+0x110>
 8009058:	06d1      	lsls	r1, r2, #27
 800905a:	bf44      	itt	mi
 800905c:	2320      	movmi	r3, #32
 800905e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009062:	0713      	lsls	r3, r2, #28
 8009064:	bf44      	itt	mi
 8009066:	232b      	movmi	r3, #43	@ 0x2b
 8009068:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800906c:	f89a 3000 	ldrb.w	r3, [sl]
 8009070:	2b2a      	cmp	r3, #42	@ 0x2a
 8009072:	d015      	beq.n	80090a0 <_vfiprintf_r+0x120>
 8009074:	9a07      	ldr	r2, [sp, #28]
 8009076:	4654      	mov	r4, sl
 8009078:	2000      	movs	r0, #0
 800907a:	f04f 0c0a 	mov.w	ip, #10
 800907e:	4621      	mov	r1, r4
 8009080:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009084:	3b30      	subs	r3, #48	@ 0x30
 8009086:	2b09      	cmp	r3, #9
 8009088:	d94b      	bls.n	8009122 <_vfiprintf_r+0x1a2>
 800908a:	b1b0      	cbz	r0, 80090ba <_vfiprintf_r+0x13a>
 800908c:	9207      	str	r2, [sp, #28]
 800908e:	e014      	b.n	80090ba <_vfiprintf_r+0x13a>
 8009090:	eba0 0308 	sub.w	r3, r0, r8
 8009094:	fa09 f303 	lsl.w	r3, r9, r3
 8009098:	4313      	orrs	r3, r2
 800909a:	9304      	str	r3, [sp, #16]
 800909c:	46a2      	mov	sl, r4
 800909e:	e7d2      	b.n	8009046 <_vfiprintf_r+0xc6>
 80090a0:	9b03      	ldr	r3, [sp, #12]
 80090a2:	1d19      	adds	r1, r3, #4
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	9103      	str	r1, [sp, #12]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	bfbb      	ittet	lt
 80090ac:	425b      	neglt	r3, r3
 80090ae:	f042 0202 	orrlt.w	r2, r2, #2
 80090b2:	9307      	strge	r3, [sp, #28]
 80090b4:	9307      	strlt	r3, [sp, #28]
 80090b6:	bfb8      	it	lt
 80090b8:	9204      	strlt	r2, [sp, #16]
 80090ba:	7823      	ldrb	r3, [r4, #0]
 80090bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80090be:	d10a      	bne.n	80090d6 <_vfiprintf_r+0x156>
 80090c0:	7863      	ldrb	r3, [r4, #1]
 80090c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80090c4:	d132      	bne.n	800912c <_vfiprintf_r+0x1ac>
 80090c6:	9b03      	ldr	r3, [sp, #12]
 80090c8:	1d1a      	adds	r2, r3, #4
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	9203      	str	r2, [sp, #12]
 80090ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80090d2:	3402      	adds	r4, #2
 80090d4:	9305      	str	r3, [sp, #20]
 80090d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80091ac <_vfiprintf_r+0x22c>
 80090da:	7821      	ldrb	r1, [r4, #0]
 80090dc:	2203      	movs	r2, #3
 80090de:	4650      	mov	r0, sl
 80090e0:	f7f7 f90e 	bl	8000300 <memchr>
 80090e4:	b138      	cbz	r0, 80090f6 <_vfiprintf_r+0x176>
 80090e6:	9b04      	ldr	r3, [sp, #16]
 80090e8:	eba0 000a 	sub.w	r0, r0, sl
 80090ec:	2240      	movs	r2, #64	@ 0x40
 80090ee:	4082      	lsls	r2, r0
 80090f0:	4313      	orrs	r3, r2
 80090f2:	3401      	adds	r4, #1
 80090f4:	9304      	str	r3, [sp, #16]
 80090f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090fa:	4829      	ldr	r0, [pc, #164]	@ (80091a0 <_vfiprintf_r+0x220>)
 80090fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009100:	2206      	movs	r2, #6
 8009102:	f7f7 f8fd 	bl	8000300 <memchr>
 8009106:	2800      	cmp	r0, #0
 8009108:	d03f      	beq.n	800918a <_vfiprintf_r+0x20a>
 800910a:	4b26      	ldr	r3, [pc, #152]	@ (80091a4 <_vfiprintf_r+0x224>)
 800910c:	bb1b      	cbnz	r3, 8009156 <_vfiprintf_r+0x1d6>
 800910e:	9b03      	ldr	r3, [sp, #12]
 8009110:	3307      	adds	r3, #7
 8009112:	f023 0307 	bic.w	r3, r3, #7
 8009116:	3308      	adds	r3, #8
 8009118:	9303      	str	r3, [sp, #12]
 800911a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800911c:	443b      	add	r3, r7
 800911e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009120:	e76a      	b.n	8008ff8 <_vfiprintf_r+0x78>
 8009122:	fb0c 3202 	mla	r2, ip, r2, r3
 8009126:	460c      	mov	r4, r1
 8009128:	2001      	movs	r0, #1
 800912a:	e7a8      	b.n	800907e <_vfiprintf_r+0xfe>
 800912c:	2300      	movs	r3, #0
 800912e:	3401      	adds	r4, #1
 8009130:	9305      	str	r3, [sp, #20]
 8009132:	4619      	mov	r1, r3
 8009134:	f04f 0c0a 	mov.w	ip, #10
 8009138:	4620      	mov	r0, r4
 800913a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800913e:	3a30      	subs	r2, #48	@ 0x30
 8009140:	2a09      	cmp	r2, #9
 8009142:	d903      	bls.n	800914c <_vfiprintf_r+0x1cc>
 8009144:	2b00      	cmp	r3, #0
 8009146:	d0c6      	beq.n	80090d6 <_vfiprintf_r+0x156>
 8009148:	9105      	str	r1, [sp, #20]
 800914a:	e7c4      	b.n	80090d6 <_vfiprintf_r+0x156>
 800914c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009150:	4604      	mov	r4, r0
 8009152:	2301      	movs	r3, #1
 8009154:	e7f0      	b.n	8009138 <_vfiprintf_r+0x1b8>
 8009156:	ab03      	add	r3, sp, #12
 8009158:	9300      	str	r3, [sp, #0]
 800915a:	462a      	mov	r2, r5
 800915c:	4b12      	ldr	r3, [pc, #72]	@ (80091a8 <_vfiprintf_r+0x228>)
 800915e:	a904      	add	r1, sp, #16
 8009160:	4630      	mov	r0, r6
 8009162:	f3af 8000 	nop.w
 8009166:	4607      	mov	r7, r0
 8009168:	1c78      	adds	r0, r7, #1
 800916a:	d1d6      	bne.n	800911a <_vfiprintf_r+0x19a>
 800916c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800916e:	07d9      	lsls	r1, r3, #31
 8009170:	d405      	bmi.n	800917e <_vfiprintf_r+0x1fe>
 8009172:	89ab      	ldrh	r3, [r5, #12]
 8009174:	059a      	lsls	r2, r3, #22
 8009176:	d402      	bmi.n	800917e <_vfiprintf_r+0x1fe>
 8009178:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800917a:	f7ff fddd 	bl	8008d38 <__retarget_lock_release_recursive>
 800917e:	89ab      	ldrh	r3, [r5, #12]
 8009180:	065b      	lsls	r3, r3, #25
 8009182:	f53f af1f 	bmi.w	8008fc4 <_vfiprintf_r+0x44>
 8009186:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009188:	e71e      	b.n	8008fc8 <_vfiprintf_r+0x48>
 800918a:	ab03      	add	r3, sp, #12
 800918c:	9300      	str	r3, [sp, #0]
 800918e:	462a      	mov	r2, r5
 8009190:	4b05      	ldr	r3, [pc, #20]	@ (80091a8 <_vfiprintf_r+0x228>)
 8009192:	a904      	add	r1, sp, #16
 8009194:	4630      	mov	r0, r6
 8009196:	f000 f879 	bl	800928c <_printf_i>
 800919a:	e7e4      	b.n	8009166 <_vfiprintf_r+0x1e6>
 800919c:	08009890 	.word	0x08009890
 80091a0:	0800989a 	.word	0x0800989a
 80091a4:	00000000 	.word	0x00000000
 80091a8:	08008f5b 	.word	0x08008f5b
 80091ac:	08009896 	.word	0x08009896

080091b0 <_printf_common>:
 80091b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091b4:	4616      	mov	r6, r2
 80091b6:	4698      	mov	r8, r3
 80091b8:	688a      	ldr	r2, [r1, #8]
 80091ba:	690b      	ldr	r3, [r1, #16]
 80091bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80091c0:	4293      	cmp	r3, r2
 80091c2:	bfb8      	it	lt
 80091c4:	4613      	movlt	r3, r2
 80091c6:	6033      	str	r3, [r6, #0]
 80091c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80091cc:	4607      	mov	r7, r0
 80091ce:	460c      	mov	r4, r1
 80091d0:	b10a      	cbz	r2, 80091d6 <_printf_common+0x26>
 80091d2:	3301      	adds	r3, #1
 80091d4:	6033      	str	r3, [r6, #0]
 80091d6:	6823      	ldr	r3, [r4, #0]
 80091d8:	0699      	lsls	r1, r3, #26
 80091da:	bf42      	ittt	mi
 80091dc:	6833      	ldrmi	r3, [r6, #0]
 80091de:	3302      	addmi	r3, #2
 80091e0:	6033      	strmi	r3, [r6, #0]
 80091e2:	6825      	ldr	r5, [r4, #0]
 80091e4:	f015 0506 	ands.w	r5, r5, #6
 80091e8:	d106      	bne.n	80091f8 <_printf_common+0x48>
 80091ea:	f104 0a19 	add.w	sl, r4, #25
 80091ee:	68e3      	ldr	r3, [r4, #12]
 80091f0:	6832      	ldr	r2, [r6, #0]
 80091f2:	1a9b      	subs	r3, r3, r2
 80091f4:	42ab      	cmp	r3, r5
 80091f6:	dc26      	bgt.n	8009246 <_printf_common+0x96>
 80091f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80091fc:	6822      	ldr	r2, [r4, #0]
 80091fe:	3b00      	subs	r3, #0
 8009200:	bf18      	it	ne
 8009202:	2301      	movne	r3, #1
 8009204:	0692      	lsls	r2, r2, #26
 8009206:	d42b      	bmi.n	8009260 <_printf_common+0xb0>
 8009208:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800920c:	4641      	mov	r1, r8
 800920e:	4638      	mov	r0, r7
 8009210:	47c8      	blx	r9
 8009212:	3001      	adds	r0, #1
 8009214:	d01e      	beq.n	8009254 <_printf_common+0xa4>
 8009216:	6823      	ldr	r3, [r4, #0]
 8009218:	6922      	ldr	r2, [r4, #16]
 800921a:	f003 0306 	and.w	r3, r3, #6
 800921e:	2b04      	cmp	r3, #4
 8009220:	bf02      	ittt	eq
 8009222:	68e5      	ldreq	r5, [r4, #12]
 8009224:	6833      	ldreq	r3, [r6, #0]
 8009226:	1aed      	subeq	r5, r5, r3
 8009228:	68a3      	ldr	r3, [r4, #8]
 800922a:	bf0c      	ite	eq
 800922c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009230:	2500      	movne	r5, #0
 8009232:	4293      	cmp	r3, r2
 8009234:	bfc4      	itt	gt
 8009236:	1a9b      	subgt	r3, r3, r2
 8009238:	18ed      	addgt	r5, r5, r3
 800923a:	2600      	movs	r6, #0
 800923c:	341a      	adds	r4, #26
 800923e:	42b5      	cmp	r5, r6
 8009240:	d11a      	bne.n	8009278 <_printf_common+0xc8>
 8009242:	2000      	movs	r0, #0
 8009244:	e008      	b.n	8009258 <_printf_common+0xa8>
 8009246:	2301      	movs	r3, #1
 8009248:	4652      	mov	r2, sl
 800924a:	4641      	mov	r1, r8
 800924c:	4638      	mov	r0, r7
 800924e:	47c8      	blx	r9
 8009250:	3001      	adds	r0, #1
 8009252:	d103      	bne.n	800925c <_printf_common+0xac>
 8009254:	f04f 30ff 	mov.w	r0, #4294967295
 8009258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800925c:	3501      	adds	r5, #1
 800925e:	e7c6      	b.n	80091ee <_printf_common+0x3e>
 8009260:	18e1      	adds	r1, r4, r3
 8009262:	1c5a      	adds	r2, r3, #1
 8009264:	2030      	movs	r0, #48	@ 0x30
 8009266:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800926a:	4422      	add	r2, r4
 800926c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009270:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009274:	3302      	adds	r3, #2
 8009276:	e7c7      	b.n	8009208 <_printf_common+0x58>
 8009278:	2301      	movs	r3, #1
 800927a:	4622      	mov	r2, r4
 800927c:	4641      	mov	r1, r8
 800927e:	4638      	mov	r0, r7
 8009280:	47c8      	blx	r9
 8009282:	3001      	adds	r0, #1
 8009284:	d0e6      	beq.n	8009254 <_printf_common+0xa4>
 8009286:	3601      	adds	r6, #1
 8009288:	e7d9      	b.n	800923e <_printf_common+0x8e>
	...

0800928c <_printf_i>:
 800928c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009290:	7e0f      	ldrb	r7, [r1, #24]
 8009292:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009294:	2f78      	cmp	r7, #120	@ 0x78
 8009296:	4691      	mov	r9, r2
 8009298:	4680      	mov	r8, r0
 800929a:	460c      	mov	r4, r1
 800929c:	469a      	mov	sl, r3
 800929e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80092a2:	d807      	bhi.n	80092b4 <_printf_i+0x28>
 80092a4:	2f62      	cmp	r7, #98	@ 0x62
 80092a6:	d80a      	bhi.n	80092be <_printf_i+0x32>
 80092a8:	2f00      	cmp	r7, #0
 80092aa:	f000 80d1 	beq.w	8009450 <_printf_i+0x1c4>
 80092ae:	2f58      	cmp	r7, #88	@ 0x58
 80092b0:	f000 80b8 	beq.w	8009424 <_printf_i+0x198>
 80092b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80092b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80092bc:	e03a      	b.n	8009334 <_printf_i+0xa8>
 80092be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80092c2:	2b15      	cmp	r3, #21
 80092c4:	d8f6      	bhi.n	80092b4 <_printf_i+0x28>
 80092c6:	a101      	add	r1, pc, #4	@ (adr r1, 80092cc <_printf_i+0x40>)
 80092c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092cc:	08009325 	.word	0x08009325
 80092d0:	08009339 	.word	0x08009339
 80092d4:	080092b5 	.word	0x080092b5
 80092d8:	080092b5 	.word	0x080092b5
 80092dc:	080092b5 	.word	0x080092b5
 80092e0:	080092b5 	.word	0x080092b5
 80092e4:	08009339 	.word	0x08009339
 80092e8:	080092b5 	.word	0x080092b5
 80092ec:	080092b5 	.word	0x080092b5
 80092f0:	080092b5 	.word	0x080092b5
 80092f4:	080092b5 	.word	0x080092b5
 80092f8:	08009437 	.word	0x08009437
 80092fc:	08009363 	.word	0x08009363
 8009300:	080093f1 	.word	0x080093f1
 8009304:	080092b5 	.word	0x080092b5
 8009308:	080092b5 	.word	0x080092b5
 800930c:	08009459 	.word	0x08009459
 8009310:	080092b5 	.word	0x080092b5
 8009314:	08009363 	.word	0x08009363
 8009318:	080092b5 	.word	0x080092b5
 800931c:	080092b5 	.word	0x080092b5
 8009320:	080093f9 	.word	0x080093f9
 8009324:	6833      	ldr	r3, [r6, #0]
 8009326:	1d1a      	adds	r2, r3, #4
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	6032      	str	r2, [r6, #0]
 800932c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009330:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009334:	2301      	movs	r3, #1
 8009336:	e09c      	b.n	8009472 <_printf_i+0x1e6>
 8009338:	6833      	ldr	r3, [r6, #0]
 800933a:	6820      	ldr	r0, [r4, #0]
 800933c:	1d19      	adds	r1, r3, #4
 800933e:	6031      	str	r1, [r6, #0]
 8009340:	0606      	lsls	r6, r0, #24
 8009342:	d501      	bpl.n	8009348 <_printf_i+0xbc>
 8009344:	681d      	ldr	r5, [r3, #0]
 8009346:	e003      	b.n	8009350 <_printf_i+0xc4>
 8009348:	0645      	lsls	r5, r0, #25
 800934a:	d5fb      	bpl.n	8009344 <_printf_i+0xb8>
 800934c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009350:	2d00      	cmp	r5, #0
 8009352:	da03      	bge.n	800935c <_printf_i+0xd0>
 8009354:	232d      	movs	r3, #45	@ 0x2d
 8009356:	426d      	negs	r5, r5
 8009358:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800935c:	4858      	ldr	r0, [pc, #352]	@ (80094c0 <_printf_i+0x234>)
 800935e:	230a      	movs	r3, #10
 8009360:	e011      	b.n	8009386 <_printf_i+0xfa>
 8009362:	6821      	ldr	r1, [r4, #0]
 8009364:	6833      	ldr	r3, [r6, #0]
 8009366:	0608      	lsls	r0, r1, #24
 8009368:	f853 5b04 	ldr.w	r5, [r3], #4
 800936c:	d402      	bmi.n	8009374 <_printf_i+0xe8>
 800936e:	0649      	lsls	r1, r1, #25
 8009370:	bf48      	it	mi
 8009372:	b2ad      	uxthmi	r5, r5
 8009374:	2f6f      	cmp	r7, #111	@ 0x6f
 8009376:	4852      	ldr	r0, [pc, #328]	@ (80094c0 <_printf_i+0x234>)
 8009378:	6033      	str	r3, [r6, #0]
 800937a:	bf14      	ite	ne
 800937c:	230a      	movne	r3, #10
 800937e:	2308      	moveq	r3, #8
 8009380:	2100      	movs	r1, #0
 8009382:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009386:	6866      	ldr	r6, [r4, #4]
 8009388:	60a6      	str	r6, [r4, #8]
 800938a:	2e00      	cmp	r6, #0
 800938c:	db05      	blt.n	800939a <_printf_i+0x10e>
 800938e:	6821      	ldr	r1, [r4, #0]
 8009390:	432e      	orrs	r6, r5
 8009392:	f021 0104 	bic.w	r1, r1, #4
 8009396:	6021      	str	r1, [r4, #0]
 8009398:	d04b      	beq.n	8009432 <_printf_i+0x1a6>
 800939a:	4616      	mov	r6, r2
 800939c:	fbb5 f1f3 	udiv	r1, r5, r3
 80093a0:	fb03 5711 	mls	r7, r3, r1, r5
 80093a4:	5dc7      	ldrb	r7, [r0, r7]
 80093a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80093aa:	462f      	mov	r7, r5
 80093ac:	42bb      	cmp	r3, r7
 80093ae:	460d      	mov	r5, r1
 80093b0:	d9f4      	bls.n	800939c <_printf_i+0x110>
 80093b2:	2b08      	cmp	r3, #8
 80093b4:	d10b      	bne.n	80093ce <_printf_i+0x142>
 80093b6:	6823      	ldr	r3, [r4, #0]
 80093b8:	07df      	lsls	r7, r3, #31
 80093ba:	d508      	bpl.n	80093ce <_printf_i+0x142>
 80093bc:	6923      	ldr	r3, [r4, #16]
 80093be:	6861      	ldr	r1, [r4, #4]
 80093c0:	4299      	cmp	r1, r3
 80093c2:	bfde      	ittt	le
 80093c4:	2330      	movle	r3, #48	@ 0x30
 80093c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80093ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 80093ce:	1b92      	subs	r2, r2, r6
 80093d0:	6122      	str	r2, [r4, #16]
 80093d2:	f8cd a000 	str.w	sl, [sp]
 80093d6:	464b      	mov	r3, r9
 80093d8:	aa03      	add	r2, sp, #12
 80093da:	4621      	mov	r1, r4
 80093dc:	4640      	mov	r0, r8
 80093de:	f7ff fee7 	bl	80091b0 <_printf_common>
 80093e2:	3001      	adds	r0, #1
 80093e4:	d14a      	bne.n	800947c <_printf_i+0x1f0>
 80093e6:	f04f 30ff 	mov.w	r0, #4294967295
 80093ea:	b004      	add	sp, #16
 80093ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093f0:	6823      	ldr	r3, [r4, #0]
 80093f2:	f043 0320 	orr.w	r3, r3, #32
 80093f6:	6023      	str	r3, [r4, #0]
 80093f8:	4832      	ldr	r0, [pc, #200]	@ (80094c4 <_printf_i+0x238>)
 80093fa:	2778      	movs	r7, #120	@ 0x78
 80093fc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009400:	6823      	ldr	r3, [r4, #0]
 8009402:	6831      	ldr	r1, [r6, #0]
 8009404:	061f      	lsls	r7, r3, #24
 8009406:	f851 5b04 	ldr.w	r5, [r1], #4
 800940a:	d402      	bmi.n	8009412 <_printf_i+0x186>
 800940c:	065f      	lsls	r7, r3, #25
 800940e:	bf48      	it	mi
 8009410:	b2ad      	uxthmi	r5, r5
 8009412:	6031      	str	r1, [r6, #0]
 8009414:	07d9      	lsls	r1, r3, #31
 8009416:	bf44      	itt	mi
 8009418:	f043 0320 	orrmi.w	r3, r3, #32
 800941c:	6023      	strmi	r3, [r4, #0]
 800941e:	b11d      	cbz	r5, 8009428 <_printf_i+0x19c>
 8009420:	2310      	movs	r3, #16
 8009422:	e7ad      	b.n	8009380 <_printf_i+0xf4>
 8009424:	4826      	ldr	r0, [pc, #152]	@ (80094c0 <_printf_i+0x234>)
 8009426:	e7e9      	b.n	80093fc <_printf_i+0x170>
 8009428:	6823      	ldr	r3, [r4, #0]
 800942a:	f023 0320 	bic.w	r3, r3, #32
 800942e:	6023      	str	r3, [r4, #0]
 8009430:	e7f6      	b.n	8009420 <_printf_i+0x194>
 8009432:	4616      	mov	r6, r2
 8009434:	e7bd      	b.n	80093b2 <_printf_i+0x126>
 8009436:	6833      	ldr	r3, [r6, #0]
 8009438:	6825      	ldr	r5, [r4, #0]
 800943a:	6961      	ldr	r1, [r4, #20]
 800943c:	1d18      	adds	r0, r3, #4
 800943e:	6030      	str	r0, [r6, #0]
 8009440:	062e      	lsls	r6, r5, #24
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	d501      	bpl.n	800944a <_printf_i+0x1be>
 8009446:	6019      	str	r1, [r3, #0]
 8009448:	e002      	b.n	8009450 <_printf_i+0x1c4>
 800944a:	0668      	lsls	r0, r5, #25
 800944c:	d5fb      	bpl.n	8009446 <_printf_i+0x1ba>
 800944e:	8019      	strh	r1, [r3, #0]
 8009450:	2300      	movs	r3, #0
 8009452:	6123      	str	r3, [r4, #16]
 8009454:	4616      	mov	r6, r2
 8009456:	e7bc      	b.n	80093d2 <_printf_i+0x146>
 8009458:	6833      	ldr	r3, [r6, #0]
 800945a:	1d1a      	adds	r2, r3, #4
 800945c:	6032      	str	r2, [r6, #0]
 800945e:	681e      	ldr	r6, [r3, #0]
 8009460:	6862      	ldr	r2, [r4, #4]
 8009462:	2100      	movs	r1, #0
 8009464:	4630      	mov	r0, r6
 8009466:	f7f6 ff4b 	bl	8000300 <memchr>
 800946a:	b108      	cbz	r0, 8009470 <_printf_i+0x1e4>
 800946c:	1b80      	subs	r0, r0, r6
 800946e:	6060      	str	r0, [r4, #4]
 8009470:	6863      	ldr	r3, [r4, #4]
 8009472:	6123      	str	r3, [r4, #16]
 8009474:	2300      	movs	r3, #0
 8009476:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800947a:	e7aa      	b.n	80093d2 <_printf_i+0x146>
 800947c:	6923      	ldr	r3, [r4, #16]
 800947e:	4632      	mov	r2, r6
 8009480:	4649      	mov	r1, r9
 8009482:	4640      	mov	r0, r8
 8009484:	47d0      	blx	sl
 8009486:	3001      	adds	r0, #1
 8009488:	d0ad      	beq.n	80093e6 <_printf_i+0x15a>
 800948a:	6823      	ldr	r3, [r4, #0]
 800948c:	079b      	lsls	r3, r3, #30
 800948e:	d413      	bmi.n	80094b8 <_printf_i+0x22c>
 8009490:	68e0      	ldr	r0, [r4, #12]
 8009492:	9b03      	ldr	r3, [sp, #12]
 8009494:	4298      	cmp	r0, r3
 8009496:	bfb8      	it	lt
 8009498:	4618      	movlt	r0, r3
 800949a:	e7a6      	b.n	80093ea <_printf_i+0x15e>
 800949c:	2301      	movs	r3, #1
 800949e:	4632      	mov	r2, r6
 80094a0:	4649      	mov	r1, r9
 80094a2:	4640      	mov	r0, r8
 80094a4:	47d0      	blx	sl
 80094a6:	3001      	adds	r0, #1
 80094a8:	d09d      	beq.n	80093e6 <_printf_i+0x15a>
 80094aa:	3501      	adds	r5, #1
 80094ac:	68e3      	ldr	r3, [r4, #12]
 80094ae:	9903      	ldr	r1, [sp, #12]
 80094b0:	1a5b      	subs	r3, r3, r1
 80094b2:	42ab      	cmp	r3, r5
 80094b4:	dcf2      	bgt.n	800949c <_printf_i+0x210>
 80094b6:	e7eb      	b.n	8009490 <_printf_i+0x204>
 80094b8:	2500      	movs	r5, #0
 80094ba:	f104 0619 	add.w	r6, r4, #25
 80094be:	e7f5      	b.n	80094ac <_printf_i+0x220>
 80094c0:	080098a1 	.word	0x080098a1
 80094c4:	080098b2 	.word	0x080098b2

080094c8 <__sflush_r>:
 80094c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80094cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094d0:	0716      	lsls	r6, r2, #28
 80094d2:	4605      	mov	r5, r0
 80094d4:	460c      	mov	r4, r1
 80094d6:	d454      	bmi.n	8009582 <__sflush_r+0xba>
 80094d8:	684b      	ldr	r3, [r1, #4]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	dc02      	bgt.n	80094e4 <__sflush_r+0x1c>
 80094de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	dd48      	ble.n	8009576 <__sflush_r+0xae>
 80094e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80094e6:	2e00      	cmp	r6, #0
 80094e8:	d045      	beq.n	8009576 <__sflush_r+0xae>
 80094ea:	2300      	movs	r3, #0
 80094ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80094f0:	682f      	ldr	r7, [r5, #0]
 80094f2:	6a21      	ldr	r1, [r4, #32]
 80094f4:	602b      	str	r3, [r5, #0]
 80094f6:	d030      	beq.n	800955a <__sflush_r+0x92>
 80094f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80094fa:	89a3      	ldrh	r3, [r4, #12]
 80094fc:	0759      	lsls	r1, r3, #29
 80094fe:	d505      	bpl.n	800950c <__sflush_r+0x44>
 8009500:	6863      	ldr	r3, [r4, #4]
 8009502:	1ad2      	subs	r2, r2, r3
 8009504:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009506:	b10b      	cbz	r3, 800950c <__sflush_r+0x44>
 8009508:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800950a:	1ad2      	subs	r2, r2, r3
 800950c:	2300      	movs	r3, #0
 800950e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009510:	6a21      	ldr	r1, [r4, #32]
 8009512:	4628      	mov	r0, r5
 8009514:	47b0      	blx	r6
 8009516:	1c43      	adds	r3, r0, #1
 8009518:	89a3      	ldrh	r3, [r4, #12]
 800951a:	d106      	bne.n	800952a <__sflush_r+0x62>
 800951c:	6829      	ldr	r1, [r5, #0]
 800951e:	291d      	cmp	r1, #29
 8009520:	d82b      	bhi.n	800957a <__sflush_r+0xb2>
 8009522:	4a2a      	ldr	r2, [pc, #168]	@ (80095cc <__sflush_r+0x104>)
 8009524:	40ca      	lsrs	r2, r1
 8009526:	07d6      	lsls	r6, r2, #31
 8009528:	d527      	bpl.n	800957a <__sflush_r+0xb2>
 800952a:	2200      	movs	r2, #0
 800952c:	6062      	str	r2, [r4, #4]
 800952e:	04d9      	lsls	r1, r3, #19
 8009530:	6922      	ldr	r2, [r4, #16]
 8009532:	6022      	str	r2, [r4, #0]
 8009534:	d504      	bpl.n	8009540 <__sflush_r+0x78>
 8009536:	1c42      	adds	r2, r0, #1
 8009538:	d101      	bne.n	800953e <__sflush_r+0x76>
 800953a:	682b      	ldr	r3, [r5, #0]
 800953c:	b903      	cbnz	r3, 8009540 <__sflush_r+0x78>
 800953e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009540:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009542:	602f      	str	r7, [r5, #0]
 8009544:	b1b9      	cbz	r1, 8009576 <__sflush_r+0xae>
 8009546:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800954a:	4299      	cmp	r1, r3
 800954c:	d002      	beq.n	8009554 <__sflush_r+0x8c>
 800954e:	4628      	mov	r0, r5
 8009550:	f7ff fbf4 	bl	8008d3c <_free_r>
 8009554:	2300      	movs	r3, #0
 8009556:	6363      	str	r3, [r4, #52]	@ 0x34
 8009558:	e00d      	b.n	8009576 <__sflush_r+0xae>
 800955a:	2301      	movs	r3, #1
 800955c:	4628      	mov	r0, r5
 800955e:	47b0      	blx	r6
 8009560:	4602      	mov	r2, r0
 8009562:	1c50      	adds	r0, r2, #1
 8009564:	d1c9      	bne.n	80094fa <__sflush_r+0x32>
 8009566:	682b      	ldr	r3, [r5, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d0c6      	beq.n	80094fa <__sflush_r+0x32>
 800956c:	2b1d      	cmp	r3, #29
 800956e:	d001      	beq.n	8009574 <__sflush_r+0xac>
 8009570:	2b16      	cmp	r3, #22
 8009572:	d11e      	bne.n	80095b2 <__sflush_r+0xea>
 8009574:	602f      	str	r7, [r5, #0]
 8009576:	2000      	movs	r0, #0
 8009578:	e022      	b.n	80095c0 <__sflush_r+0xf8>
 800957a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800957e:	b21b      	sxth	r3, r3
 8009580:	e01b      	b.n	80095ba <__sflush_r+0xf2>
 8009582:	690f      	ldr	r7, [r1, #16]
 8009584:	2f00      	cmp	r7, #0
 8009586:	d0f6      	beq.n	8009576 <__sflush_r+0xae>
 8009588:	0793      	lsls	r3, r2, #30
 800958a:	680e      	ldr	r6, [r1, #0]
 800958c:	bf08      	it	eq
 800958e:	694b      	ldreq	r3, [r1, #20]
 8009590:	600f      	str	r7, [r1, #0]
 8009592:	bf18      	it	ne
 8009594:	2300      	movne	r3, #0
 8009596:	eba6 0807 	sub.w	r8, r6, r7
 800959a:	608b      	str	r3, [r1, #8]
 800959c:	f1b8 0f00 	cmp.w	r8, #0
 80095a0:	dde9      	ble.n	8009576 <__sflush_r+0xae>
 80095a2:	6a21      	ldr	r1, [r4, #32]
 80095a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80095a6:	4643      	mov	r3, r8
 80095a8:	463a      	mov	r2, r7
 80095aa:	4628      	mov	r0, r5
 80095ac:	47b0      	blx	r6
 80095ae:	2800      	cmp	r0, #0
 80095b0:	dc08      	bgt.n	80095c4 <__sflush_r+0xfc>
 80095b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095ba:	81a3      	strh	r3, [r4, #12]
 80095bc:	f04f 30ff 	mov.w	r0, #4294967295
 80095c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095c4:	4407      	add	r7, r0
 80095c6:	eba8 0800 	sub.w	r8, r8, r0
 80095ca:	e7e7      	b.n	800959c <__sflush_r+0xd4>
 80095cc:	20400001 	.word	0x20400001

080095d0 <_fflush_r>:
 80095d0:	b538      	push	{r3, r4, r5, lr}
 80095d2:	690b      	ldr	r3, [r1, #16]
 80095d4:	4605      	mov	r5, r0
 80095d6:	460c      	mov	r4, r1
 80095d8:	b913      	cbnz	r3, 80095e0 <_fflush_r+0x10>
 80095da:	2500      	movs	r5, #0
 80095dc:	4628      	mov	r0, r5
 80095de:	bd38      	pop	{r3, r4, r5, pc}
 80095e0:	b118      	cbz	r0, 80095ea <_fflush_r+0x1a>
 80095e2:	6a03      	ldr	r3, [r0, #32]
 80095e4:	b90b      	cbnz	r3, 80095ea <_fflush_r+0x1a>
 80095e6:	f7ff f9af 	bl	8008948 <__sinit>
 80095ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d0f3      	beq.n	80095da <_fflush_r+0xa>
 80095f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80095f4:	07d0      	lsls	r0, r2, #31
 80095f6:	d404      	bmi.n	8009602 <_fflush_r+0x32>
 80095f8:	0599      	lsls	r1, r3, #22
 80095fa:	d402      	bmi.n	8009602 <_fflush_r+0x32>
 80095fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80095fe:	f7ff fb9a 	bl	8008d36 <__retarget_lock_acquire_recursive>
 8009602:	4628      	mov	r0, r5
 8009604:	4621      	mov	r1, r4
 8009606:	f7ff ff5f 	bl	80094c8 <__sflush_r>
 800960a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800960c:	07da      	lsls	r2, r3, #31
 800960e:	4605      	mov	r5, r0
 8009610:	d4e4      	bmi.n	80095dc <_fflush_r+0xc>
 8009612:	89a3      	ldrh	r3, [r4, #12]
 8009614:	059b      	lsls	r3, r3, #22
 8009616:	d4e1      	bmi.n	80095dc <_fflush_r+0xc>
 8009618:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800961a:	f7ff fb8d 	bl	8008d38 <__retarget_lock_release_recursive>
 800961e:	e7dd      	b.n	80095dc <_fflush_r+0xc>

08009620 <__swhatbuf_r>:
 8009620:	b570      	push	{r4, r5, r6, lr}
 8009622:	460c      	mov	r4, r1
 8009624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009628:	2900      	cmp	r1, #0
 800962a:	b096      	sub	sp, #88	@ 0x58
 800962c:	4615      	mov	r5, r2
 800962e:	461e      	mov	r6, r3
 8009630:	da0d      	bge.n	800964e <__swhatbuf_r+0x2e>
 8009632:	89a3      	ldrh	r3, [r4, #12]
 8009634:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009638:	f04f 0100 	mov.w	r1, #0
 800963c:	bf14      	ite	ne
 800963e:	2340      	movne	r3, #64	@ 0x40
 8009640:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009644:	2000      	movs	r0, #0
 8009646:	6031      	str	r1, [r6, #0]
 8009648:	602b      	str	r3, [r5, #0]
 800964a:	b016      	add	sp, #88	@ 0x58
 800964c:	bd70      	pop	{r4, r5, r6, pc}
 800964e:	466a      	mov	r2, sp
 8009650:	f000 f848 	bl	80096e4 <_fstat_r>
 8009654:	2800      	cmp	r0, #0
 8009656:	dbec      	blt.n	8009632 <__swhatbuf_r+0x12>
 8009658:	9901      	ldr	r1, [sp, #4]
 800965a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800965e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009662:	4259      	negs	r1, r3
 8009664:	4159      	adcs	r1, r3
 8009666:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800966a:	e7eb      	b.n	8009644 <__swhatbuf_r+0x24>

0800966c <__smakebuf_r>:
 800966c:	898b      	ldrh	r3, [r1, #12]
 800966e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009670:	079d      	lsls	r5, r3, #30
 8009672:	4606      	mov	r6, r0
 8009674:	460c      	mov	r4, r1
 8009676:	d507      	bpl.n	8009688 <__smakebuf_r+0x1c>
 8009678:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800967c:	6023      	str	r3, [r4, #0]
 800967e:	6123      	str	r3, [r4, #16]
 8009680:	2301      	movs	r3, #1
 8009682:	6163      	str	r3, [r4, #20]
 8009684:	b003      	add	sp, #12
 8009686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009688:	ab01      	add	r3, sp, #4
 800968a:	466a      	mov	r2, sp
 800968c:	f7ff ffc8 	bl	8009620 <__swhatbuf_r>
 8009690:	9f00      	ldr	r7, [sp, #0]
 8009692:	4605      	mov	r5, r0
 8009694:	4639      	mov	r1, r7
 8009696:	4630      	mov	r0, r6
 8009698:	f7ff fbbc 	bl	8008e14 <_malloc_r>
 800969c:	b948      	cbnz	r0, 80096b2 <__smakebuf_r+0x46>
 800969e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096a2:	059a      	lsls	r2, r3, #22
 80096a4:	d4ee      	bmi.n	8009684 <__smakebuf_r+0x18>
 80096a6:	f023 0303 	bic.w	r3, r3, #3
 80096aa:	f043 0302 	orr.w	r3, r3, #2
 80096ae:	81a3      	strh	r3, [r4, #12]
 80096b0:	e7e2      	b.n	8009678 <__smakebuf_r+0xc>
 80096b2:	89a3      	ldrh	r3, [r4, #12]
 80096b4:	6020      	str	r0, [r4, #0]
 80096b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096ba:	81a3      	strh	r3, [r4, #12]
 80096bc:	9b01      	ldr	r3, [sp, #4]
 80096be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80096c2:	b15b      	cbz	r3, 80096dc <__smakebuf_r+0x70>
 80096c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096c8:	4630      	mov	r0, r6
 80096ca:	f000 f81d 	bl	8009708 <_isatty_r>
 80096ce:	b128      	cbz	r0, 80096dc <__smakebuf_r+0x70>
 80096d0:	89a3      	ldrh	r3, [r4, #12]
 80096d2:	f023 0303 	bic.w	r3, r3, #3
 80096d6:	f043 0301 	orr.w	r3, r3, #1
 80096da:	81a3      	strh	r3, [r4, #12]
 80096dc:	89a3      	ldrh	r3, [r4, #12]
 80096de:	431d      	orrs	r5, r3
 80096e0:	81a5      	strh	r5, [r4, #12]
 80096e2:	e7cf      	b.n	8009684 <__smakebuf_r+0x18>

080096e4 <_fstat_r>:
 80096e4:	b538      	push	{r3, r4, r5, lr}
 80096e6:	4d07      	ldr	r5, [pc, #28]	@ (8009704 <_fstat_r+0x20>)
 80096e8:	2300      	movs	r3, #0
 80096ea:	4604      	mov	r4, r0
 80096ec:	4608      	mov	r0, r1
 80096ee:	4611      	mov	r1, r2
 80096f0:	602b      	str	r3, [r5, #0]
 80096f2:	f7f8 f821 	bl	8001738 <_fstat>
 80096f6:	1c43      	adds	r3, r0, #1
 80096f8:	d102      	bne.n	8009700 <_fstat_r+0x1c>
 80096fa:	682b      	ldr	r3, [r5, #0]
 80096fc:	b103      	cbz	r3, 8009700 <_fstat_r+0x1c>
 80096fe:	6023      	str	r3, [r4, #0]
 8009700:	bd38      	pop	{r3, r4, r5, pc}
 8009702:	bf00      	nop
 8009704:	240004d0 	.word	0x240004d0

08009708 <_isatty_r>:
 8009708:	b538      	push	{r3, r4, r5, lr}
 800970a:	4d06      	ldr	r5, [pc, #24]	@ (8009724 <_isatty_r+0x1c>)
 800970c:	2300      	movs	r3, #0
 800970e:	4604      	mov	r4, r0
 8009710:	4608      	mov	r0, r1
 8009712:	602b      	str	r3, [r5, #0]
 8009714:	f7f8 f820 	bl	8001758 <_isatty>
 8009718:	1c43      	adds	r3, r0, #1
 800971a:	d102      	bne.n	8009722 <_isatty_r+0x1a>
 800971c:	682b      	ldr	r3, [r5, #0]
 800971e:	b103      	cbz	r3, 8009722 <_isatty_r+0x1a>
 8009720:	6023      	str	r3, [r4, #0]
 8009722:	bd38      	pop	{r3, r4, r5, pc}
 8009724:	240004d0 	.word	0x240004d0

08009728 <_sbrk_r>:
 8009728:	b538      	push	{r3, r4, r5, lr}
 800972a:	4d06      	ldr	r5, [pc, #24]	@ (8009744 <_sbrk_r+0x1c>)
 800972c:	2300      	movs	r3, #0
 800972e:	4604      	mov	r4, r0
 8009730:	4608      	mov	r0, r1
 8009732:	602b      	str	r3, [r5, #0]
 8009734:	f7f8 f828 	bl	8001788 <_sbrk>
 8009738:	1c43      	adds	r3, r0, #1
 800973a:	d102      	bne.n	8009742 <_sbrk_r+0x1a>
 800973c:	682b      	ldr	r3, [r5, #0]
 800973e:	b103      	cbz	r3, 8009742 <_sbrk_r+0x1a>
 8009740:	6023      	str	r3, [r4, #0]
 8009742:	bd38      	pop	{r3, r4, r5, pc}
 8009744:	240004d0 	.word	0x240004d0

08009748 <_init>:
 8009748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800974a:	bf00      	nop
 800974c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800974e:	bc08      	pop	{r3}
 8009750:	469e      	mov	lr, r3
 8009752:	4770      	bx	lr

08009754 <_fini>:
 8009754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009756:	bf00      	nop
 8009758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800975a:	bc08      	pop	{r3}
 800975c:	469e      	mov	lr, r3
 800975e:	4770      	bx	lr
